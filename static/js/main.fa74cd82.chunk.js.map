{"version":3,"sources":["assets/images/printer.svg","redux/actions/index.ts","redux/reducers/UserReducer.ts","redux/reducers/AuthReducer.ts","redux/reducers/OrganizationReducer.ts","redux/reducers/RoleReducer.ts","redux/reducers/AlertBoxReducer.ts","redux/reducers/DepartmentReducer.ts","redux/reducers/CustomerReducer.ts","redux/reducers/TestGroupsReducer.ts","redux/reducers/ParameterReducer.ts","redux/reducers/SampleGroupsReducer.ts","redux/reducers/SamplesDeatilsReducer.ts","redux/reducers/SamplesReducer.ts","redux/reducers/index.ts","redux/store.ts","redux/actions/AuthActions.ts","redux/actions/Alert.ts","redux/actions/UserActions.ts","redux/actions/OrganizationActions.ts","pages/Loading/index.tsx","components/Box.tsx","components/Heading.tsx","components/Divider.tsx","components/SideBar.tsx","components/Breadcrumb.tsx","components/ScreenLoader.tsx","components/AlertBox.tsx","components/DeleteButton.tsx","pages/Organization/index.tsx","pages/Dashboard/index.tsx","redux/actions/RoleActions.ts","pages/Role/index.tsx","redux/actions/DepartmentActions.ts","pages/Department/index.tsx","pages/Errors/PageNotFound.tsx","pages/User/index.tsx","pages/User/AddUser/AddUserForm.tsx","pages/User/AddUser/index.tsx","redux/actions/CustomerActions.ts","pages/Customer/index.tsx","pages/Customer/AddCustomer/AddCustomerForm.tsx","pages/Customer/AddCustomer/index.tsx","redux/actions/TestGroupsActions.ts","pages/TestGroup/index.tsx","pages/TestGroup/AddTestGroup/AddTestGroupForm.tsx","pages/TestGroup/AddTestGroup/index.tsx","redux/actions/ParameterActions.ts","pages/Parameter/index.tsx","pages/Parameter/AddParameter/AddParameterForm.tsx","pages/Parameter/AddParameter/index.tsx","redux/actions/SampleGroupsActions.ts","pages/TestMethod/index.tsx","pages/TestMethod/AddTestMethod/AddTestMethodForm.tsx","pages/TestMethod/AddTestMethod/index.tsx","redux/actions/SamplesDetailsActions.ts","pages/SampleDetails/index.tsx","pages/SampleDetails/AddSampleDetails/AddSampleDetailForm.tsx","pages/SampleDetails/AddSampleDetails/index.tsx","pages/Customer/CustomerDetails/Details.tsx","pages/Customer/CustomerDetails/Records.tsx","pages/Customer/CustomerDetails/index.tsx","pages/Samples/SampleCard.tsx","pages/Samples/SampleList.tsx","redux/actions/SamplesActions.ts","pages/Samples/index.tsx","pages/Samples/AddSample/SampleForm.tsx","pages/Samples/AddSample/BasicDetailsForm.tsx","pages/Samples/AddSample/TestDetailsForm.tsx","pages/Samples/AddSample/index.tsx","pages/Samples/Details/CustomerDetails.tsx","pages/Samples/Details/SampleDetails.tsx","pages/Samples/Details/TestDetails.tsx","pages/Samples/Details/ParametersDetails.tsx","PrintPages/Barcode.tsx","PrintPages/PageStyles.ts","pages/Samples/Details/index.tsx","PrintPages/JobAllotment.tsx","PrintPages/TestRequest.tsx","PrintPages/JobSheet.tsx","pages/Result/ReportDetail.tsx","pages/Result/SampleDetails.tsx","pages/Result/index.tsx","config/AuthenticatedRoute.tsx","pages/Login/index.tsx","pages/Signup/index.tsx","config/UnauthenticatedRoute.tsx","pages/Connection/index.tsx","config/Navigation.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/images/exactt_logo.png","assets/images/exactt_w.png","assets/images/image.png"],"names":["module","exports","Actions","ALERT_SHOW","ALERT_HIDE","GET_ROLE_ACCESS","UPDATE_ROLE","CREATE_ROLE","GET_ACCESS_ROLES_LIST","LOGIN","SIGNUP","LOGOUT","CREATE_USER","GET_PROFILE","GET_USER","GET_USERS","UPDATE_USER","DELETE_USERS","GET_DEPARTMENTS","CREATE_DEPARTMENT","UPDATE_DEPARTMENT","GET_STATUS","SET_ORGANIZATION","GET_ORGANIZATION","GET_CUSTOMERS","GET_CUSTOMER","CREATE_CUSTOMER","UPDATE_CUSTOMER","DELETE_CUSTOMER","SEARCH_CUSTOMERS","SET_DETAILS_CUSTOMER","GET_TEST_GROUPS","CREATE_TEST_GROUPS","GET_TEST_GROUP","UPDATE_TEST_GROUP","SEARCH_TEST_GROUP","DELETE_TEST_GROUP","GET_PARAMETERS","GET_PARAMETER","CREATE_PARAMETER","UPDATE_PARAMETER","SEARCH_PARAMETERS","DELETE_PATAMETER","GET_SAMPLE_GROUPS","CREATE_SAMPLE_GROUP","GET_SAMPLE_GROUP","UPDATE_SAMPLE_GROUP","SEARCH_SAMPLE_GROUP","DELETE_SAMPLE_GROUP","GET_SAMPLES_DETAILS","CREATE_SAMPLE_DETAILS","GET_SAMPLE_DETAILS","UPDATE_SAMPLE_DETAILS","SEARCH_SAMPLE_DETAILS","DELETE_SAMPLE_DETAILS","GET_SAMPLES","CREATE_SAMPLE","GET_SAMPLE","UPDATE_SAMPLE","SEARCH_SAMPLE","SAMPLE_ASSIGN","initialState","user","createUser","userData","users","status","details","access","updateRole","rolesList","visible","title","appearance","actions","body","departments","customer","customers","searchedCustomers","testGroups","testGroup","undefined","searchedTestGroups","parameters","parameter","searchedParameters","sampleGroups","sampleGroup","searchSampleGroup","samplesDetails","sampleDetails","searchedSamplesDetails","samples","sample","searchedSample","sampleAssign","rootReducer","combineReducers","state","action","type","ActionTypes","payload","filter","item","objectId","auth","orgnization","role","alertBox","department","map","persistConfig","key","storage","persistedReducer","persistReducer","reducer","middleware","thunk","Store","createStore","composeWithDevTools","applyMiddleware","Persistor","persistStore","getStatus","dispatch","a","Parse","Cloud","run","res","ActionsTypes","setTimeout","login","username","password","User","logIn","attributes","error","signup","data","formData","phone","name","email","getProfile","current","id","toJSON","logout","logOut","window","close","countryCode","value","roleId","departmentId","AlertBox","message","updateUser","console","log","getUser","userId","getUsers","deleteUser","setOrganization","getOrganization","Loading","exactt_logo","require","style","height","display","flexDirection","flex","background","colors","N10","alignItems","justifyContent","src","width","marginBottom","alt","size","position","bottom","color","N100","elevations","AkElevations","Box","styled","div","elevation","Heading","props","mixin","Divider","N40","styles","container","maxWidth","titleBar","N800A","N0","minWidth","menuBar","N20","titleDiv","paddingTop","paddingBottom","withRouter","connect","bindActionCreators","permission","useState","isLogout","setIsLogout","exacttLogo","fullPathName","location","pathname","pathName","split","menuItemCss","currentStyles","path","borderRadius","backgroundColor","N30","textDecoration","organizationsettingsAccess","read","write","samples_group","checkPermission","Button","label","primaryColor","onClick","history","push","isLoading","margin","overflow","typography","h400","marginTop","Avatar","marginLeft","h200","textTransform","fontWeight","href","cssFn","samples_id","samples_parameter","samples_method","samples_sample","Breadcrumb","Breadcrumbs","items","idx","BreadcrumbsItem","text","fontSize","screen","right","ScreenLoader","zIndex","padding","alignSelf","SectionMessage","DeleteButton","className","isDisabled","R400","marginRight","defaultState","StatesAndDistricts","states","find","defaultCity","districts","step","setStep","logo","setLogo","basicDetails","setBasicDetails","contactDetails","setContactDetails","renderImg","setRenderImg","cityOptions","setCityOptions","empty_image","statesOption","stepItems","percentageComplete","parseInt","h500","ProgressTracker","animated","spacing","textAlign","Form","onSubmit","formState","parseLogo","File","save","logoFile","formProps","submitting","Field","isRequired","fieldProps","Textfield","onDrop","acceptedFiles","imgreader","FileReader","readAsDataURL","getRootProps","getInputProps","borderColor","result","defaultValue","validate","selectedState","citys","setCityOption","Select","options","placeholder","length","maxLength","prefix","gst","line1","line2","city","zip","contact_peron","bank_name","acc_name","acc_number","acc_no","branch","ifsc","breadcrumbItems","sampleGroupPermission","Grid","layout","GridColumn","medium","url","getRoleAccessPermission","createRole","Error","getAccessRoleList","roleItems","rolePermission","loading","setLoading","roles","setRoles","fetch","useEffect","addRoleForm","iconBefore","Fragment","N60","Object","keys","Checkbox","defaultChecked","onChange","updateRoles","testId","getDepartments","createDepartment","updateDepartment","departmentPermission","rows","setRows","focus","createRows","cells","content","InlineEdit","hideActionButtons","editView","autoFocus","readView","onConfirm","createDepartmentForm","head","isSortable","shouldTruncate","rowsPerPage","defaultPage","isFixedSize","defaultSortKey","defaultSortOrder","onSort","onSetPage","PageNotFound","B300","userPermission","deleteUserData","setDeleteUserData","isDeleting","setisDeleting","handleDelete","ModalTransition","onClose","heading","AddUserForm","editUserPhoneCode","edit","editUser","PhoneCodeList","code","toString","onBack","match","departmentList","roleList","disabled","params","setDepartmentList","setRoleList","list","handleSubmit","goBack","getCustomers","searchCustomers","keyword","getCustomer","customerId","fromData","createCustomers","address","bank","bankname","contact","personName","updateCustomers","deleteCustomer","setDetailsCustomer","customerPermission","deleteCustomerData","setDeleteCustomerData","AddCustomerForm","phoneCode","phoneNo","phoneCodeOption","getTestGroups","searchTestGroups","createTestGroup","request","custom_field","getTestGroup","updateTestGroup","deleteTestGroup","deleteTestGroupData","setDeleteTestGroupData","editData","customeField","setCustomeField","customeFieldData","index","css","e","updateFieldList","target","updateCustomeField","shouldFitContainer","groupId","getParameters","pamameter","getParameter","createParameter","unit","method","updateParameter","searchParameters","deleteParameter","sampleParameterPermission","deleteParameterData","setDeleteParameterData","AddSampleGroup","parameterId","AddParameterForm","getSampleGroups","createSampleGroup","updateSampleGroup","getSampleGroup","updateRes","deleteSampleGroup","testMethodPermission","deleteSampleGroupData","setDeleteSampleGroupData","testMethod","Lozenge","AddTestMethod","onSearchParameter","dropdownOpen","setDropdownOpen","searchKeyword","setSearchKeyword","parameterOptions","setParameterOptions","selectedParameters","setSelectedParameters","parametersOption","nabl","condition_type","validation","requirement","isSearchable","isMulti","onInputChange","menuIsOpen","onMenuOpen","onBlur","updateSelectedParameters","isChecked","min","max","validResult","invalidResult","validOptions","invalidOptions","testMethodId","AddTestMethodForm","getSamplesDetails","searchSamplesDetails","createSampleDetails","genericName","updateSampleDetails","getSampleDetails","deleteSampleDetail","sampleDetailPermission","deleteSample","setDeleteSample","sampleDetail","onSearchSampleGorup","searchedSampleGroup","sampleGroupsOptions","setSampleGroupsOptions","optionLoading","setOptionLoading","selectedSampleGroups","setSelectedSampleGroups","search","values","sampleDetailId","kayword","AddSampleDetailForm","Details","N200","mainCard","card","N600","h300","records","reportId","Records","cursor","N300","paddingRight","parameterTag","SampleCard","sampleId","isBold","generic_name","moment","due_date","format","sampleResultParameters","navigationHistory","getSamples","createSample","getSample","hod","collection_by","test_group","assignSample","samplePermission","isCompact","SampleForm","onSearchSamplesDetails","userOptions","sampleDetailsSearchKeyword","setSampleDetailsSearchKeyword","sampleDetailsSearchLoading","setSampleDetailsSearchLoading","sampleDetailsOptions","setSampleDetailsOptions","sampleName","setSampleName","sampleDetailsSearch","setFieldValue","noValidate","CreatableSelect","validationState","replace","DatePicker","dateFormat","BasicDetailsForm","onSearchCustomers","onSearchTestGroups","customerSearchKeyword","setCustomerSearchKeyword","customerSearchLoading","setCustomerSearchLoading","customerOptions","setCustomerOptions","testGroupSearchKeyword","setTestGroupSearchKeyword","testGroupSearchLoading","setTestGroupSearchLoading","testGroupOptions","setTestGroupOptions","customerSearch","testGroupSearch","date","toDate","Date","isBefore","subtract","lab_due_date","TestDetailsForm","hodOptions","onSearchParameters","onSearchSampleGroup","isNewSample","parameterSearchKeyword","setParameterSearchKeyword","parameterSearchLoading","setParameterSearchLoading","sampleGroupSearchKeyword","setSampleGroupSearchKeyword","sampleGroupSearchLoading","setSampleGroupSearchLoading","sampleGroupOptions","setSampleGroupOptions","parameterSearchable","setParameterSearchable","includeAllParameters","setIncludeAllParameters","sampleGroupSearch","parameterSearch","selectedOptions","subHeading","setSampleDetails","setUserOptions","setHodOptions","hodUserOptions","usersOptions","testingData","labDueDate","dueDate","mfgDate","expDate","collectionDate","sampleCode","brandName","manufacture","marking","supplier","batchNo","batchSize","licNo","description","samplePacking","sampleQty","sampleCondition","servingSize","envCondition","conllectedBy","samplingMethod","instruction","noLink","__isNew__","CustomerDetails","SampleDetails","collection_date","sample_code","batch_size","sample_packing","serving_size","mfg_date","brand_name","drug_lic_no","sample_qty","env_condition","exp_date","batch_no","sample_condition","TestDetails","sampling_method","test_method_group","sampleResultParameter","ParameterDetails","assignedParameters","setAssignedParameters","isSubmitting","setIsSubmitting","handleAssignSubmit","assign_to","assign_date","paddingLeft","get","updateAssignedParameters","Barcode","inputRef","useBarcode","displayValue","textMargin","ref","JobAllotementRef","TestRequestRef","JobSheetRef","tableHeaderCol","borderLeftWidth","borderLeftColor","borderLeftStyle","tableCol","page","document","header","borderWidth","borderStyle","orgName","normalText","lineHeight","orgLogo","documentBody","borderTop","documentTitle","detialsListContainer","detialsListTitle","tableRow","borderBottomWidth","borderBottomStyle","borderBottomColor","tableHeaderLastCol","borderRightWidth","borderRightColor","borderRightStyle","tableLastCol","tableColCenterText","tableRowAllBorder","borderTopWidth","tableHeaderColNoBorder","tableColNoBorder","JobAllotment","this","PageStyles","Component","borderTopStyle","borderTopColor","organization","setusersOptions","sampleIdWithoutPrefix","PrinterIcon","handleAssignSample","handlePrint","el","ParametersDetails","resultsParameter","setResultsParameter","files","setFiles","useCallback","updateFiles","useDropzone","isDragActive","overflowX","overflowY","concat","option","event","resultInt","parseFloat","nagative","updateParameters","N10A","file","bytes","decimalPoint","dm","i","Math","floor","pow","toFixed","formatFileSize","handleDeleteFile","outline","N500","sampleResultPermission","samples_id_result","ReportDetail","orgnizationDetails","alert","api","exact","component","Dashboard","Organization","Customer","AddCustomer","Role","Department","AddUser","TestGroup","AddTestGroup","Parameter","AddParameter","TestMethod","AddSampleDetails","Sample","SampleInfoDetails","AddSample","SampleResult","setError","fontFamily","N900","getValues","Signup","Login","Connection","setLocalStorage","localStorage","setItem","organizationId","reload","getItem","softwareOnboarding","initialize","serverURL","App","store","persistor","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fa74cd82.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/printer.ce5d565f.svg\";","interface ActionsTypes {\n   ALERT_SHOW: string;\n   ALERT_HIDE: string;\n   GET_ROLE_ACCESS: string;\n   //ROLE\n   UPDATE_ROLE: string;\n   CREATE_ROLE: string;\n   GET_STATUS: string;\n   //ORGANIZATION\n   SET_ORGANIZATION: string;\n   GET_ORGANIZATION: string;\n   LOGIN: string;\n   SIGNUP: string;\n   LOGOUT: string;\n   //DEPARTMENT\n   GET_DEPARTMENTS: string;\n   CREATE_DEPARTMENT: string;\n   UPDATE_DEPARTMENT: string;\n   //USER\n   CREATE_USER: string;\n   GET_ACCESS_ROLES_LIST: string;\n   GET_PROFILE: string;\n   GET_USER: string;\n   GET_USERS: string;\n   UPDATE_USER: string;\n   DELETE_USERS: string;\n   //CUSTOMER\n   GET_CUSTOMERS: string;\n   GET_CUSTOMER: string;\n   CREATE_CUSTOMER: string;\n   UPDATE_CUSTOMER: string;\n   DELETE_CUSTOMER: string;\n   SET_DETAILS_CUSTOMER: string;\n   GET_TEST_GROUPS: string;\n   CREATE_TEST_GROUPS: string;\n   GET_TEST_GROUP: string;\n   UPDATE_TEST_GROUP: string;\n   GET_PARAMETERS: string;\n   CREATE_PARAMETER: string;\n   GET_PARAMETER: string;\n   UPDATE_PARAMETER: string;\n   GET_SAMPLE_GROUPS: string;\n   SEARCH_PARAMETERS: string;\n   DELETE_PATAMETER: string;\n   CREATE_SAMPLE_GROUP: string;\n   GET_SAMPLE_GROUP: string;\n   UPDATE_SAMPLE_GROUP: string;\n   GET_SAMPLES_DETAILS: string;\n   CREATE_SAMPLE_DETAILS: string;\n   GET_SAMPLE_DETAILS: string;\n   UPDATE_SAMPLE_DETAILS: string;\n   SEARCH_SAMPLE_GROUP: string;\n   DELETE_SAMPLE_GROUP: string;\n   SEARCH_CUSTOMERS: string;\n   SEARCH_SAMPLE_DETAILS: string;\n   DELETE_SAMPLE_DETAILS: string;\n   SEARCH_TEST_GROUP: string;\n   DELETE_TEST_GROUP: string;\n   GET_SAMPLES: string;\n   CREATE_SAMPLE: string;\n   GET_SAMPLE: string;\n   UPDATE_SAMPLE: string;\n   SEARCH_SAMPLE: string;\n   SAMPLE_ASSIGN: string;\n}\n\nconst Actions: ActionsTypes = {\n   //Alert Box Actions\n   ALERT_SHOW: \"SHOW\",\n   ALERT_HIDE: \"HIDE\",\n\n   //Roles Actions\n   GET_ROLE_ACCESS: \"GET_ROLE_ACCESS\",\n   UPDATE_ROLE: \"UPDATE_ROLE\",\n   CREATE_ROLE: \"CREATE_ROLE\",\n   GET_ACCESS_ROLES_LIST: \"GET_ACCESS_ROLES_LIST\",\n\n   //User Actions\n   LOGIN: \"LOGIN\",\n   SIGNUP: \"SIGNUP\",\n   LOGOUT: \"LOGOUT\",\n   CREATE_USER: \"CREATE_USER\",\n   GET_PROFILE: \"GET_PROFILE\",\n   GET_USER: \"GET_USER\",\n   GET_USERS: \"GET_USERS\",\n   UPDATE_USER: \"UPDATE_USER\",\n   DELETE_USERS: \"DELETE_USERS\",\n\n   //Department Actions\n   GET_DEPARTMENTS: \"GET_DEPARTMENTS\",\n   CREATE_DEPARTMENT: \"CREATE_DEPARTMENT\",\n   UPDATE_DEPARTMENT: \"UPDATE_DEPARTMENT\",\n\n   //Auth Actions\n   GET_STATUS: \"GET_STATUS\",\n\n   //Organization Actions\n   SET_ORGANIZATION: \"SET_ORGANIZATION\",\n   GET_ORGANIZATION: \"GET_ORGANIZATION\",\n\n   //Customer Actions\n   GET_CUSTOMERS: \"GET_CUSTOMERS\",\n   GET_CUSTOMER: \"GET_CUSTOMER\",\n   CREATE_CUSTOMER: \"CREATE_CUSTOMER\",\n   UPDATE_CUSTOMER: \"UPDATE_CUSTOMER\",\n   DELETE_CUSTOMER: \"DELETE_CUSTOMER\",\n   SEARCH_CUSTOMERS: \"SEARCH_CUSTOMERS\",\n   SET_DETAILS_CUSTOMER: \"SET_DETAILS_CUSTOMER\",\n\n   //Test Groups Actions\n   GET_TEST_GROUPS: \"GET_TEST_GROUPS\",\n   CREATE_TEST_GROUPS: \"CREATE_TEST_GROUPS\",\n   GET_TEST_GROUP: \"GET_TEST_GROUP\",\n   UPDATE_TEST_GROUP: \"UPDATE_TEST_GROUP\",\n   SEARCH_TEST_GROUP: \"SEARCH_TEST_GROUP\",\n   DELETE_TEST_GROUP: \"DELETE_TEST_GROUP\",\n\n   //Parameter Actions\n   GET_PARAMETERS: \"GET_PARAMETERS\",\n   GET_PARAMETER: \"GET_PARAMETER\",\n   CREATE_PARAMETER: \"CREATE_PARAMETER\",\n   UPDATE_PARAMETER: \"UPDATE_PARAMETER\",\n   SEARCH_PARAMETERS: \"SEARCH_PARAMETERS\",\n   DELETE_PATAMETER: \"DELETE_PATAMETER\",\n\n   //Sample Group Actions\n   GET_SAMPLE_GROUPS: \"GET_SAMPLE_GROUPS\",\n   CREATE_SAMPLE_GROUP: \"CREATE_SAMPLE_GROUP\",\n   GET_SAMPLE_GROUP: \"GET_SAMPLE_GROUP\",\n   UPDATE_SAMPLE_GROUP: \"UPDATE_SAMPLE_GROUP\",\n   SEARCH_SAMPLE_GROUP: \"SEARCH_SAMPLE_GROUP\",\n   DELETE_SAMPLE_GROUP: \"DELETE_SAMPLE_GROUP\",\n\n   //Sample Deatils Actions\n   GET_SAMPLES_DETAILS: \"GET_SAMPLES_DETAILS\",\n   CREATE_SAMPLE_DETAILS: \"CREATE_SAMPLE_DETAILS\",\n   GET_SAMPLE_DETAILS: \"GET_SAMPLE_DETAILS\",\n   UPDATE_SAMPLE_DETAILS: \"UPDATE_SAMPLE_DETAILS\",\n   SEARCH_SAMPLE_DETAILS: \"SEARCH_SAMPLE_DETAILS\",\n   DELETE_SAMPLE_DETAILS: \"DELETE_SAMPLE_DETAILS\",\n\n   //Sample  Actions\n   GET_SAMPLES: \"GET_SAMPLES\",\n   CREATE_SAMPLE: \"CREATE_SAMPLE\",\n   GET_SAMPLE: \"GET_SAMPLE\",\n   UPDATE_SAMPLE: \"UPDATE_SAMPLE\",\n   SEARCH_SAMPLE: \"SEARCH_SAMPLE\",\n   SAMPLE_ASSIGN: \"SAMPLE_ASSIGN\",\n};\n\nexport default Actions;\n","import { UserState } from \"../types/UserTypes\";\nimport { ActionInterface } from \"../types/ActionDispatch\";\nimport ActionTypes from \"../actions\";\n\nconst initialState: UserState = {\n   user: null,\n   createUser: null,\n   userData: null,\n   users: null,\n};\n\nexport default (state: UserState = initialState, action: ActionInterface): UserState => {\n   switch (action.type) {\n      case ActionTypes.LOGIN:\n         return {\n            ...state,\n            user: action.payload,\n         };\n\n      case ActionTypes.SIGNUP:\n         return {\n            ...state,\n            user: action.payload,\n         };\n\n      case ActionTypes.LOGOUT:\n         return {\n            ...state,\n            user: action.payload,\n         };\n\n      case ActionTypes.CREATE_USER:\n         return {\n            ...state,\n            createUser: action.payload,\n         };\n\n      case ActionTypes.GET_PROFILE:\n         return {\n            ...state,\n            user: action.payload,\n         };\n\n      case ActionTypes.GET_USER:\n         return {\n            ...state,\n            userData: action.payload,\n         };\n\n      case ActionTypes.GET_USERS:\n         return {\n            ...state,\n            users: action.payload,\n         };\n\n      case ActionTypes.UPDATE_USER:\n         return {\n            ...state,\n            userData: action.payload,\n         };\n\n      case ActionTypes.DELETE_USERS:\n         return {\n            ...state,\n            users: state.users.filter((item: any) => item.objectId !== action.payload.objectId),\n         };\n\n      default:\n         return state;\n   }\n};\n","import { AuthState } from \"../types/AuthTypes\";\nimport { ActionInterface } from \"../types/ActionDispatch\";\nimport ActionTypes from \"../actions\";\n\nconst initialState: AuthState = {\n   status: 0,\n};\n\nexport default (state: AuthState = initialState, action: ActionInterface): AuthState => {\n   switch (action.type) {\n      case ActionTypes.GET_STATUS:\n         return {\n            ...state,\n            status: action.payload,\n         };\n      default:\n         return state;\n   }\n};\n","import { OrganizationState } from \"../types/OrganizationTypes\";\nimport { ActionInterface } from \"../types/ActionDispatch\";\nimport ActionTypes from \"../actions\";\n\nconst initialState: OrganizationState = {\n   details: {},\n};\n\nexport default (state: OrganizationState = initialState, action: ActionInterface): OrganizationState => {\n   switch (action.type) {\n      case ActionTypes.SET_ORGANIZATION:\n         return {\n            ...state,\n            details: action.payload,\n         };\n\n      case ActionTypes.GET_ORGANIZATION:\n         return {\n            ...state,\n            details: action.payload,\n         };\n\n      default:\n         return state;\n   }\n};\n","import { RoleState } from \"../types/RoleTypes\";\nimport { ActionInterface } from \"../types/ActionDispatch\";\nimport ActionTypes from \"../actions\";\n\nconst initialState: RoleState = {\n   access: {},\n   updateRole: {},\n   rolesList: [],\n};\n\nexport default (state: RoleState = initialState, action: ActionInterface): RoleState => {\n   switch (action.type) {\n      case ActionTypes.GET_ROLE_ACCESS:\n         return {\n            ...state,\n            access: action.payload,\n         };\n\n      case ActionTypes.UPDATE_ROLE:\n         return {\n            ...state,\n            updateRole: action.payload,\n         };\n\n      case ActionTypes.CREATE_ROLE:\n         return {\n            ...state,\n            access: { ...state.access, ...action.payload },\n         };\n\n      case ActionTypes.GET_ACCESS_ROLES_LIST:\n         return {\n            ...state,\n            rolesList: action.payload,\n         };\n\n      default:\n         return state;\n   }\n};\n","import { AlertBoxState } from \"../types/AlertBoxTypes\";\nimport { ActionInterface } from \"../types/ActionDispatch\";\nimport ActionTypes from \"../actions\";\n\nconst initialState: AlertBoxState = {\n   visible: false,\n   title: \"\",\n   appearance: \"info\",\n   actions: \"\",\n   body: \"\",\n};\n\nexport default (state: AlertBoxState = initialState, action: ActionInterface): AlertBoxState => {\n   switch (action.type) {\n      case ActionTypes.ALERT_SHOW:\n         return {\n            ...state,\n            visible: true,\n            title: action.payload.title ? action.payload.title : \"\",\n            appearance: action.payload.appearance,\n            body: action.payload.body,\n         };\n      case ActionTypes.ALERT_HIDE:\n         return {\n            ...state,\n            visible: false,\n            title: \"\",\n            appearance: \"info\",\n            actions: \"\",\n            body: \"\",\n         };\n      default:\n         return state;\n   }\n};\n","import { DepartmentState } from \"../types/DepartmentTypes\";\nimport { ActionInterface } from \"../types/ActionDispatch\";\nimport ActionTypes from \"../actions\";\n\nconst initialState: DepartmentState = {\n   departments: [],\n};\n\nexport default (state: DepartmentState = initialState, action: ActionInterface): DepartmentState => {\n   switch (action.type) {\n      case ActionTypes.GET_DEPARTMENTS:\n         return {\n            ...state,\n            departments: action.payload,\n         };\n\n      case ActionTypes.CREATE_DEPARTMENT:\n         return {\n            ...state,\n            departments: [...state.departments, action.payload],\n         };\n\n      case ActionTypes.UPDATE_DEPARTMENT:\n         return {\n            ...state,\n            departments: state.departments.map((item) => (item.objectId === action.payload.objectId ? action.payload : item)),\n         };\n\n      default:\n         return state;\n   }\n};\n","import { CustomerState } from \"../types/CustomerTypes\";\nimport { ActionInterface } from \"../types/ActionDispatch\";\nimport ActionTypes from \"../actions\";\n\nconst initialState: CustomerState = {\n   customer: {},\n   customers: [],\n   searchedCustomers: [],\n};\n\nexport default (state: CustomerState = initialState, action: ActionInterface): CustomerState => {\n   switch (action.type) {\n      case ActionTypes.GET_CUSTOMERS:\n         return {\n            ...state,\n            customers: action.payload,\n         };\n\n      case ActionTypes.CREATE_CUSTOMER:\n         return {\n            ...state,\n            customer: action.payload,\n         };\n\n      case ActionTypes.GET_CUSTOMER:\n         return {\n            ...state,\n            customer: action.payload,\n         };\n\n      case ActionTypes.UPDATE_CUSTOMER:\n         return {\n            ...state,\n            customer: action.payload,\n         };\n      case ActionTypes.DELETE_CUSTOMER:\n         return {\n            ...state,\n            customers: state.customers.filter(item => item.objectId !== action.payload.objectId),\n         };\n\n      case ActionTypes.SET_DETAILS_CUSTOMER:\n         return {\n            ...state,\n            customer: action.payload,\n         };\n\n      case ActionTypes.SEARCH_CUSTOMERS:\n         return {\n            ...state,\n            searchedCustomers: action.payload,\n         };\n\n      default:\n         return state;\n   }\n};\n","import { TestGroupState } from \"../types/TestGroupsTypes\";\nimport { ActionInterface } from \"../types/ActionDispatch\";\nimport ActionTypes from \"../actions\";\n\nconst initialState: TestGroupState = {\n   testGroups: [],\n   testGroup: undefined,\n   searchedTestGroups: [],\n};\n\nexport default (state: TestGroupState = initialState, action: ActionInterface): TestGroupState => {\n   switch (action.type) {\n      case ActionTypes.GET_TEST_GROUPS:\n         return {\n            ...state,\n            testGroups: action.payload,\n         };\n\n      case ActionTypes.CREATE_TEST_GROUPS:\n         return {\n            ...state,\n            testGroup: action.payload,\n         };\n\n      case ActionTypes.GET_TEST_GROUP:\n         return {\n            ...state,\n            testGroup: action.payload,\n         };\n\n      case ActionTypes.UPDATE_TEST_GROUP:\n         return {\n            ...state,\n            testGroup: action.payload,\n         };\n\n      case ActionTypes.SEARCH_TEST_GROUP:\n         return {\n            ...state,\n            searchedTestGroups: action.payload,\n         };\n\n      case ActionTypes.DELETE_TEST_GROUP:\n         return {\n            ...state,\n            testGroups: state.testGroups.filter((item: any) => item.objectId !== action.payload.objectId),\n         };\n\n      default:\n         return state;\n   }\n};\n","import { ParameterState } from \"../types/ParameterTypes\";\nimport { ActionInterface } from \"../types/ActionDispatch\";\nimport ActionTypes from \"../actions\";\n\nconst initialState: ParameterState = {\n   parameters: [],\n   parameter: undefined,\n   searchedParameters: [],\n};\n\nexport default (state: ParameterState = initialState, action: ActionInterface): ParameterState => {\n   switch (action.type) {\n      case ActionTypes.GET_PARAMETERS:\n         return {\n            ...state,\n            parameters: action.payload,\n         };\n\n      case ActionTypes.CREATE_PARAMETER:\n         return {\n            ...state,\n            parameter: action.payload,\n         };\n\n      case ActionTypes.UPDATE_PARAMETER:\n         return {\n            ...state,\n            parameter: action.payload,\n         };\n\n      case ActionTypes.GET_PARAMETER:\n         return {\n            ...state,\n            parameter: action.payload,\n         };\n\n      case ActionTypes.SEARCH_PARAMETERS:\n         return {\n            ...state,\n            searchedParameters: action.payload,\n         };\n      case ActionTypes.DELETE_PATAMETER:\n         return {\n            ...state,\n            parameters: state.parameters.filter((item: any) => item.objectId !== action.payload.objectId),\n         };\n\n      default:\n         return state;\n   }\n};\n","import { SampleGroupState } from \"../types/SampleGroupTypes\";\nimport { ActionInterface } from \"../types/ActionDispatch\";\nimport ActionTypes from \"../actions\";\n\nconst initialState: SampleGroupState = {\n   sampleGroups: [],\n   sampleGroup: undefined,\n   searchSampleGroup: [],\n};\n\nexport default (state: SampleGroupState = initialState, action: ActionInterface): SampleGroupState => {\n   switch (action.type) {\n      case ActionTypes.GET_SAMPLE_GROUPS:\n         return {\n            ...state,\n            sampleGroups: action.payload,\n         };\n\n      case ActionTypes.CREATE_SAMPLE_GROUP:\n         return {\n            ...state,\n            sampleGroup: action.payload,\n         };\n\n      case ActionTypes.GET_SAMPLE_GROUP:\n         return {\n            ...state,\n            sampleGroup: action.payload,\n         };\n\n      case ActionTypes.UPDATE_SAMPLE_GROUP:\n         return {\n            ...state,\n            sampleGroup: action.payload,\n         };\n\n      case ActionTypes.SEARCH_SAMPLE_GROUP:\n         return {\n            ...state,\n            searchSampleGroup: action.payload,\n         };\n      case ActionTypes.DELETE_SAMPLE_GROUP:\n         return {\n            ...state,\n            sampleGroups: state.sampleGroups.filter((item: any) => item.objectId !== action.payload.objectId),\n         };\n\n      default:\n         return state;\n   }\n};\n","import { SampleDetailsState } from \"../types/SampleDetailsTypes\";\nimport { ActionInterface } from \"../types/ActionDispatch\";\nimport ActionTypes from \"../actions\";\n\nconst initialState: SampleDetailsState = {\n   samplesDetails: [],\n   sampleDetails: undefined,\n   searchedSamplesDetails: [],\n};\n\nexport default (state: SampleDetailsState = initialState, action: ActionInterface): SampleDetailsState => {\n   switch (action.type) {\n      case ActionTypes.GET_SAMPLES_DETAILS:\n         return {\n            ...state,\n            samplesDetails: action.payload,\n         };\n\n      case ActionTypes.CREATE_SAMPLE_DETAILS:\n         return {\n            ...state,\n            sampleDetails: action.payload,\n         };\n\n      case ActionTypes.GET_SAMPLE_DETAILS:\n         return {\n            ...state,\n            sampleDetails: action.payload,\n         };\n\n      case ActionTypes.UPDATE_SAMPLE_DETAILS:\n         return {\n            ...state,\n            sampleDetails: action.payload,\n         };\n\n      case ActionTypes.SEARCH_SAMPLE_DETAILS:\n         return {\n            ...state,\n            searchedSamplesDetails: action.payload,\n         };\n\n      case ActionTypes.DELETE_SAMPLE_DETAILS:\n         return {\n            ...state,\n            samplesDetails: state.samplesDetails.filter((item: any) => item.objectId !== action.payload.objectId),\n         };\n\n      default:\n         return state;\n   }\n};\n","import { SampleState } from \"../types/SampleTypes\";\nimport { ActionInterface } from \"../types/ActionDispatch\";\nimport ActionTypes from \"../actions\";\n\nconst initialState: SampleState = {\n   samples: [],\n   sample: undefined,\n   searchedSample: [],\n   sampleAssign: [],\n};\n\nexport default (state: SampleState = initialState, action: ActionInterface): SampleState => {\n   switch (action.type) {\n      case ActionTypes.GET_SAMPLES:\n         return {\n            ...state,\n            samples: action.payload,\n         };\n\n      case ActionTypes.GET_SAMPLE:\n         return {\n            ...state,\n            sample: action.payload,\n         };\n\n      case ActionTypes.CREATE_SAMPLE:\n         return {\n            ...state,\n            sample: action.payload,\n         };\n\n      case ActionTypes.SAMPLE_ASSIGN:\n         return {\n            ...state,\n            sampleAssign: action.payload,\n         };\n\n      default:\n         return state;\n   }\n};\n","import { combineReducers } from \"redux\";\nimport UserReducer from \"./UserReducer\";\nimport AuthReducer from \"./AuthReducer\";\nimport OrgnizationReducer from \"./OrganizationReducer\";\nimport RoleReducer from \"./RoleReducer\";\nimport AlertBoxReducer from \"./AlertBoxReducer\";\nimport DepartmentReducer from \"./DepartmentReducer\";\nimport CustomerReducer from \"./CustomerReducer\";\nimport TestGroupsReducer from \"./TestGroupsReducer\";\nimport ParameterReducer from \"./ParameterReducer\";\nimport SampleGroupsReducer from \"./SampleGroupsReducer\";\nimport SamplesDeatilsReducer from \"./SamplesDeatilsReducer\";\nimport SamplesReducer from \"./SamplesReducer\";\nimport AppState from \"../types\";\n\nconst rootReducer = combineReducers<AppState>({\n   user: UserReducer,\n   auth: AuthReducer,\n   orgnization: OrgnizationReducer,\n   role: RoleReducer,\n   alertBox: AlertBoxReducer,\n   department: DepartmentReducer,\n   customer: CustomerReducer,\n   testGroup: TestGroupsReducer,\n   parameter: ParameterReducer,\n   sampleGroup: SampleGroupsReducer,\n   samplesDetails: SamplesDeatilsReducer,\n   samples: SamplesReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducer from \"./reducers\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { WebStorage } from \"redux-persist/es/types\";\nimport { createLogger } from \"redux-logger\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst persistConfig: { key: string; storage: WebStorage } = {\n   key: \"root\",\n   storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nconst middleware: any = [thunk];\n\nif (process.env.NODE_ENV !== \"production\") {\n   middleware.push(createLogger({ collapsed: true }));\n}\n\nlet Store = createStore(persistedReducer, composeWithDevTools(applyMiddleware(...middleware)));\nlet Persistor = persistStore(Store);\n\nexport { Store, Persistor };\n","import { DispatchType } from \"../types/ActionDispatch\";\nimport ActionsTypes from \".\";\n\nimport Parse from \"parse\";\n\nexport function getStatus() {\n   return async (dispatch: DispatchType): Promise<number> => {\n      try {\n         let res = await Parse.Cloud.run(\"getOrganizationStatus\");\n         dispatch({\n            type: ActionsTypes.GET_STATUS,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n","import ActionsTypes from \".\";\n\nexport default function (dispatch: any, appearance: \"info\" | \"warning\" | \"error\" | \"confirmation\" | \"change\" | undefined, body: string) {\n   dispatch({\n      type: ActionsTypes.ALERT_SHOW,\n      payload: {\n         appearance: appearance,\n         body: body,\n      },\n   });\n   setTimeout(() => {\n      dispatch({\n         type: ActionsTypes.ALERT_HIDE,\n         payload: {},\n      });\n   }, 3000);\n}\n","import { DispatchType } from \"../types/ActionDispatch\";\nimport ActionsTypes from \".\";\nimport Parse from \"parse\";\nimport AlertBox from \"./Alert\";\n\ninterface Signup {\n   username: string;\n   name: string;\n   phone: string;\n   email: string;\n   password: string;\n}\n\nexport function login(username: string, password: string) {\n   return async (dispatch: DispatchType): Promise<object> => {\n      try {\n         let user = await Parse.User.logIn(username, password);\n         dispatch({\n            type: ActionsTypes.LOGIN,\n            payload: user.attributes,\n         });\n         return user;\n      } catch (error) {\n         return { error };\n      }\n   };\n}\n\nexport function signup(data: Signup) {\n   return async (dispatch: DispatchType): Promise<void> => {\n      try {\n         let formData = {\n            username: data.username,\n            password: data.password,\n            phone: data.phone,\n            name: data.name,\n            email: data.email,\n         };\n         let res = await Parse.Cloud.run(\"createAdminUser\", formData);\n         dispatch({\n            type: ActionsTypes.SIGNUP,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         throw error;\n      }\n   };\n}\n\nexport function getProfile() {\n   return async (dispatch: DispatchType): Promise<void> => {\n      let user: any = Parse.User.current();\n\n      try {\n         let formData = {\n            objectId: user.id,\n         };\n         let res = await Parse.Cloud.run(\"getUser\", formData);\n         dispatch({\n            type: ActionsTypes.GET_PROFILE,\n            payload: {\n               ...res,\n               role: res?.role?.toJSON(),\n               department: res.department ? res?.department?.toJSON() : { name: \"Admin\", objectId: \"\" },\n            },\n         });\n         return res;\n      } catch (error) {\n         throw error;\n      }\n   };\n}\n\nexport function logout() {\n   return async (dispatch: DispatchType): Promise<void> => {\n      try {\n         await Parse.User.logOut();\n         await dispatch({\n            type: ActionsTypes.LOGOUT,\n            payload: null,\n         });\n         await window.close();\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function createUser(data: any) {\n   return async (dispatch: DispatchType): Promise<void> => {\n      try {\n         let formData = {\n            username: data.username,\n            name: data.name,\n            email: data.email,\n            phone: \"+\" + data.countryCode.value + \"-\" + data.phone,\n            roleId: data.role.value,\n            departmentId: data.department.value,\n         };\n         let res = await Parse.Cloud.run(\"createUser\", formData);\n         dispatch({\n            type: ActionsTypes.CREATE_USER,\n            payload: res,\n         });\n         AlertBox(dispatch, \"confirmation\", \"User created successfully. Password will be mailed to users email address.\");\n         return res;\n      } catch (error) {\n         AlertBox(dispatch, \"error\", error.message);\n         throw error;\n      }\n   };\n}\n\nexport function updateUser(data: any) {\n   return async (dispatch: DispatchType): Promise<void> => {\n      try {\n         let formData = {\n            objectId: data.objectId,\n            username: data.username,\n            name: data.name,\n            email: data.email,\n            phone: \"+\" + data.countryCode.value + \"-\" + data.phone,\n            roleId: data.role.value,\n            departmentId: data.department.value,\n         };\n         let res = await Parse.Cloud.run(\"updateUser\", formData);\n         console.log(res);\n         dispatch({\n            type: ActionsTypes.UPDATE_USER,\n            payload: {\n               ...res,\n               role: res?.role?.toJSON(),\n               department: res.department ? res?.department?.toJSON() : { name: \"Admin\", objectId: \"\" },\n            },\n         });\n         AlertBox(dispatch, \"confirmation\", \"User update successfully.\");\n         return res;\n      } catch (error) {\n         AlertBox(dispatch, \"error\", error.message);\n         throw error;\n      }\n   };\n}\n\nexport function getUser(userId: string) {\n   return async (dispatch: DispatchType): Promise<void> => {\n      try {\n         let formData = {\n            objectId: userId,\n         };\n         let res = await Parse.Cloud.run(\"getUser\", formData);\n         dispatch({\n            type: ActionsTypes.GET_USER,\n            payload: {\n               ...res,\n               role: res?.role?.toJSON(),\n               department: res.department ? res?.department?.toJSON() : { name: \"Admin\", objectId: \"\" },\n            },\n         });\n         return res;\n      } catch (error) {\n         throw error;\n      }\n   };\n}\n\nexport function getUsers() {\n   return async (dispatch: DispatchType): Promise<void> => {\n      try {\n         let res = await Parse.Cloud.run(\"getUsers\");\n         let users = await res.map((user: any) => ({\n            ...user,\n            role: user.role.toJSON(),\n            department: user.department ? user?.department?.toJSON() : { name: \"Admin\", objectId: \"\" },\n         }));\n         dispatch({\n            type: ActionsTypes.GET_USERS,\n            payload: users,\n         });\n         return res;\n      } catch (error) {\n         throw error;\n      }\n   };\n}\n\nexport function deleteUser(userId: string) {\n   return async (dispatch: DispatchType): Promise<void> => {\n      try {\n         let formData = {\n            objectId: userId,\n         };\n         let res = await Parse.Cloud.run(\"deleteUser\", formData);\n         dispatch({\n            type: ActionsTypes.DELETE_USERS,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         throw error;\n      }\n   };\n}\n","import { DispatchType } from \"../types/ActionDispatch\";\nimport ActionsTypes from \".\";\nimport Parse from \"parse\";\n\ninterface SetOrganization {\n   acc_name: string;\n   acc_no: string;\n   bank_name: string;\n   branch: string;\n   city: any;\n   contact_peron: string;\n   email: string;\n   gst: string;\n   ifsc: string;\n   line1: string;\n   line2: string;\n   logo: any;\n   name: string;\n   phone: string;\n   prefix: string;\n   state: any;\n   zip: string;\n}\n\nexport function setOrganization(data: any) {\n   return async (dispatch: DispatchType): Promise<any> => {\n      console.log(data);\n\n      try {\n         let res = await Parse.Cloud.run(\"setOrganization\", data);\n         dispatch({\n            type: ActionsTypes.SET_ORGANIZATION,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function getOrganization() {\n   return async (dispatch: DispatchType): Promise<any> => {\n      try {\n         let res = await Parse.Cloud.run(\"getOrganization\");\n         dispatch({\n            type: ActionsTypes.GET_ORGANIZATION,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport { colors } from \"@atlaskit/theme\";\nimport Spinner from \"@atlaskit/spinner\";\n\n// ====================================== Component Render ======================================\nconst Loading = () => {\n   const exactt_logo = require(\"../../assets/images/exactt_logo.png\");\n   return (\n      <div\n         style={{\n            height: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            flex: 1,\n            background: colors.N10,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n         }}\n      >\n         <img src={exactt_logo} style={{ width: 180, marginBottom: 30 }} alt=\"exactt-logo\" />\n         <Spinner size=\"medium\" />\n         <div style={{ position: \"absolute\", bottom: 50, color: colors.N100 }}>Exactt Laboratory Information Management Software</div>\n      </div>\n   );\n};\n\nexport default Loading;\n","import styled from \"styled-components\";\nimport { elevation as AkElevations } from \"@atlaskit/theme\";\nimport { Elevation } from \"@atlaskit/theme/types\";\n\nconst elevations = { ...AkElevations };\n\nconst Box = styled.div<{ elevation: Elevation }>`\n   ${({ elevation }) => elevations[elevation]}\n   background-color: #ffffff;\n   border-radius: 3px;\n   min-width: 300px;\n   padding: 16px 15px;\n   text-align: center;\n`;\n\nexport default Box;\n","import styled from \"styled-components\";\n\nconst Heading = styled.div<{ mixin: any }>`\n   ${(props) => props.mixin};\n`;\n\nexport default Heading;\n","import styled from \"styled-components\";\nimport { colors } from \"@atlaskit/theme\";\n\nconst Divider = styled.div`\n   background-color: ${colors.N40};\n   height: 1px;\n   width: 100%;\n   content: \" \";\n   margin-top: 10px;\n   margin-bottom: 10px;\n`;\n\nexport default Divider;\n","// ====================================== Module imports ======================================\nimport React, { useState } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\nimport { colors, typography } from \"@atlaskit/theme\";\nimport SettingsIcon from \"@atlaskit/icon/glyph/settings\";\nimport SignOutIcon from \"@atlaskit/icon/glyph/sign-out\";\nimport Button from \"@atlaskit/button\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport Avatar from \"@atlaskit/avatar\";\nimport { MenuGroup, Section, LinkItem } from \"@atlaskit/menu\";\n\n// ====================================== File imports ========================================\nimport { logout } from \"../redux/actions/UserActions\";\nimport AppState from \"../redux/types\";\nimport { UserState } from \"../redux/types/UserTypes\";\nimport { OrganizationState } from \"../redux/types/OrganizationTypes\";\nimport { Divider, Heading } from \"./\";\n\n// ========================================= Interface ========================================\ninterface Props extends RouteComponentProps, UserState, OrganizationState {\n   logout: () => any;\n}\n\nconst styles: {\n   container: object;\n   titleBar: object;\n   menuBar: object;\n   titleDiv: object;\n} = {\n   container: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      flex: 1,\n      height: \"100%\",\n      maxWidth: 290,\n   },\n   titleBar: {\n      background: colors.N800A,\n      color: colors.N0,\n      maxWidth: 55,\n      minWidth: 55,\n      height: \"100%\",\n      display: \"flex\",\n   },\n   menuBar: {\n      background: colors.N20,\n      display: \"flex\",\n      flexDirection: \"column\",\n      flex: 1,\n      height: \"100%\",\n   },\n   titleDiv: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"space-between\",\n      paddingTop: 20,\n      paddingBottom: 20,\n      alignItems: \"center\",\n   },\n};\n\nconst SideBar = (props: Props) => {\n   const { permission } = props.user.role;\n   const [isLogout, setIsLogout] = useState<boolean>(false);\n   const exacttLogo = require(\"../assets/images/exactt_w.png\");\n\n   const fullPathName = props.location?.pathname;\n\n   const pathName = fullPathName?.split(\"/\")[1] === \"organizationsettings\" ? fullPathName?.split(\"/\")[2] : fullPathName?.split(\"/\")[1];\n\n   const menuItemCss = (currentStyles: any, path: any) => {\n      return {\n         ...currentStyles,\n         borderRadius: 3,\n         ...(path === pathName && { backgroundColor: colors.N40 }),\n         \"&:hover\": {\n            backgroundColor: colors.N30,\n            textDecoration: \"none\",\n         },\n      };\n   };\n\n   const organizationsettingsAccess: any =\n      permission?.user?.read ||\n      permission?.user?.write ||\n      permission?.department?.read ||\n      permission?.department?.write ||\n      permission?.role?.read ||\n      permission?.role?.write ||\n      permission?.samples_group?.read ||\n      permission?.samples_group?.write;\n\n   interface Permission {\n      read: boolean;\n      write: boolean;\n   }\n\n   const checkPermission = (permission: Permission): boolean => {\n      return permission.read || permission.write;\n   };\n\n   return (\n      <div style={styles.container}>\n         <div style={{ ...styles.titleBar, justifyContent: \"center\" }}>\n            <div style={styles.titleDiv}>\n               <div>\n                  <img src={exacttLogo} style={{ width: 30 }} alt=\"exactt_logo\" />\n               </div>\n               <div>\n                  <Button style={{ color: colors.N0 }} appearance=\"link\">\n                     <SettingsIcon label=\"Setting\" primaryColor={colors.N0} />\n                  </Button>\n                  <Button\n                     style={{ color: colors.N0 }}\n                     appearance=\"link\"\n                     onClick={async () => {\n                        setIsLogout(true);\n                        await props.logout();\n                        props.history.push(\"/\");\n                     }}\n                     isLoading={isLogout}\n                  >\n                     <SignOutIcon label=\"New\" primaryColor={colors.N0} />\n                  </Button>\n               </div>\n            </div>\n         </div>\n         <div style={styles.menuBar}>\n            <div style={{ margin: 10, overflow: \"scroll\" }}>\n               <Heading mixin={typography.h400} style={{ marginTop: 8 }}>\n                  {props.details.name}\n               </Heading>\n               <Divider />\n               <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                  <Avatar\n                     size=\"large\"\n                     appearance=\"square\"\n                     src={`https://ui-avatars.com/api/?bold=true&background=0052cc&color=fff&name=${props.user.name.split(\" \")[0]}${\n                        props.user.name.split(\" \")[1] ? \"+\" + props.user.name.split(\" \")[1] : \"\"\n                     }`}\n                  />\n                  <div style={{ marginLeft: 5, display: \"flex\", flexDirection: \"column\", justifyContent: \"center\" }}>\n                     <Heading mixin={typography.h400} style={{ marginTop: 0, maxWidth: `120` }}>\n                        {props.user.name}\n                     </Heading>\n                     <Heading mixin={typography.h200} style={{ marginTop: 0, textTransform: \"capitalize\", fontWeight: \"normal\" }}>\n                        {props?.user?.role?.name} | {props?.user?.department?.name}\n                     </Heading>\n                  </div>\n               </div>\n               <Divider />\n               <MenuGroup>\n                  <Section>\n                     <LinkItem href=\"#/\" cssFn={(currentStyles) => menuItemCss(currentStyles, \"/\")}>\n                        Dashboard\n                     </LinkItem>\n                     {checkPermission(permission.customer) && (\n                        <LinkItem href=\"#/customer\" cssFn={(currentStyles) => menuItemCss(currentStyles, \"customer\")}>\n                           Customer\n                        </LinkItem>\n                     )}\n                     {checkPermission(permission.samples_id) && (\n                        <LinkItem href=\"#/sample\" cssFn={(currentStyles) => menuItemCss(currentStyles, \"sample\")}>\n                           Sample\n                        </LinkItem>\n                     )}\n                  </Section>\n                  {organizationsettingsAccess && (\n                     <Section title=\"Organization Settings\">\n                        {checkPermission(permission.role) && (\n                           <LinkItem href=\"#/organizationsettings/role\" cssFn={(currentStyles) => menuItemCss(currentStyles, \"role\")}>\n                              Role\n                           </LinkItem>\n                        )}\n                        {checkPermission(permission.user) && (\n                           <LinkItem href=\"#/organizationsettings/user\" cssFn={(currentStyles) => menuItemCss(currentStyles, \"user\")}>\n                              Users\n                           </LinkItem>\n                        )}\n                        {checkPermission(permission.department) && (\n                           <LinkItem\n                              href=\"#/organizationsettings/department\"\n                              cssFn={(currentStyles) => menuItemCss(currentStyles, \"department\")}\n                           >\n                              Department\n                           </LinkItem>\n                        )}\n                        {checkPermission(permission.samples_group) && (\n                           <LinkItem\n                              href=\"#/organizationsettings/testgroup\"\n                              cssFn={(currentStyles) => menuItemCss(currentStyles, \"testgroup\")}\n                           >\n                              Test Group\n                           </LinkItem>\n                        )}\n                        {checkPermission(permission.samples_parameter) && (\n                           <LinkItem\n                              href=\"#/organizationsettings/parameter\"\n                              cssFn={(currentStyles) => menuItemCss(currentStyles, \"parameter\")}\n                           >\n                              Parameters\n                           </LinkItem>\n                        )}\n                        {checkPermission(permission.samples_method) && (\n                           <LinkItem\n                              href=\"#/organizationsettings/testmethod\"\n                              cssFn={(currentStyles) => menuItemCss(currentStyles, \"testmethod\")}\n                           >\n                              Test methods\n                           </LinkItem>\n                        )}\n                        {checkPermission(permission.samples_sample) && (\n                           <LinkItem\n                              href=\"#/organizationsettings/sampledetail\"\n                              cssFn={(currentStyles) => menuItemCss(currentStyles, \"sampledetail\")}\n                           >\n                              Sample Details\n                           </LinkItem>\n                        )}\n                     </Section>\n                  )}\n               </MenuGroup>\n            </div>\n         </div>\n      </div>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   user: state.user.user,\n   details: state.orgnization.details,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ logout }, dispatch),\n   };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SideBar));\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport Breadcrumbs, { BreadcrumbsItem } from \"@atlaskit/breadcrumbs\";\n\n// ======================================== Interface =======================================\ninterface Items {\n   path: string;\n   name: string;\n}\n\ninterface Props {\n   items: Array<Items>;\n   screen: string;\n   marginBottom?: number;\n   right?: any;\n}\n\nconst Breadcrumb = (props: Props) => {\n   return (\n      <div\n         style={{ display: \"flex\", flex: 0, justifyContent: \"space-between\", marginBottom: props.marginBottom ? props.marginBottom : 30 }}\n      >\n         <div>\n            <Breadcrumbs>\n               {props.items.map((item: Items, idx: number) => (\n                  <BreadcrumbsItem href={`#${item.path}`} text={`${item.name}`} key={idx} />\n               ))}\n            </Breadcrumbs>\n            <div style={{ fontSize: 24 }}>{props.screen}</div>\n         </div>\n         <div>{props.right}</div>\n      </div>\n   );\n};\n\nexport default Breadcrumb;\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport Spinner from \"@atlaskit/spinner\";\n\nconst ScreenLoader = () => {\n   return (\n      <div\n         style={{\n            height: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            flex: 1,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n         }}\n      >\n         <Spinner size=\"large\" />\n      </div>\n   );\n};\n\nexport default ScreenLoader;\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport SectionMessage from \"@atlaskit/section-message\";\nimport { connect } from \"react-redux\";\n\n// ====================================== File imports ======================================\nimport Box from \"./Box\";\nimport AppState from \"../redux/types\";\nimport { AlertBoxState } from \"../redux/types/AlertBoxTypes\";\n\ninterface Props extends AlertBoxState {}\n\nconst AlertBox = (props: Props) => {\n   return props.visible ? (\n      <Box elevation=\"e400\" style={{ position: \"fixed\", maxWidth: 400, zIndex: 1000, padding: 0, alignSelf: \"center\" }}>\n         <SectionMessage appearance={props.appearance}>\n            <p>{props.body}</p>\n         </SectionMessage>\n      </Box>\n   ) : null;\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   visible: state.alertBox.visible,\n   title: state.alertBox.title,\n   appearance: state.alertBox.appearance,\n   actions: state.alertBox.actions,\n   body: state.alertBox.body,\n});\n\nexport default connect(mapStateToProps)(AlertBox);\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport TrashIcon from \"@atlaskit/icon/glyph/trash\";\nimport { colors } from \"@atlaskit/theme\";\n\n// ====================================== Interface ======================================\n\ninterface Props {\n   onClick: Function;\n   isDisabled?: boolean;\n}\n\nconst DeleteButton = (props: Props) => {\n   return (\n      <div\n         className=\"exactt-btn\"\n         style={{ color: props.isDisabled ? \"#A5ADBA\" : colors.R400 }}\n         onClick={() => (props.isDisabled ? null : props.onClick())}\n      >\n         <span style={{ marginLeft: 5, marginRight: 5, marginTop: 1 }}>\n            <TrashIcon label=\"Edit icon\" size=\"small\" />\n         </span>\n         Delete\n      </div>\n   );\n};\n\nexport default DeleteButton;\n","// ====================================== Module imports ======================================\nimport React, { useState } from \"react\";\nimport { ProgressTracker, Stages } from \"@atlaskit/progress-tracker\";\nimport Button from \"@atlaskit/button\";\nimport { colors, typography } from \"@atlaskit/theme\";\nimport Form, { Field } from \"@atlaskit/form\";\nimport Textfield from \"@atlaskit/textfield\";\nimport Select from \"@atlaskit/select\";\nimport Dropzone from \"react-dropzone\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport Parse from \"parse\";\n\n// ====================================== File imports ======================================\nimport { Box, Heading } from \"../../components\";\nimport \"./organization.css\";\nimport StatesAndDistricts from \"../../constants/states-and-districts.json\";\nimport { Props } from \"./types\";\nimport AppState from \"../../redux/types\";\nimport { setOrganization } from \"../../redux/actions/OrganizationActions\";\nimport { getStatus } from \"../../redux/actions/AuthActions\";\n\nconst OrganizationComponenet = (props: Props) => {\n   var defaultState = StatesAndDistricts.states.find((item) => item.state === \"Andhra Pradesh\");\n   var defaultCity = defaultState ? defaultState.districts.map((item) => ({ label: item, value: item })) : [];\n   const [step, setStep] = useState(0);\n   const [logo, setLogo] = useState<any>();\n   const [basicDetails, setBasicDetails] = useState<any>({});\n   const [contactDetails, setContactDetails] = useState<any>({});\n   const [renderImg, setRenderImg] = useState<any>();\n   const [cityOptions, setCityOptions]: any = useState(defaultCity);\n   const exactt_logo = require(\"../../assets/images/exactt_logo.png\");\n   const empty_image = require(\"../../assets/images/image.png\");\n\n   const statesOption = StatesAndDistricts.states.map((item) => ({ label: item.state, value: item.state }));\n\n   const setCityOption = (state: any): any => {\n      var selectedState = StatesAndDistricts.states.find((item) => item.state === state.value);\n      var citys = selectedState && selectedState.districts ? selectedState.districts.map((item) => ({ label: item, value: item })) : [];\n      setCityOptions(citys);\n   };\n\n   const items: Stages = [\n      {\n         id: \"0\",\n         label: \"Basic Details\",\n         percentageComplete: 0,\n         status: \"current\",\n      },\n      {\n         id: \"1\",\n         label: \"Contact Details\",\n         percentageComplete: 0,\n         status: \"unvisited\",\n      },\n      {\n         id: \"2\",\n         label: \"Accounting Details\",\n         percentageComplete: 0,\n         status: \"unvisited\",\n      },\n   ];\n\n   const stepItems: Stages = items.map((item) => {\n      if (parseInt(item.id) === step) {\n         return {\n            ...item,\n            percentageComplete: 0,\n            status: \"current\",\n         };\n      } else if (step < 3 && parseInt(item.id) < step) {\n         return {\n            ...item,\n            percentageComplete: 100,\n            status: \"visited\",\n         };\n      } else {\n         return item;\n      }\n   });\n\n   return (\n      <div className=\"org_container\" style={{ background: colors.N10 }}>\n         <div>\n            <img src={exactt_logo} className=\"exactt-logo-org\" alt=\"exactt-logo-org\" />\n         </div>\n\n         <Box elevation=\"e300\" style={{ width: 500 }}>\n            <Heading mixin={typography.h500} style={{ marginTop: 10 }}>\n               Enter your orgnization details\n            </Heading>\n            <ProgressTracker items={stepItems} animated={true} spacing=\"cosy\" />\n            <div style={{ textAlign: \"left\" }}>\n               <div style={{ display: step === 0 ? \"block\" : \"none\" }}>\n                  <Form\n                     onSubmit={async (formState: any) => {\n                        var parseLogo = new Parse.File(\"companyLogo.png\", logo, \"image/png\");\n                        var logoFile = await parseLogo.save();\n                        setStep(step + 1);\n                        setBasicDetails({ ...formState, logo: logoFile });\n                        console.log(formState, logoFile);\n                     }}\n                  >\n                     {({ formProps, submitting }: any) => {\n                        return (\n                           <form {...formProps}>\n                              <Field label=\"Orginazation name\" isRequired name=\"name\">\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n\n                              <Field label=\"Prefix\" isRequired name=\"prefix\">\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n\n                              <Dropzone\n                                 onDrop={async (acceptedFiles) => {\n                                    setLogo(acceptedFiles[0]);\n                                    var imgreader = new FileReader();\n                                    await imgreader.readAsDataURL(acceptedFiles[0]);\n                                    setRenderImg(imgreader);\n                                 }}\n                              >\n                                 {({ getRootProps, getInputProps }) => (\n                                    <section>\n                                       <div\n                                          {...getRootProps()}\n                                          className=\"logoSelection\"\n                                          style={{\n                                             borderColor: colors.N40,\n                                             display: \"flex\",\n                                             alignItems: \"center\",\n                                             flexDirection: \"column\",\n                                          }}\n                                       >\n                                          <input {...getInputProps()} />\n                                          <img\n                                             src={logo && renderImg ? renderImg.result : empty_image}\n                                             style={{ width: logo ? 200 : 100 }}\n                                             alt=\"empty_image\"\n                                          />\n                                          <Button appearance=\"primary\">Select Logo</Button>\n                                       </div>\n                                    </section>\n                                 )}\n                              </Dropzone>\n\n                              <div style={{ display: \"flex\", flex: 1, flexDirection: \"row\", justifyContent: \"flex-end\", marginTop: 30 }}>\n                                 <Button\n                                    appearance=\"link\"\n                                    onClick={() => {\n                                       if (step !== 0) {\n                                          setStep(step - 1);\n                                       }\n                                    }}\n                                 >\n                                    Back\n                                 </Button>\n\n                                 <Button appearance=\"primary\" type=\"submit\" isLoading={submitting}>\n                                    Next\n                                 </Button>\n                              </div>\n                           </form>\n                        );\n                     }}\n                  </Form>\n               </div>\n               <div style={{ display: step === 1 ? \"block\" : \"none\" }}>\n                  <Form\n                     onSubmit={async (formState: any) => {\n                        setStep(step + 1);\n                        console.log(formState);\n                        setContactDetails(formState);\n                     }}\n                  >\n                     {({ formProps, submitting }: any) => {\n                        return (\n                           <form {...formProps}>\n                              <Field label=\"Contact Person\" isRequired name=\"contact_peron\">\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n\n                              <Field label=\"Phone\" isRequired name=\"phone\">\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n\n                              <Field label=\"Email\" isRequired name=\"email\">\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n\n                              <Field label=\"Address line 1\" isRequired name=\"line1\">\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n\n                              <Field label=\"Address line 2\" isRequired name=\"line2\">\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n\n                              <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                                 <div style={{ width: \"32%\" }}>\n                                    <Field\n                                       label=\"State\"\n                                       isRequired\n                                       name=\"state\"\n                                       defaultValue={{ label: \"Andhra Pradesh\", value: \"Andhra Pradesh\" }}\n                                       validate={(value: any) => setCityOption(value)}\n                                    >\n                                       {({ fieldProps }: any) => (\n                                          <Select\n                                             {...fieldProps}\n                                             options={statesOption}\n                                             placeholder=\"Choose a state\"\n                                             style={{ width: \"30%\" }}\n                                          />\n                                       )}\n                                    </Field>\n                                 </div>\n                                 <div style={{ width: \"32%\" }}>\n                                    <Field label=\"City\" isRequired name=\"city\" defaultValue={cityOptions[0]}>\n                                       {({ fieldProps }: any) => (\n                                          <Select\n                                             {...fieldProps}\n                                             options={cityOptions}\n                                             placeholder=\"Choose a city\"\n                                             isDisabled={cityOptions.length === 0}\n                                          />\n                                       )}\n                                    </Field>\n                                 </div>\n                                 <div style={{ width: \"32%\" }}>\n                                    <Field label=\"Zip\" isRequired name=\"zip\">\n                                       {({ fieldProps }: any) => <Textfield {...fieldProps} maxLength={6} type=\"number\" />}\n                                    </Field>\n                                 </div>\n                              </div>\n\n                              <div style={{ display: \"flex\", flex: 1, flexDirection: \"row\", justifyContent: \"flex-end\", marginTop: 30 }}>\n                                 <Button\n                                    appearance=\"link\"\n                                    onClick={() => {\n                                       if (step !== 0) {\n                                          setStep(step - 1);\n                                       }\n                                    }}\n                                 >\n                                    Back\n                                 </Button>\n\n                                 <Button appearance=\"primary\" type=\"submit\" isLoading={submitting}>\n                                    Next\n                                 </Button>\n                              </div>\n                           </form>\n                        );\n                     }}\n                  </Form>\n               </div>\n               <div style={{ display: step === 2 ? \"block\" : \"none\" }}>\n                  <Form\n                     onSubmit={async (formState: any) => {\n                        let formData: any = {};\n                        formData[\"name\"] = basicDetails.name;\n                        formData[\"prefix\"] = basicDetails.prefix;\n                        formData[\"email\"] = contactDetails.email;\n                        formData[\"gst\"] = formState.gst;\n                        formData[\"logo\"] = basicDetails.logo;\n                        formData[\"address\"] = {\n                           line1: contactDetails.line1,\n                           line2: contactDetails.line2,\n                           state: contactDetails.state.value,\n                           city: contactDetails.city.value,\n                           zip: contactDetails.zip,\n                        };\n                        formData[\"contact\"] = {\n                           name: contactDetails.contact_peron,\n                           phone: contactDetails.phone,\n                           email: contactDetails.email,\n                        };\n                        formData[\"bank\"] = {\n                           name: formState.bank_name,\n                           acc_name: formState.acc_name,\n                           acc_number: formState.acc_no,\n                           branch: formState.branch,\n                           ifsc: formState.ifsc,\n                        };\n                        // var formData = { ...formState, ...basicDetails, ...contactDetails };\n                        var res = await props.setOrganization(formData);\n                        var status = await props.getStatus();\n                        console.log(\"response --> \", res);\n                        console.log(\"status ---->\", status);\n                     }}\n                  >\n                     {({ formProps, submitting }: any) => {\n                        return (\n                           <form {...formProps}>\n                              <Field label=\"Bank account name\" name=\"bank_name\">\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n\n                              <Field label=\"Account name\" name=\"acc_name\">\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n\n                              <Field label=\"Branch\" name=\"branch\">\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n\n                              <Field label=\"Account number\" name=\"acc_no\">\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n\n                              <Field label=\"IFSC Code\" name=\"ifsc\">\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n\n                              <Field label=\"GST Number\" name=\"gst\">\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n                              <div style={{ display: \"flex\", flex: 1, flexDirection: \"row\", justifyContent: \"flex-end\", marginTop: 30 }}>\n                                 <Button\n                                    appearance=\"link\"\n                                    onClick={() => {\n                                       if (step !== 0) {\n                                          setStep(step - 1);\n                                       }\n                                    }}\n                                 >\n                                    Back\n                                 </Button>\n\n                                 <Button appearance=\"primary\" type=\"submit\" isLoading={submitting}>\n                                    Submit\n                                 </Button>\n                              </div>\n                           </form>\n                        );\n                     }}\n                  </Form>\n               </div>\n            </div>\n         </Box>\n      </div>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   orgnization: state.orgnization,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ setOrganization, getStatus }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrganizationComponenet);\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport { connect } from \"react-redux\";\n\n// ====================================== File imports ======================================\nimport { Breadcrumb } from \"../../components\";\nimport AppState from \"../../redux/types\";\n\nconst breadcrumbItems = [{ path: \"/\", name: \"Dashboard\" }];\n\nconst Dashboard = (props: any) => {\n   console.log(props.orgnization.prefix);\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb items={breadcrumbItems} screen=\"Dashboard\" />\n            </GridColumn>\n            <GridColumn medium={12}>\n               <img src={props.orgnization.logo.url()} alt=\"client's logo\" />\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   sampleGroupPermission: state.user.user.role.permission.samples_group,\n   orgnization: state.orgnization.details,\n});\n\nexport default connect(mapStateToProps)(Dashboard);\n","import { DispatchType } from \"../types/ActionDispatch\";\nimport AlertBox from \"./Alert\";\nimport ActionsTypes from \".\";\nimport Parse from \"parse\";\n\nexport function getRoleAccessPermission() {\n   return async (dispatch: DispatchType): Promise<any> => {\n      try {\n         let res = await Parse.Cloud.run(\"getRoleAccessPermission\");\n         dispatch({\n            type: ActionsTypes.GET_ROLE_ACCESS,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         throw error;\n      }\n   };\n}\n\nexport function updateRole(data: object) {\n   return async (dispatch: DispatchType): Promise<object> => {\n      try {\n         let res = await Parse.Cloud.run(\"updateRole\", data);\n         dispatch({\n            type: ActionsTypes.UPDATE_ROLE,\n            payload: res.permission,\n         });\n         return res;\n      } catch (error) {\n         throw error;\n      }\n   };\n}\n\nexport function createRole(data: object) {\n   return async (dispatch: DispatchType): Promise<object> => {\n      try {\n         let res = await Parse.Cloud.run(\"createRole\", data);\n         dispatch({\n            type: ActionsTypes.CREATE_ROLE,\n            payload: res,\n         });\n         AlertBox(dispatch, \"confirmation\", \"Role created successfully.\");\n         return res;\n      } catch (error) {\n         AlertBox(dispatch, \"error\", error.message);\n         throw new Error(error);\n      }\n   };\n}\n\nexport function getAccessRoleList() {\n   return async (dispatch: DispatchType): Promise<object> => {\n      try {\n         let res = await Parse.Cloud.run(\"getAvailableRoles\");\n         dispatch({\n            type: ActionsTypes.GET_ACCESS_ROLES_LIST,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         AlertBox(dispatch, \"error\", error.message);\n         throw new Error(error);\n      }\n   };\n}\n","// ====================================== Module imports ======================================\nimport React, { useState, useEffect } from \"react\";\nimport { Checkbox } from \"@atlaskit/checkbox\";\nimport { colors } from \"@atlaskit/theme\";\nimport Button from \"@atlaskit/button\";\nimport Textfield from \"@atlaskit/textfield\";\nimport Form, { Field } from \"@atlaskit/form\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport AddIcon from \"@atlaskit/icon/glyph/add\";\n\n// ====================================== File imports ======================================\nimport { Props, AddRoleForm } from \"./types\";\nimport { Breadcrumb } from \"../../components\";\nimport { getRoleAccessPermission, updateRole, createRole } from \"../../redux/actions/RoleActions\";\nimport AppState from \"../../redux/types\";\nimport { ScreenLoader } from \"../../components\";\nimport \"./Role.css\";\n\n// ====================================== styles ======================================\n\nconst breadcrumbItems = [\n   { path: \"/\", name: \"Organization Settings\" },\n   { path: \"/organizationsettings/role\", name: \"Role\" },\n];\n\nconst roleItems: Array<string> = [\n   \" \",\n   \"Role\",\n   \"User\",\n   \"Customer\",\n   \"Department\",\n   \"Samples/Group\",\n   \"Samples/Parameter\",\n   \"Samples/Method\",\n   \"Samples/Sample\",\n   \"Samples/Add\",\n   \"Samples/{id}\",\n   \"Samples/{id}/Update\",\n   \"Samples/{id}/TestRequest\",\n   \"Samples/{id}/JobAllotment\",\n   \"Samples/{id}/JobSheet\",\n   \"Samples/{id}/Result\",\n];\n\nconst Role = (props: Props) => {\n   const [loading, setLoading] = useState<boolean>(true);\n   const [roles, setRoles] = useState<any>({});\n\n   const fetch = async () => {\n      setLoading(true);\n      await props.getRoleAccessPermission();\n      setLoading(false);\n   };\n\n   useEffect(() => {\n      fetch();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   useEffect(() => {\n      setRoles(props.access);\n   }, [props.access]);\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb\n                  items={breadcrumbItems}\n                  screen=\"Role\"\n                  right={\n                     props.rolePermission.write && (\n                        <div style={{ display: \"flex\" }}>\n                           <Form\n                              onSubmit={async (addRoleForm: AddRoleForm) => {\n                                 try {\n                                    await props.createRole(addRoleForm);\n                                 } catch (error) {}\n                              }}\n                           >\n                              {({ formProps, submitting }: any) => (\n                                 <form {...formProps} style={{ display: \"flex\" }}>\n                                    <Field label=\"\" isRequired name=\"roleName\" defaultValue=\"\">\n                                       {({ fieldProps }: any) => (\n                                          <Textfield {...fieldProps} placeholder=\"Role Name\" style={{ width: 200 }} />\n                                       )}\n                                    </Field>\n                                    <Button\n                                       iconBefore={<AddIcon label=\"Add icon\" size=\"small\" />}\n                                       type=\"submit\"\n                                       style={{ height: 38, marginLeft: 10, marginTop: 9 }}\n                                       appearance=\"primary\"\n                                       isLoading={submitting}\n                                    >\n                                       Add new role\n                                    </Button>\n                                 </form>\n                              )}\n                           </Form>\n                        </div>\n                     )\n                  }\n               />\n            </GridColumn>\n            {loading ? (\n               <ScreenLoader />\n            ) : (\n               <React.Fragment>\n                  <GridColumn medium={3}>\n                     {roleItems.map((item, idx) => (\n                        <div\n                           className=\"cell\"\n                           style={{\n                              borderColor: colors.N60,\n                              fontWeight: \"bold\",\n                              minWidth: 210,\n                              justifyContent: \"left\",\n                              overflow: \"scroll\",\n                           }}\n                           key={item + idx}\n                        >\n                           {item}\n                        </div>\n                     ))}\n                  </GridColumn>\n                  <GridColumn medium={9}>\n                     <div style={{ display: \"flex\", flex: 1, overflow: \"scroll\", background: colors.N10 }}>\n                        {Object.keys(roles).map((role: string, idx: number) => (\n                           <div key={role + idx} style={{ display: \"flex\", flex: 1, flexDirection: \"column\" }}>\n                              <div className=\"cell\" style={{ borderColor: colors.N60, fontWeight: \"bold\", background: colors.N0 }}>\n                                 {role}\n                              </div>\n                              {Object.keys(roles[role]).map((roleItems: any, idx: number) => (\n                                 <div className=\"cell\" style={{ borderColor: colors.N60 }} key={role + roleItems + idx}>\n                                    <Checkbox\n                                       value=\"R\"\n                                       label=\"R\"\n                                       isDisabled={role === \"admin\" || roleItems === \"role\"}\n                                       defaultChecked={roles[role][roleItems].read}\n                                       onChange={async () => {\n                                          var updateRoles = roles;\n                                          updateRoles[role][roleItems][\"read\"] = !roles[role][roleItems].read;\n                                          await props.updateRole({ name: role, permission: updateRoles[role] });\n                                          setRoles(updateRoles);\n                                       }}\n                                       name={`checkbox-r-${role + roleItems + idx}`}\n                                       testId={`cb-default-r-${role + roleItems + idx}`}\n                                    />\n                                    <Checkbox\n                                       value=\"W\"\n                                       label=\"W\"\n                                       isDisabled={role === \"admin\" || roleItems === \"role\"}\n                                       defaultChecked={roles[role][roleItems].write}\n                                       onChange={async () => {\n                                          var updateRoles = roles;\n                                          updateRoles[role][roleItems][\"write\"] = !roles[role][roleItems].write;\n                                          await props.updateRole({ name: role, permission: updateRoles[role] });\n                                          setRoles(updateRoles);\n                                       }}\n                                       name={`checkbox-w-${role + roleItems}`}\n                                       testId={`cb-default-w-${role + roleItems}`}\n                                    />\n                                 </div>\n                              ))}\n                           </div>\n                        ))}\n                     </div>\n                  </GridColumn>\n               </React.Fragment>\n            )}\n         </Grid>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   access: state.role.access,\n   rolePermission: state.user.user.role.permission.role,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ getRoleAccessPermission, updateRole, createRole }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Role);\n","import { DispatchType } from \"../types/ActionDispatch\";\nimport { Departments } from \"../types/DepartmentTypes\";\nimport ActionsTypes from \".\";\n\nimport Parse from \"parse\";\n\nexport function getDepartments() {\n   return async (dispatch: DispatchType): Promise<Array<Departments>> => {\n      try {\n         const res = await Parse.Cloud.run(\"getDepartments\");\n         dispatch({\n            type: ActionsTypes.GET_DEPARTMENTS,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         throw new Error(error);\n      }\n   };\n}\n\nexport function createDepartment(data: object) {\n   return async (dispatch: DispatchType): Promise<any> => {\n      try {\n         const res = await Parse.Cloud.run(\"createDepartment\", data);\n         dispatch({\n            type: ActionsTypes.CREATE_DEPARTMENT,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         console.log(error);\n         throw new Error(error);\n      }\n   };\n}\n\nexport function updateDepartment(data: object) {\n   return async (dispatch: DispatchType): Promise<any> => {\n      try {\n         const res = await Parse.Cloud.run(\"updateDepartment\", data);\n         dispatch({\n            type: ActionsTypes.UPDATE_DEPARTMENT,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         console.log(error);\n         throw new Error(error);\n      }\n   };\n}\n","// ====================================== Module imports ======================================\nimport React, { useEffect, useState } from \"react\";\nimport DynamicTable from \"@atlaskit/dynamic-table\";\nimport InlineEdit from \"@atlaskit/inline-edit\";\nimport Textfield from \"@atlaskit/textfield\";\nimport Form, { Field } from \"@atlaskit/form\";\nimport Button from \"@atlaskit/button\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport AddIcon from \"@atlaskit/icon/glyph/add\";\n\n// ====================================== File imports ======================================\nimport { Breadcrumb } from \"../../components\";\nimport AppState from \"../../redux/types\";\nimport { getDepartments, createDepartment, updateDepartment } from \"../../redux/actions/DepartmentActions\";\nimport { Departments } from \"../../redux/types/DepartmentTypes\";\nimport { Props, CreateDepartmentForm } from \"./types\";\n\nconst breadcrumbItems = [\n   { path: \"/\", name: \"Organization Settings\" },\n   { path: \"/organizationsettings/department\", name: \"Department\" },\n];\n\nconst Department = (props: Props) => {\n   const [loading, setLoading] = useState<boolean>(true);\n   const [rows, setRows] = useState<any>([]);\n   const { departments, createDepartment, updateDepartment, departmentPermission } = props;\n\n   const focus = async () => {\n      await props.getDepartments();\n      setLoading(false);\n   };\n\n   useEffect(() => {\n      focus();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   useEffect(() => {\n      let createRows: Array<object> = departments.map((department: Departments) => ({\n         key: `row-${department.objectId}`,\n         cells: [\n            {\n               key: `cell${department.objectId}${department.name}`,\n               content: departmentPermission.write ? (\n                  <InlineEdit\n                     hideActionButtons={true}\n                     defaultValue={department.name}\n                     editView={(fieldProps) => <Textfield {...fieldProps} autoFocus />}\n                     readView={() => <div style={{ paddingBottom: 4 }}>{department.name}</div>}\n                     onConfirm={async (value) => {\n                        setLoading(true);\n                        await updateDepartment({ name: value, objectId: department.objectId });\n                        setLoading(false);\n                     }}\n                  />\n               ) : (\n                  <div style={{ paddingBottom: 4 }}>{department.name}</div>\n               ),\n            },\n         ],\n      }));\n      if (departmentPermission.write) {\n         createRows.push({\n            key: \"rowAddDepartment\",\n            cells: [\n               {\n                  key: \"cellAddDepartment\",\n                  content: (\n                     <div style={{ display: \"flex\" }}>\n                        <Form\n                           onSubmit={async (createDepartmentForm: CreateDepartmentForm) => {\n                              try {\n                                 await createDepartment(createDepartmentForm);\n                              } catch (error) {\n                                 console.log(error);\n                              }\n                           }}\n                        >\n                           {({ formProps, submitting }: any) => (\n                              <form {...formProps} style={{ display: \"flex\" }}>\n                                 <Field label=\"\" isRequired name=\"name\" defaultValue=\"\">\n                                    {({ fieldProps }: any) => (\n                                       <Textfield {...fieldProps} placeholder=\"Department name\" style={{ width: 200 }} />\n                                    )}\n                                 </Field>\n                                 <Button\n                                    iconBefore={<AddIcon label=\"Add icon\" size=\"small\" />}\n                                    type=\"submit\"\n                                    style={{ height: 38, marginLeft: 10, marginTop: 9 }}\n                                    appearance=\"primary\"\n                                    isLoading={submitting}\n                                 >\n                                    Add new department\n                                 </Button>\n                              </form>\n                           )}\n                        </Form>\n                     </div>\n                  ),\n               },\n            ],\n         });\n      }\n      setRows(createRows);\n   }, [departments, createDepartment, updateDepartment, departmentPermission.write]);\n\n   const head: any = {\n      cells: [\n         {\n            key: \"departmentName\",\n            content: \"Department Name\",\n            isSortable: true,\n            shouldTruncate: true,\n         },\n      ],\n   };\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb items={breadcrumbItems} screen=\"Department\" />\n            </GridColumn>\n            <GridColumn medium={12}>\n               <DynamicTable\n                  head={head}\n                  rows={rows}\n                  rowsPerPage={20}\n                  defaultPage={1}\n                  isFixedSize\n                  isLoading={loading}\n                  defaultSortKey=\"term\"\n                  defaultSortOrder=\"ASC\"\n                  onSort={() => console.log(\"onSort\")}\n                  onSetPage={() => console.log(\"onSetPage\")}\n               />\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   departments: state.department.departments,\n   departmentPermission: state.user.user.role.permission.department,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ getDepartments, createDepartment, updateDepartment }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Department);\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport { colors, typography } from \"@atlaskit/theme\";\nimport Button from \"@atlaskit/button\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\n// ====================================== File imports ====================================\nimport { Heading } from \"../../components\";\n\ninterface Props extends RouteComponentProps {}\n\nconst PageNotFound = (props: Props) => {\n   return (\n      <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", flex: 1, alignItems: \"center\" }}>\n         <div style={{ fontSize: 120 }}>\n            <span>4</span>\n            <span style={{ color: colors.B300 }}>0</span>\n            <span>4</span>\n         </div>\n         <Heading mixin={typography.h500} style={{ marginTop: 0 }}>\n            Error! Page not found.\n         </Heading>\n         <Button appearance=\"link\" onClick={() => props.history.push(\"/\")}>\n            Go to home\n         </Button>\n      </div>\n   );\n};\n\nexport default PageNotFound;\n","// ====================================== Module imports ======================================\nimport React, { useState, useEffect } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Button from \"@atlaskit/button\";\nimport AddIcon from \"@atlaskit/icon/glyph/add\";\nimport EditIcon from \"@atlaskit/icon/glyph/edit\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport DynamicTable from \"@atlaskit/dynamic-table\";\nimport Modal, { ModalTransition } from \"@atlaskit/modal-dialog\";\n\n// ====================================== File imports ======================================\nimport { Breadcrumb, DeleteButton } from \"../../components\";\nimport { Props } from \"./types\";\nimport AppState from \"../../redux/types\";\nimport { getUsers, deleteUser } from \"../../redux/actions/UserActions\";\n\nconst breadcrumbItems = [\n   { path: \"/\", name: \"Organization Settings\" },\n   { path: \"/organizationsettings/user\", name: \"Users\" },\n];\n\nconst User = (props: Props) => {\n   const { userPermission, getUsers, users, deleteUser } = props;\n   const [deleteUserData, setDeleteUserData] = useState<any>(undefined);\n   const [loading, setLoading] = useState(true);\n   const [rows, setRows] = useState<any>([]);\n   const [isDeleting, setisDeleting] = useState(false);\n\n   const close = () => setDeleteUserData(undefined);\n   const handleDelete = async () => {\n      setisDeleting(true);\n      await deleteUser(deleteUserData?.objectId);\n      setDeleteUserData(undefined);\n      setisDeleting(false);\n   };\n\n   const focus = async () => {\n      await getUsers();\n      setLoading(false);\n   };\n\n   useEffect(() => {\n      focus();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   useEffect(() => {\n      let createRows: Array<object> = users?.map((user: any, id: number) => ({\n         key: `row${user.objectId}`,\n         cells: [\n            {\n               key: `cell${user.objectId}${user.name}`,\n               content: <div style={{ height: 34, display: \"flex\", alignItems: \"center\" }}>{user.name}</div>,\n            },\n            {\n               key: `cell${user.objectId}${user.department.name}`,\n               content: <div>{user.department.name}</div>,\n            },\n            {\n               key: `cell${user.objectId}${user.role.name}`,\n               content: <div>{user.role.name}</div>,\n            },\n            {\n               key: `cell${user.objectId}${user.phone}`,\n               content: <div>{user.phone}</div>,\n            },\n            {\n               key: `cell${user.objectId}${user.email}`,\n               content: <div>{user.email}</div>,\n            },\n            {\n               key: `cell${user.objectId}-action`,\n               content: userPermission.write && (\n                  <div style={{ display: \"flex\" }}>\n                     <Button\n                        iconBefore={<EditIcon label=\"Edit icon\" size=\"small\" />}\n                        appearance=\"link\"\n                        isDisabled={user.department.name === \"Admin\"}\n                        onClick={() => props.history.push(`/organizationsettings/user/edit/${user.objectId}`)}\n                     >\n                        Edit\n                     </Button>\n                     <DeleteButton\n                        onClick={() => setDeleteUserData(user)}\n                        isDisabled={user.department.name === \"Admin\"}\n                     />\n                  </div>\n               ),\n            },\n         ],\n      }));\n\n      setRows(createRows);\n   }, [users, props.history, userPermission.write]);\n\n   const head: any = {\n      cells: [\n         {\n            key: \"name\",\n            content: \"Name\",\n            isSortable: true,\n            shouldTruncate: false,\n         },\n         {\n            key: \"department\",\n            width: 15,\n            content: \"Department\",\n            isSortable: false,\n            shouldTruncate: true,\n         },\n         {\n            key: \"role\",\n            content: \"Role\",\n            width: 10,\n            isSortable: false,\n            shouldTruncate: true,\n         },\n         {\n            key: \"phone\",\n            content: \"Phone\",\n            isSortable: false,\n            shouldTruncate: true,\n         },\n         {\n            key: \"email\",\n            content: \"Email\",\n            isSortable: false,\n            shouldTruncate: true,\n         },\n         {\n            key: \"action\",\n            content: \"\",\n            width: userPermission.write ? 17 : 1,\n            isSortable: false,\n            shouldTruncate: false,\n         },\n      ],\n   };\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb\n                  items={breadcrumbItems}\n                  screen=\"Users\"\n                  right={\n                     userPermission.write && (\n                        <Button\n                           iconBefore={<AddIcon label=\"Add icon\" size=\"small\" />}\n                           type=\"submit\"\n                           style={{ height: 38, marginLeft: 10, marginTop: 9 }}\n                           appearance=\"primary\"\n                           onClick={() => props.history.push(\"/organizationsettings/user/add\")}\n                        >\n                           Add new user\n                        </Button>\n                     )\n                  }\n               />\n            </GridColumn>\n            <GridColumn medium={12}>\n               <DynamicTable\n                  head={head}\n                  rows={rows}\n                  rowsPerPage={10}\n                  defaultPage={1}\n                  isFixedSize\n                  isLoading={loading}\n                  defaultSortKey=\"name\"\n                  defaultSortOrder=\"ASC\"\n                  onSort={() => console.log(\"onSort\")}\n                  onSetPage={() => console.log(\"onSetPage\")}\n               />\n            </GridColumn>\n         </Grid>\n         <ModalTransition>\n            {deleteUserData && (\n               <Modal\n                  actions={[\n                     { text: \"Delete\", onClick: handleDelete, isLoading: isDeleting, appearance: \"danger\" },\n                     { text: \"Cancle\", onClick: close },\n                  ]}\n                  onClose={close}\n                  heading=\"Delete\"\n               >\n                  Are you sure you want to delete <strong>{deleteUserData.name}</strong> ?\n               </Modal>\n            )}\n         </ModalTransition>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   userPermission: state.user.user.role.permission.user,\n   users: state.user.users,\n   customers: state.customer.customers,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ getUsers, deleteUser }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(User);\n","// ====================================== Module imports ======================================\nimport React, { Fragment } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Form, { Field, ErrorMessage } from \"@atlaskit/form\";\nimport Button from \"@atlaskit/button\";\nimport Textfield from \"@atlaskit/textfield\";\nimport Select from \"@atlaskit/select\";\n\n// ====================================== File imports ======================================\nimport { AddUserFormProps, UserData } from \"./types\";\nimport PhoneCodeList from \"../../../constants/phone-code.json\";\n\nconst AddUserForm = (props: AddUserFormProps) => {\n   const { edit, editUser } = props;\n   let editUserPhoneCode: object | undefined;\n\n   if (edit) {\n      editUserPhoneCode = PhoneCodeList.find((code) => code.value.toString() === editUser?.phone?.split(\"-\")[0]?.split(\"+\")[1]);\n   }\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Form\n                  onSubmit={async (userData: UserData) => {\n                     try {\n                        await props.onSubmit(userData);\n                        props.onBack();\n                     } catch (err) {\n                        console.log(err);\n                     }\n                  }}\n               >\n                  {({ formProps, submitting }: any) => (\n                     <form {...formProps}>\n                        <Field label=\"Username\" isRequired name=\"username\" defaultValue={edit ? editUser.username : \"\"}>\n                           {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                        </Field>\n\n                        <Field label=\"Name\" isRequired name=\"name\" defaultValue={edit ? editUser.name : \"\"}>\n                           {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                        </Field>\n\n                        <Field\n                           label=\"Email\"\n                           isRequired\n                           name=\"email\"\n                           defaultValue={edit ? editUser.email : \"\"}\n                           validate={(value) => {\n                              if (!value) {\n                                 return;\n                              }\n\n                              var mailformat = /\\S+@\\S+\\.\\S+/;\n\n                              if (!value.match(mailformat)) {\n                                 return \"INVALID_EMAIL\";\n                              }\n                           }}\n                        >\n                           {({ fieldProps, error }: any) => (\n                              <Fragment>\n                                 <Textfield {...fieldProps} />\n                                 {error === \"INVALID_EMAIL\" && <ErrorMessage>Please enter valid email address.</ErrorMessage>}\n                              </Fragment>\n                           )}\n                        </Field>\n\n                        <Grid>\n                           <GridColumn medium={3}>\n                              <Field\n                                 label=\"Country code\"\n                                 isRequired\n                                 name=\"countryCode\"\n                                 defaultValue={editUserPhoneCode ? editUserPhoneCode : { label: \"+91 India\", value: 91 }}\n                              >\n                                 {({ fieldProps }: any) => <Select {...fieldProps} options={PhoneCodeList} placeholder=\"Country code\" />}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={9}>\n                              <Field label=\"Phone\" isRequired name=\"phone\" defaultValue={edit ? editUser?.phone?.split(\"-\")[1] : \"\"}>\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} maxLength={10} />}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n\n                        <Grid>\n                           <GridColumn medium={6}>\n                              <Field\n                                 label=\"Department\"\n                                 isRequired\n                                 name=\"department\"\n                                 defaultValue={edit ? { label: editUser.department.name, value: editUser.department.objectId } : \"\"}\n                              >\n                                 {({ fieldProps }: any) => (\n                                    <Select {...fieldProps} options={props.departmentList} placeholder=\"Select department\" />\n                                 )}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={6}>\n                              <Field\n                                 label=\"Role\"\n                                 isRequired\n                                 name=\"role\"\n                                 defaultValue={edit ? { label: editUser.role.name, value: editUser.role.objectId } : \"\"}\n                              >\n                                 {({ fieldProps }: any) => <Select {...fieldProps} options={props.roleList} placeholder=\"Select role\" />}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n\n                        <div style={{ display: \"flex\", justifyContent: \"flex-end\", marginTop: 20 }}>\n                           <Button appearance=\"link\" disabled={submitting} onClick={() => props.onBack()}>\n                              Back\n                           </Button>\n                           <Button type=\"submit\" appearance=\"primary\" isLoading={submitting}>\n                              {edit ? \"Edit user\" : \"Add user\"}\n                           </Button>\n                        </div>\n                     </form>\n                  )}\n               </Form>\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nexport default AddUserForm;\n","// ====================================== Module imports ======================================\nimport React, { useState, useEffect } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\n// ====================================== File imports ======================================\nimport { Props, UserData } from \"./types\";\nimport { Breadcrumb, ScreenLoader } from \"../../../components\";\nimport { getDepartments } from \"../../../redux/actions/DepartmentActions\";\nimport { getAccessRoleList } from \"../../../redux/actions/RoleActions\";\nimport { createUser, getUser, updateUser } from \"../../../redux/actions/UserActions\";\nimport { Departments } from \"../../../redux/types/DepartmentTypes\";\nimport { RoleItem } from \"../../../redux/types/RoleTypes\";\nimport AppState from \"../../../redux/types\";\nimport AddUserForm from \"./AddUserForm\";\n\nconst AddUser = (props: Props) => {\n   const { departments, rolesList, editUser } = props;\n   const { userId } = props.match.params;\n   const [loading, setLoading] = useState(true);\n   const [departmentList, setDepartmentList] = useState([]);\n   const [roleList, setRoleList] = useState([]);\n\n   const focus = async () => {\n      if (userId) {\n         await props.getUser(userId);\n      }\n      await props.getDepartments();\n      await props.getAccessRoleList();\n      setLoading(false);\n   };\n\n   useEffect(() => {\n      focus();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   useEffect(() => {\n      if (departments.length > 0) {\n         const list: any = departments.map((department: Departments) => ({ label: department.name, value: department.objectId }));\n         setDepartmentList(list);\n      }\n      if (rolesList.length > 0) {\n         const list: any = rolesList.map((role: RoleItem) => ({ label: role.name, value: role.objectId }));\n         setRoleList(list);\n      }\n   }, [departments, rolesList]);\n\n   const breadcrumbItems = [\n      { path: \"/\", name: \"Organization Settings\" },\n      { path: \"/organizationsettings/user\", name: \"Users\" },\n      { path: `/organizationsettings/user/${userId ? `edit/${userId}` : \"add\"}`, name: userId ? \"Edit user\" : \"Add user\" },\n   ];\n\n   const handleBack = () => {\n      props.history.goBack();\n   };\n\n   const handleSubmit = async (userData: UserData) => {\n      if (userId) {\n         await props.updateUser({ ...userData, objectId: userId });\n      } else {\n         await props.createUser(userData);\n      }\n   };\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb items={breadcrumbItems} screen={userId ? \"Edit user\" : \"Add user\"} />\n            </GridColumn>\n            {loading ? (\n               <ScreenLoader />\n            ) : (\n               <GridColumn medium={8}>\n                  <AddUserForm\n                     onBack={handleBack}\n                     onSubmit={handleSubmit}\n                     departmentList={departmentList}\n                     roleList={roleList}\n                     edit={userId?.length > 0}\n                     editUser={editUser}\n                  />\n               </GridColumn>\n            )}\n         </Grid>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   departments: state.department.departments,\n   rolesList: state.role.rolesList,\n   editUser: state.user.userData,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ getDepartments, createUser, getAccessRoleList, getUser, updateUser }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUser);\n","import { DispatchType } from \"../types/ActionDispatch\";\nimport { Customer } from \"../types/CustomerTypes\";\nimport AlertBox from \"./Alert\";\nimport ActionsTypes from \".\";\n\nimport Parse from \"parse\";\n\nexport function getCustomers() {\n   return async (dispatch: DispatchType): Promise<any> => {\n      try {\n         let res = await Parse.Cloud.run(\"getCustomers\");\n         dispatch({\n            type: ActionsTypes.GET_CUSTOMERS,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function searchCustomers(keyword: string) {\n   return async (dispatch: DispatchType): Promise<any> => {\n      try {\n         let res = await Parse.Cloud.run(\"searchCustomers\", { keyword });\n         dispatch({\n            type: ActionsTypes.SEARCH_CUSTOMERS,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function getCustomer(customerId: string) {\n   return async (dispatch: DispatchType): Promise<any> => {\n      try {\n         let fromData = {\n            objectId: customerId,\n         };\n         let res = await Parse.Cloud.run(\"getCustomer\", fromData);\n         dispatch({\n            type: ActionsTypes.GET_CUSTOMER,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function createCustomers(data: any) {\n   return async (dispatch: DispatchType): Promise<any> => {\n      try {\n         let formData: Customer = {\n            name: data.name,\n            email: data.email,\n            address: {\n               line1: data.line1,\n               line2: data.line2,\n               city: data.city.value,\n               zip: data.zip,\n               state: data.state.value,\n            },\n            bank: {\n               acc_name: data.acc_name,\n               acc_number: data.acc_number,\n               branch: data.branch,\n               ifsc: data.ifsc,\n               name: data.bankname,\n            },\n            contact: {\n               name: data.personName,\n               phone: \"+\" + data.countryCode.value + \"-\" + data.phone,\n               email: data.email,\n            },\n            gst: data.gst,\n         };\n         let res = await Parse.Cloud.run(\"createCustomer\", formData);\n         dispatch({\n            type: ActionsTypes.CREATE_CUSTOMER,\n            payload: res,\n         });\n         AlertBox(dispatch, \"confirmation\", \"Customer created successfully.\");\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function updateCustomers(data: any) {\n   return async (dispatch: DispatchType): Promise<any> => {\n      try {\n         let formData: Customer = {\n            objectId: data.objectId,\n            name: data.name,\n            email: data.email,\n            address: {\n               line1: data.line1,\n               line2: data.line2,\n               city: data.city.value,\n               zip: data.zip,\n               state: data.state.value,\n            },\n            bank: {\n               acc_name: data.acc_name,\n               acc_number: data.acc_number,\n               branch: data.branch,\n               ifsc: data.ifsc,\n               name: data.bankname,\n            },\n            contact: {\n               name: data.personName,\n               phone: \"+\" + data.countryCode.value + \"-\" + data.phone,\n               email: data.email,\n            },\n            gst: data.gst,\n         };\n         let res = await Parse.Cloud.run(\"updateCustomer\", formData);\n         dispatch({\n            type: ActionsTypes.UPDATE_CUSTOMER,\n            payload: res,\n         });\n         AlertBox(dispatch, \"confirmation\", \"Customer update successfully.\");\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function deleteCustomer(customerId: string) {\n   return async (dispatch: DispatchType): Promise<any> => {\n      try {\n         let fromData = {\n            objectId: customerId,\n         };\n         let res = await Parse.Cloud.run(\"deleteCustomer\", fromData);\n         dispatch({\n            type: ActionsTypes.DELETE_CUSTOMER,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\nexport function setDetailsCustomer(data: any) {\n   return async (dispatch: DispatchType): Promise<any> => {\n      dispatch({\n         type: ActionsTypes.SET_DETAILS_CUSTOMER,\n         payload: data,\n      });\n      return data;\n   };\n}\n","// ====================================== Module imports ======================================\nimport React, { useState, useEffect } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Button from \"@atlaskit/button\";\nimport AddIcon from \"@atlaskit/icon/glyph/add\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport DynamicTable from \"@atlaskit/dynamic-table\";\nimport EditIcon from \"@atlaskit/icon/glyph/edit\";\nimport Modal, { ModalTransition } from \"@atlaskit/modal-dialog\";\n\n// ====================================== File imports ======================================\nimport { Props } from \"./types\";\nimport { Breadcrumb, ScreenLoader, DeleteButton } from \"../../components\";\nimport { getCustomers, deleteCustomer, setDetailsCustomer } from \"../../redux/actions/CustomerActions\";\nimport AppState from \"../../redux/types\";\nimport { Customer } from \"../../redux/types/CustomerTypes\";\n\nconst breadcrumbItems = [\n   { path: \"/\", name: \"Dashboard\" },\n   { path: \"/customer\", name: \"Customers\" },\n];\n\nconst CustomerScreen = (props: Props) => {\n   const { customers, deleteCustomer } = props;\n   const [deleteCustomerData, setDeleteCustomerData] = useState<Customer | undefined>(undefined);\n   const [loading, setLoading] = useState<boolean>(true);\n   const [rows, setRows] = useState<any>([]);\n   const [isDeleting, setisDeleting] = useState(false);\n\n   const close = () => setDeleteCustomerData(undefined);\n   const handleDelete = async () => {\n      setisDeleting(true);\n      await deleteCustomer(deleteCustomerData?.objectId);\n      setDeleteCustomerData(undefined);\n      setisDeleting(false);\n   };\n\n   const focus = async () => {\n      await props.getCustomers();\n      setLoading(false);\n   };\n\n   useEffect(() => {\n      focus();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   const { customerPermission, setDetailsCustomer } = props;\n\n   useEffect(() => {\n      let createRows: Array<object> = customers?.map((customer: Customer) => ({\n         key: `row${customer.objectId}`,\n         cells: [\n            {\n               key: `cell${customer.objectId}${customer.name}`,\n               content: (\n                  <Button\n                     appearance=\"link\"\n                     onClick={async () => {\n                        await setDetailsCustomer(customer);\n                        props.history.push(`/customer/details/${customer.objectId}`);\n                     }}\n                  >\n                     {customer.name}\n                  </Button>\n               ),\n            },\n            {\n               key: `cell${customer.objectId}${customer.contact.name}`,\n               content: <div>{customer.contact.name}</div>,\n            },\n            {\n               key: `cell${customer.objectId}${customer.contact.phone}`,\n               content: <div>{customer.contact.phone}</div>,\n            },\n            {\n               key: `cell${customer.objectId}${customer.contact.email}`,\n               content: <div>{customer.contact.email}</div>,\n            },\n            {\n               key: `cell${customer.objectId}${customer.contact.email}`,\n               content: (\n                  <div>\n                     {customer.address.city}, {customer.address.state}{\" \"}\n                  </div>\n               ),\n            },\n            {\n               key: `cell${customer.objectId}-action`,\n               content: customerPermission.write && (\n                  <div style={{ display: \"flex\" }}>\n                     <Button\n                        iconBefore={<EditIcon label=\"Edit icon\" size=\"small\" />}\n                        appearance=\"link\"\n                        onClick={() => props.history.push(`/customer/edit/${customer.objectId}`)}\n                     >\n                        Edit\n                     </Button>\n                     <DeleteButton onClick={() => setDeleteCustomerData(customer)} />\n                  </div>\n               ),\n            },\n         ],\n      }));\n\n      setRows(createRows);\n   }, [customers, customerPermission.write, props.history, setDetailsCustomer]);\n\n   const head: any = {\n      cells: [\n         {\n            key: \"name\",\n            content: \"Name\",\n            isSortable: true,\n            shouldTruncate: false,\n         },\n         {\n            key: \"person\",\n            content: \"Person\",\n            isSortable: false,\n            shouldTruncate: true,\n         },\n         {\n            key: \"phone\",\n            content: \"Phone\",\n            isSortable: false,\n            shouldTruncate: false,\n         },\n         {\n            key: \"email\",\n            content: \"Email\",\n            isSortable: false,\n            shouldTruncate: true,\n         },\n         {\n            key: \"address\",\n            content: \"Address\",\n            isSortable: false,\n            shouldTruncate: true,\n         },\n         {\n            key: \"action\",\n            content: \"\",\n            width: customerPermission.write ? 17 : 1,\n            isSortable: false,\n            shouldTruncate: false,\n         },\n      ],\n   };\n\n   return loading ? (\n      <ScreenLoader />\n   ) : (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb\n                  items={breadcrumbItems}\n                  screen=\"Customers\"\n                  right={\n                     customerPermission.write && (\n                        <Button\n                           iconBefore={<AddIcon label=\"Add icon\" size=\"small\" />}\n                           type=\"submit\"\n                           style={{ height: 38, marginLeft: 10, marginTop: 9 }}\n                           appearance=\"primary\"\n                           onClick={() => props.history.push(\"/customer/add\")}\n                        >\n                           Add customer\n                        </Button>\n                     )\n                  }\n               />\n            </GridColumn>\n            <GridColumn medium={12}>\n               <DynamicTable\n                  head={head}\n                  rows={rows}\n                  rowsPerPage={16}\n                  defaultPage={1}\n                  isFixedSize\n                  isLoading={loading}\n                  defaultSortKey=\"name\"\n                  defaultSortOrder=\"ASC\"\n                  onSort={() => console.log(\"onSort\")}\n                  onSetPage={() => console.log(\"onSetPage\")}\n               />\n            </GridColumn>\n         </Grid>\n         <ModalTransition>\n            {deleteCustomerData && (\n               <Modal\n                  actions={[\n                     { text: \"Delete\", onClick: handleDelete, isLoading: isDeleting, appearance: \"danger\" },\n                     { text: \"Cancle\", onClick: close },\n                  ]}\n                  onClose={close}\n                  heading=\"Delete\"\n               >\n                  Are you sure you want to delete <strong>{deleteCustomerData.name}</strong> ?\n               </Modal>\n            )}\n         </ModalTransition>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   customerPermission: state.user.user.role.permission.customer,\n   customers: state.customer.customers,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ getCustomers, deleteCustomer, setDetailsCustomer }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerScreen);\n","// ====================================== Module imports ======================================\nimport React, { Fragment, useState } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Form, { Field, ErrorMessage } from \"@atlaskit/form\";\nimport Button from \"@atlaskit/button\";\nimport Textfield from \"@atlaskit/textfield\";\nimport Select from \"@atlaskit/select\";\n\n// ====================================== File imports ======================================\nimport PhoneCodeList from \"../../../constants/phone-code.json\";\nimport StatesAndDistricts from \"../../../constants/states-and-districts.json\";\nimport { AddCustomerProps } from \"./types\";\n\nconst AddCustomerForm = (props: AddCustomerProps) => {\n   const { customer, edit } = props;\n   console.log(customer);\n\n   var defaultState = StatesAndDistricts.states.find((item) => item.state === \"Andhra Pradesh\");\n   var defaultCity = defaultState ? defaultState.districts.map((item) => ({ label: item, value: item })) : [];\n   const [cityOptions, setCityOptions]: any = useState(defaultCity);\n\n   const statesOption = StatesAndDistricts.states.map((item) => ({ label: item.state, value: item.state }));\n\n   const setCityOption = (state: any): any => {\n      var selectedState = StatesAndDistricts.states.find((item) => item.state === state.value);\n      var citys = selectedState && selectedState.districts ? selectedState.districts.map((item) => ({ label: item, value: item })) : [];\n      setCityOptions(citys);\n   };\n\n   const phoneCode = edit ? customer?.contact?.phone?.split(\"+\")[1]?.split(\"-\")?.[0] : undefined;\n   const phoneNo = edit ? customer?.contact?.phone?.split(\"+\")[1]?.split(\"-\")?.[1] : undefined;\n   const phoneCodeOption = edit ? PhoneCodeList.find((item) => item.value.toString() === phoneCode) : undefined;\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Form\n                  onSubmit={async (userData: any) => {\n                     try {\n                        await props.onSubmit(userData);\n                        props.onBack();\n                     } catch (err) {\n                        console.log(err);\n                     }\n                  }}\n               >\n                  {({ formProps, submitting }: any) => (\n                     <form {...formProps}>\n                        <Field label=\"Customer name\" isRequired name=\"name\" defaultValue={edit ? customer?.name : undefined}>\n                           {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                        </Field>\n\n                        <Field\n                           label=\"Contact person name\"\n                           isRequired\n                           name=\"personName\"\n                           defaultValue={edit ? customer?.contact?.name : undefined}\n                        >\n                           {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                        </Field>\n\n                        <Field\n                           label=\"Email\"\n                           isRequired\n                           name=\"email\"\n                           defaultValue={edit ? customer?.contact?.email : undefined}\n                           validate={(value) => {\n                              if (!value) {\n                                 return;\n                              }\n\n                              var mailformat = /\\S+@\\S+\\.\\S+/;\n\n                              if (!value.match(mailformat)) {\n                                 return \"INVALID_EMAIL\";\n                              }\n                           }}\n                        >\n                           {({ fieldProps, error }: any) => (\n                              <Fragment>\n                                 <Textfield {...fieldProps} />\n                                 {error === \"INVALID_EMAIL\" && <ErrorMessage>Please enter valid email address.</ErrorMessage>}\n                              </Fragment>\n                           )}\n                        </Field>\n\n                        <Grid>\n                           <GridColumn medium={3}>\n                              <Field\n                                 label=\"Country code\"\n                                 isRequired\n                                 name=\"countryCode\"\n                                 defaultValue={edit ? phoneCodeOption : { label: \"+91 India\", value: 91 }}\n                              >\n                                 {({ fieldProps }: any) => <Select {...fieldProps} options={PhoneCodeList} placeholder=\"Country code\" />}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={9}>\n                              <Field label=\"Phone\" isRequired name=\"phone\" defaultValue={phoneNo}>\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} maxLength={10} />}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n\n                        <Field label=\"Address line 1\" isRequired name=\"line1\" defaultValue={edit ? customer?.address?.line1 : undefined}>\n                           {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                        </Field>\n\n                        <Field label=\"Address line 2\" isRequired name=\"line2\" defaultValue={edit ? customer?.address?.line2 : undefined}>\n                           {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                        </Field>\n\n                        <Grid>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"State\"\n                                 isRequired\n                                 name=\"state\"\n                                 defaultValue={customer ? { label: customer?.address?.state, value: customer?.address?.state } : undefined}\n                                 validate={(value: any) => setCityOption(value)}\n                              >\n                                 {({ fieldProps }: any) => <Select {...fieldProps} options={statesOption} placeholder=\"Select state\" />}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"City\"\n                                 isRequired\n                                 name=\"city\"\n                                 defaultValue={edit ? { label: customer?.address?.city, value: customer?.address?.city } : undefined}\n                              >\n                                 {({ fieldProps }: any) => <Select {...fieldProps} options={cityOptions} placeholder=\"Select city\" />}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field label=\"Zip Code\" isRequired name=\"zip\" defaultValue={edit ? customer?.address?.zip : undefined}>\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n\n                        <Grid>\n                           <GridColumn medium={4}>\n                              <Field label=\"Bank name\" name=\"bankname\" defaultValue={edit ? customer?.bank?.name : undefined}>\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field label=\"Branch\" name=\"branch\" defaultValue={edit ? customer?.bank?.branch : undefined}>\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field label=\"IFSC Code\" name=\"ifsc\" defaultValue={edit ? customer?.bank?.ifsc : undefined}>\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n\n                        <Field label=\"Account name\" name=\"acc_name\" defaultValue={edit ? customer?.bank?.acc_name : undefined}>\n                           {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                        </Field>\n\n                        <Field label=\"Account Number\" name=\"acc_number\" defaultValue={edit ? customer?.bank?.acc_number : undefined}>\n                           {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                        </Field>\n\n                        <Field\n                           label=\"GST Number\"\n                           name=\"gst\"\n                           validate={(value) => {\n                              if (!value) {\n                                 return;\n                              }\n\n                              var gst_format = /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/;\n\n                              if (!value.match(gst_format)) {\n                                 return \"INVALID_GST\";\n                              }\n                           }}\n                           defaultValue=\"24ABCDE1234F2ZF\"\n                        >\n                           {({ fieldProps, error }: any) => (\n                              <Fragment>\n                                 <Textfield {...fieldProps} />\n                                 {error === \"INVALID_GST\" && <ErrorMessage>Please enter valid GST number.</ErrorMessage>}\n                              </Fragment>\n                           )}\n                        </Field>\n\n                        <div style={{ display: \"flex\", justifyContent: \"flex-end\", marginTop: 20, marginBottom: 20 }}>\n                           <Button appearance=\"link\" disabled={submitting} onClick={() => props.onBack()}>\n                              Back\n                           </Button>\n                           <Button type=\"submit\" appearance=\"primary\" isLoading={submitting}>\n                              {edit ? \"Edit customer\" : \"Add customer\"}\n                           </Button>\n                        </div>\n                     </form>\n                  )}\n               </Form>\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nexport default AddCustomerForm;\n","// ====================================== Module imports ======================================\nimport React, { useState, useEffect } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\n// ====================================== File imports ======================================\nimport { Props } from \"./types\";\nimport { Breadcrumb, ScreenLoader } from \"../../../components\";\nimport AddCustomerForm from \"./AddCustomerForm\";\nimport AppState from \"../../../redux/types\";\nimport { Customer } from \"../../../redux/types/CustomerTypes\";\nimport { createCustomers, getCustomer, updateCustomers } from \"../../../redux/actions/CustomerActions\";\n\nconst AddCustomer = (props: Props) => {\n   const { customerId } = props.match.params;\n   const { customer } = props;\n   const [loading, setLoading] = useState(true);\n   const breadcrumbItems = [\n      { path: \"/\", name: \"Dashboard\" },\n      { path: \"/customer\", name: \"Customers\" },\n      { path: `/customer/${customerId ? `edit/${customerId}` : \"add\"}`, name: customerId ? \"Edit customer\" : \"Add customer\" },\n   ];\n\n   const focus = async () => {\n      if (customerId) {\n         await props.getCustomer(customerId);\n      }\n      setLoading(false);\n   };\n\n   console.log(props.customer);\n\n   useEffect(() => {\n      focus();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   const handleSubmit = async (customer: Customer) => {\n      if (customerId) {\n         await props.updateCustomers({ ...customer, objectId: customerId });\n      } else {\n         await props.createCustomers(customer);\n      }\n   };\n\n   const onBack = () => {\n      props.history.goBack();\n   };\n\n   return loading ? (\n      <ScreenLoader />\n   ) : (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb items={breadcrumbItems} screen={customerId ? \"Edit customer\" : \"Add customer\"} />\n            </GridColumn>\n            <GridColumn medium={8}>\n               <AddCustomerForm onSubmit={handleSubmit} onBack={onBack} customer={customer} edit={customerId ? true : false} />\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   customer: state.customer.customer,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ createCustomers, getCustomer, updateCustomers }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCustomer);\n","import { DispatchType } from \"../types/ActionDispatch\";\nimport { TestGroup } from \"../types/TestGroupsTypes\";\nimport AlertBox from \"./Alert\";\nimport ActionsTypes from \".\";\n\nimport Parse from \"parse\";\n\nexport function getTestGroups() {\n   return async (dispatch: DispatchType): Promise<TestGroup[]> => {\n      try {\n         let res = await Parse.Cloud.run(\"getTestGroups\");\n         dispatch({\n            type: ActionsTypes.GET_TEST_GROUPS,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function searchTestGroups(keyword: string) {\n   return async (dispatch: DispatchType): Promise<TestGroup[]> => {\n      try {\n         let res = await Parse.Cloud.run(\"searchTestGroups\", { keyword });\n         dispatch({\n            type: ActionsTypes.SEARCH_TEST_GROUP,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function createTestGroup(request: TestGroup) {\n   return async (dispatch: DispatchType): Promise<TestGroup> => {\n      try {\n         let fromData = {\n            name: request.name,\n            code: request.code,\n            custom_field: request.custom_field,\n         };\n         let res = await Parse.Cloud.run(\"createTestGroup\", fromData);\n         dispatch({\n            type: ActionsTypes.CREATE_TEST_GROUPS,\n            payload: res,\n         });\n         AlertBox(dispatch, \"confirmation\", \"Test group created successfully.\");\n         return res;\n      } catch (error) {\n         AlertBox(dispatch, \"error\", error);\n         return error;\n      }\n   };\n}\n\nexport function getTestGroup(id: string) {\n   return async (dispatch: DispatchType): Promise<TestGroup> => {\n      try {\n         let res = await Parse.Cloud.run(\"getTestGroup\", { objectId: id });\n         dispatch({\n            type: ActionsTypes.GET_TEST_GROUP,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function updateTestGroup(request: TestGroup) {\n   return async (dispatch: DispatchType): Promise<TestGroup> => {\n      try {\n         let fromData = {\n            objectId: request.objectId,\n            name: request.name,\n            code: request.code,\n            custom_field: request.custom_field,\n         };\n         let res = await Parse.Cloud.run(\"updateTestGroup\", fromData);\n         dispatch({\n            type: ActionsTypes.UPDATE_TEST_GROUP,\n            payload: res,\n         });\n         AlertBox(dispatch, \"confirmation\", \"Test group update successfully.\");\n         return res;\n      } catch (error) {\n         AlertBox(dispatch, \"error\", error);\n         return error;\n      }\n   };\n}\n\nexport function deleteTestGroup(objectId: string) {\n   return async (dispatch: DispatchType): Promise<TestGroup[]> => {\n      try {\n         let fromData = {\n            objectId: objectId,\n         };\n         let res = await Parse.Cloud.run(\"deleteTestGroup\", fromData);\n         dispatch({\n            type: ActionsTypes.DELETE_TEST_GROUP,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}","// ====================================== Module imports ======================================\nimport React, { useEffect, useState } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Button from \"@atlaskit/button\";\nimport AddIcon from \"@atlaskit/icon/glyph/add\";\nimport { connect } from \"react-redux\";\nimport DynamicTable from \"@atlaskit/dynamic-table\";\nimport EditIcon from \"@atlaskit/icon/glyph/edit\";\nimport { bindActionCreators } from \"redux\";\nimport Modal, { ModalTransition } from \"@atlaskit/modal-dialog\";\n\n// ====================================== File imports ======================================\nimport { Breadcrumb, DeleteButton } from \"../../components\";\nimport { Props } from \"./types\";\nimport AppState from \"../../redux/types\";\nimport { getTestGroups, deleteTestGroup } from \"../../redux/actions/TestGroupsActions\";\nimport { TestGroup } from \"../../redux/types/TestGroupsTypes\";\n\nconst breadcrumbItems = [\n   { path: \"/\", name: \"Organization Settings\" },\n   { path: \"/organizationsettings/testGroup\", name: \"Test Group\" },\n];\n\nconst TestGroupPage = (props: Props) => {\n   const [loading, setLoading] = useState(true);\n   const { sampleGroupPermission } = props;\n   const [rows, setRows] = useState<any>([]);\n   const [deleteTestGroupData, setDeleteTestGroupData] = useState<any>(undefined);\n   const [isDeleting, setisDeleting] = useState(false);\n\n   const { getTestGroups, testGroups, deleteTestGroup } = props;\n\n   const close = () => setDeleteTestGroupData(undefined);\n   const handleDelete = async () => {\n      setisDeleting(true);\n      await deleteTestGroup(deleteTestGroupData?.objectId);\n      setDeleteTestGroupData(undefined);\n      setisDeleting(false);\n   };\n\n   const head: any = {\n      cells: [\n         {\n            key: \"code\",\n            width: 15,\n            content: \"Code\",\n            isSortable: false,\n            shouldTruncate: true,\n         },\n         {\n            key: \"name\",\n            content: \"Name\",\n            isSortable: true,\n            shouldTruncate: false,\n         },\n         {\n            key: \"extra_fields\",\n            content: \"Extra fields\",\n            isSortable: false,\n            shouldTruncate: true,\n         },\n         {\n            key: \"action\",\n            content: \"\",\n            width: sampleGroupPermission.write ? 17 : 1,\n            isSortable: false,\n            shouldTruncate: false,\n         },\n      ],\n   };\n\n   useEffect(() => {\n      const createRows: any = testGroups?.map((testGroup: TestGroup) => ({\n         key: `row`,\n         cells: [\n            {\n               key: `cell-code-${testGroup.objectId}`,\n               content: <div>{testGroup.code}</div>,\n            },\n            {\n               key: `cell-name-${testGroup.objectId}`,\n               content: <div style={{ height: 34, display: \"flex\", alignItems: \"center\" }}>{testGroup.name}</div>,\n            },\n\n            {\n               key: `cell-custome-fields-${testGroup.objectId}`,\n               content: <div>{testGroup?.custom_field?.length > 0 ? testGroup.custom_field?.toString() : \"-\"}</div>,\n            },\n            {\n               key: `cell`,\n               content: sampleGroupPermission.write && (\n                  <div style={{ display: \"flex\" }}>\n                     <Button\n                        iconBefore={<EditIcon label=\"Edit icon\" size=\"small\" />}\n                        appearance=\"link\"\n                        onClick={() => props.history.push(`/organizationsettings/testgroup/edit/${testGroup.objectId}`)}\n                     >\n                        Edit\n                     </Button>\n                     <DeleteButton onClick={() => setDeleteTestGroupData(testGroup)} />\n                  </div>\n               ),\n            },\n         ],\n      }));\n\n      setRows(createRows);\n   }, [testGroups, props.history, sampleGroupPermission]);\n\n   const focus = async () => {\n      await getTestGroups();\n      setLoading(false);\n   };\n\n   useEffect(() => {\n      focus();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb\n                  items={breadcrumbItems}\n                  screen=\"Test Group\"\n                  right={\n                     sampleGroupPermission.write && (\n                        <Button\n                           iconBefore={<AddIcon label=\"Add icon\" size=\"small\" />}\n                           type=\"submit\"\n                           style={{ height: 38, marginLeft: 10, marginTop: 9 }}\n                           appearance=\"primary\"\n                           onClick={() => props.history.push(\"/organizationsettings/testgroup/add\")}\n                        >\n                           Add test group\n                        </Button>\n                     )\n                  }\n               />\n            </GridColumn>\n            <GridColumn medium={12}>\n               <DynamicTable\n                  head={head}\n                  rows={rows}\n                  rowsPerPage={10}\n                  defaultPage={1}\n                  isFixedSize\n                  isLoading={loading}\n                  defaultSortKey=\"name\"\n                  defaultSortOrder=\"ASC\"\n                  onSort={() => console.log(\"onSort\")}\n                  onSetPage={() => console.log(\"onSetPage\")}\n               />\n            </GridColumn>\n         </Grid>\n         <ModalTransition>\n            {deleteTestGroupData && (\n               <Modal\n                  actions={[\n                     { text: \"Delete\", onClick: handleDelete, isLoading: isDeleting, appearance: \"danger\" },\n                     { text: \"Cancle\", onClick: close },\n                  ]}\n                  onClose={close}\n                  heading=\"Delete\"\n               >\n                  Are you sure you want to delete <strong>{deleteTestGroupData.name}</strong> ?\n               </Modal>\n            )}\n         </ModalTransition>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   sampleGroupPermission: state.user.user.role.permission.samples_group,\n   testGroups: state.testGroup.testGroups,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ getTestGroups, deleteTestGroup }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TestGroupPage);\n","// ====================================== Module imports ======================================\nimport React, { useState } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Form, { Field, ErrorMessage } from \"@atlaskit/form\";\nimport AppState from \"../../../redux/types\";\nimport { connect } from \"react-redux\";\nimport Button from \"@atlaskit/button\";\nimport Textfield from \"@atlaskit/textfield\";\n\n// ====================================== File imports ======================================\nimport { AddTestGroupFormProps } from \"./types\";\n\nconst AddTestGroupForm = (props: AddTestGroupFormProps) => {\n   const { editData, edit } = props;\n   const [customeField, setCustomeField] = useState(edit && editData ? editData.custom_field : [\"\"]);\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Form\n                  onSubmit={async (data: any) => {\n                     delete data[\"customeField0\"];\n                     delete data[\"label\"];\n                     let customeFieldData = customeField.map((item, id) => {\n                        delete data[`customeField${id}`];\n                        return item ? item : undefined;\n                     });\n\n                     customeFieldData = customeFieldData.filter((item) => item !== undefined);\n\n                     try {\n                        await props.onSubmit({ ...data, custom_field: customeFieldData });\n                        props.onBack();\n                     } catch (err) {\n                        console.log(err);\n                     }\n                  }}\n               >\n                  {({ formProps, submitting }: any) => (\n                     <form {...formProps}>\n                        <Grid>\n                           <GridColumn medium={7}>\n                              <Field label=\"Name\" isRequired name=\"name\" defaultValue={edit && editData ? editData.name : \"\"}>\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={5}>\n                              <Field\n                                 label=\"Code\"\n                                 isRequired\n                                 name=\"code\"\n                                 validate={(value) => {\n                                    if (!value) {\n                                       return;\n                                    }\n\n                                    var code_format = /[A-Z]{3}/;\n\n                                    if (!value.match(code_format)) {\n                                       return \"NOT_BLOCK_LETTERS\";\n                                    }\n                                 }}\n                                 defaultValue={edit && editData ? editData.code : \"\"}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <React.Fragment>\n                                       <Textfield {...fieldProps} maxLength={3} />\n                                       {error === \"NOT_BLOCK_LETTERS\" && <ErrorMessage>Code should be in block letter.</ErrorMessage>}\n                                    </React.Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n\n                        <Field name=\"label\" label=\"Custom field\">\n                           {() => <div />}\n                        </Field>\n\n                        {customeField.map((item, index) => (\n                           <Grid>\n                              <GridColumn medium={10} css={{ background: \"red\" }}>\n                                 <Field name={`customeField${index}`}>\n                                    {({ fieldProps }: any) => (\n                                       <Textfield\n                                          {...fieldProps}\n                                          onChange={(e: any) => {\n                                             let updateFieldList: any = customeField.map((data, id) =>\n                                                id === index ? e.target.value : data\n                                             );\n                                             setCustomeField(updateFieldList);\n                                          }}\n                                          value={item}\n                                       />\n                                    )}\n                                 </Field>\n                              </GridColumn>\n                              <GridColumn medium={2} css={{ background: \"red\" }}>\n                                 <Button\n                                    isDisabled={!item || submitting}\n                                    appearance=\"subtle\"\n                                    onClick={() => {\n                                       let updateCustomeField = customeField.filter((data, id) => id !== index);\n                                       setCustomeField(updateCustomeField);\n                                    }}\n                                    shouldFitContainer\n                                    style={{ height: 40, marginTop: 8 }}\n                                 >\n                                    Remove\n                                 </Button>\n                              </GridColumn>\n                           </Grid>\n                        ))}\n                        <div style={{ display: \"flex\", justifyContent: \"flex-end\", marginTop: 5 }}>\n                           <Button appearance=\"link\" disabled={submitting} onClick={() => setCustomeField([...customeField, \"\"])}>\n                              Add more customer field\n                           </Button>\n                        </div>\n\n                        <div style={{ display: \"flex\", justifyContent: \"flex-end\", marginTop: 20 }}>\n                           <Button appearance=\"link\" disabled={submitting} onClick={() => props.onBack()}>\n                              Back\n                           </Button>\n                           <Button type=\"submit\" appearance=\"primary\" isLoading={submitting}>\n                              {edit ? \"Edit test group\" : \"Add test group \"}\n                           </Button>\n                        </div>\n                     </form>\n                  )}\n               </Form>\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   sampleGroupPermission: state.user.user.role.permission.samples_group,\n});\n\nexport default connect(mapStateToProps)(AddTestGroupForm);\n","// ====================================== Module imports ======================================\nimport React, { useState, useEffect } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport AppState from \"../../../redux/types\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\n// ====================================== File imports ======================================\nimport { Breadcrumb, ScreenLoader } from \"../../../components\";\nimport AddTestGroupForm from \"./AddTestGroupForm\";\nimport { Props } from \"./types\";\nimport { createTestGroup, getTestGroup, updateTestGroup } from \"../../../redux/actions/TestGroupsActions\";\nimport { TestGroup } from \"../../../redux/types/TestGroupsTypes\";\n\nconst AddTestGroup = (props: Props) => {\n   const { groupId } = props.match.params;\n   const [loading, setLoading] = useState(true);\n\n   const breadcrumbItems = [\n      { path: \"/\", name: \"Organization Settings\" },\n      { path: \"/organizationsettings/testgroup\", name: \"Test Group\" },\n      { path: `/organizationsettings/testgroup/${groupId ? `edit/${groupId}` : \"add\"}`, name: groupId ? \"Edit\" : \"Add\" },\n   ];\n\n   const onBack = () => {\n      props.history.goBack();\n   };\n\n   const onSubmit = async (data: TestGroup) => {\n      try {\n         if (groupId && props.testGroup) {\n            await props.updateTestGroup({ ...data, objectId: props.testGroup.objectId });\n         } else {\n            await props.createTestGroup(data);\n         }\n      } catch (error) {\n         console.log(error);\n      }\n   };\n\n   const focus = async () => {\n      if (groupId) {\n         await props.getTestGroup(groupId);\n      }\n      setLoading(false);\n   };\n\n   useEffect(() => {\n      focus();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb items={breadcrumbItems} screen={groupId ? \"Edit Test Group\" : \"Add Test Group\"} />\n            </GridColumn>\n            <GridColumn medium={8}>\n               {loading ? (\n                  <ScreenLoader />\n               ) : (\n                  <AddTestGroupForm onBack={onBack} onSubmit={onSubmit} edit={groupId ? true : false} editData={props.testGroup} />\n               )}\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   sampleGroupPermission: state.user.user.role.permission.samples_group,\n   testGroup: state.testGroup.testGroup,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ createTestGroup, getTestGroup, updateTestGroup }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTestGroup);\n","import { DispatchType } from \"../types/ActionDispatch\";\nimport { Parameter } from \"../types/ParameterTypes\";\nimport AlertBox from \"./Alert\";\nimport ActionsTypes from \".\";\n\nimport Parse from \"parse\";\n\nexport function getParameters() {\n   return async (dispatch: DispatchType): Promise<Parameter[]> => {\n      try {\n         let res = await Parse.Cloud.run(\"getParameters\");\n         let parameters = res.map((pamameter: any) => ({\n            ...pamameter,\n            department: pamameter.department.toJSON(),\n         }));\n         dispatch({\n            type: ActionsTypes.GET_PARAMETERS,\n            payload: parameters,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function getParameter(objectId: string) {\n   return async (dispatch: DispatchType): Promise<Parameter> => {\n      try {\n         let res = await Parse.Cloud.run(\"getParameter\", { objectId });\n         let parameter = {\n            ...res,\n            department: res.department.toJSON(),\n         };\n         dispatch({\n            type: ActionsTypes.GET_PARAMETER,\n            payload: parameter,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function createParameter(request: Parameter) {\n   return async (dispatch: DispatchType): Promise<Parameter> => {\n      try {\n         let fromData = {\n            name: request.name,\n            unit: request.unit,\n            method: request.method,\n            department: request.department,\n         };\n         let res = await Parse.Cloud.run(\"createParameter\", fromData);\n         dispatch({\n            type: ActionsTypes.CREATE_PARAMETER,\n            payload: res,\n         });\n         AlertBox(dispatch, \"confirmation\", \"Parameter created successfully.\");\n         return res;\n      } catch (error) {\n         AlertBox(dispatch, \"error\", error);\n         return error;\n      }\n   };\n}\n\nexport function updateParameter(request: Parameter) {\n   return async (dispatch: DispatchType): Promise<Parameter> => {\n      try {\n         let fromData = {\n            objectId: request.objectId,\n            name: request.name,\n            unit: request.unit,\n            method: request.method,\n            department: request.department,\n         };\n         let res = await Parse.Cloud.run(\"updateParameter\", fromData);\n         dispatch({\n            type: ActionsTypes.UPDATE_PARAMETER,\n            payload: res,\n         });\n         AlertBox(dispatch, \"confirmation\", \"Parameter updated successfully.\");\n         return res;\n      } catch (error) {\n         AlertBox(dispatch, \"error\", error);\n         return error;\n      }\n   };\n}\n\nexport function searchParameters(keyword: string) {\n   return async (dispatch: DispatchType): Promise<Parameter[]> => {\n      try {\n         let res = await Parse.Cloud.run(\"searchParameters\", { keyword });\n         let parameters = res.map((pamameter: any) => ({\n            ...pamameter,\n            department: pamameter.department.toJSON(),\n         }));\n         dispatch({\n            type: ActionsTypes.SEARCH_PARAMETERS,\n            payload: parameters,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function deleteParameter(objectId: string) {\n   return async (dispatch: DispatchType): Promise<Parameter> => {\n      try {\n         let res = await Parse.Cloud.run(\"deleteParameter\", { objectId });\n         dispatch({\n            type: ActionsTypes.DELETE_PATAMETER,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n","// ====================================== Module imports ======================================\nimport React, { useEffect, useState } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Button from \"@atlaskit/button\";\nimport AddIcon from \"@atlaskit/icon/glyph/add\";\nimport { connect } from \"react-redux\";\nimport DynamicTable from \"@atlaskit/dynamic-table\";\nimport EditIcon from \"@atlaskit/icon/glyph/edit\";\nimport { bindActionCreators } from \"redux\";\nimport Modal, { ModalTransition } from \"@atlaskit/modal-dialog\";\n\n// ====================================== File imports ======================================\nimport { Breadcrumb, DeleteButton } from \"../../components\";\nimport AppState from \"../../redux/types\";\nimport { Props } from \"./types\";\nimport { Parameter } from \"../../redux/types/ParameterTypes\";\nimport { getParameters, deleteParameter } from \"../../redux/actions/ParameterActions\";\n\nconst breadcrumbItems = [\n   { path: \"/\", name: \"Organization Settings\" },\n   { path: \"/organizationsettings/parameter\", name: \"Parameters\" },\n];\n\nconst ParameterPage = (props: Props) => {\n   const { sampleParameterPermission, getParameters, parameters, deleteParameter } = props;\n   const [loading, setLoading] = useState(true);\n   const [rows, setRows] = useState([]);\n   const [deleteParameterData, setDeleteParameterData] = useState<any>(undefined);\n   const [isDeleting, setisDeleting] = useState(false);\n\n   const close = () => setDeleteParameterData(undefined);\n   const handleDelete = async () => {\n      setisDeleting(true);\n      await deleteParameter(deleteParameterData?.objectId);\n      setDeleteParameterData(undefined);\n      setisDeleting(false);\n   };\n\n   const head: any = {\n      cells: [\n         {\n            key: \"name\",\n            content: \"Name\",\n            isSortable: true,\n            shouldTruncate: true,\n         },\n         {\n            key: \"unit\",\n            content: \"Result unit\",\n            isSortable: false,\n            shouldTruncate: false,\n         },\n         {\n            key: \"method\",\n            content: \"Method\",\n            isSortable: false,\n            shouldTruncate: true,\n         },\n         {\n            key: \"department\",\n            content: \"Department\",\n            isSortable: false,\n            shouldTruncate: true,\n         },\n         {\n            key: \"action\",\n            content: \"\",\n            width: sampleParameterPermission.write ? 17 : 1,\n            isSortable: false,\n            shouldTruncate: false,\n         },\n      ],\n   };\n\n   useEffect(() => {\n      const createRows: any = parameters?.map((parameter: Parameter) => ({\n         key: `row`,\n         cells: [\n            {\n               key: `cell-parameter-name-${parameter.objectId}`,\n               content: <div style={{ height: 34, display: \"flex\", alignItems: \"center\" }}>{parameter.name}</div>,\n            },\n            {\n               key: `cell-parameter-unit-${parameter.objectId}`,\n               content: <div>{parameter.unit}</div>,\n            },\n            {\n               key: `cell-parameter-method-${parameter.objectId}`,\n               content: <div>{parameter.method}</div>,\n            },\n            {\n               key: `cellle.department`,\n               content: <div>{parameter.department.name}</div>,\n            },\n            {\n               key: `cell`,\n               content: sampleParameterPermission.write && (\n                  <div style={{ display: \"flex\" }}>\n                     <Button\n                        iconBefore={<EditIcon label=\"Edit icon\" size=\"small\" />}\n                        appearance=\"link\"\n                        onClick={() => props.history.push(`/organizationsettings/parameter/edit/${parameter.objectId}`)}\n                     >\n                        Edit\n                     </Button>\n                     <DeleteButton onClick={() => setDeleteParameterData(parameter)} />\n                  </div>\n               ),\n            },\n         ],\n      }));\n\n      setRows(createRows);\n   }, [parameters, props.history, sampleParameterPermission]);\n\n   const focus = async () => {\n      await getParameters();\n      setLoading(false);\n   };\n\n   useEffect(() => {\n      focus();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb\n                  items={breadcrumbItems}\n                  screen=\"Parameters\"\n                  right={\n                     sampleParameterPermission.write && (\n                        <Button\n                           iconBefore={<AddIcon label=\"Add icon\" size=\"small\" />}\n                           type=\"submit\"\n                           style={{ height: 38, marginLeft: 10, marginTop: 9 }}\n                           appearance=\"primary\"\n                           onClick={() => props.history.push(\"/organizationsettings/parameter/add\")}\n                        >\n                           Add parameter\n                        </Button>\n                     )\n                  }\n               />\n            </GridColumn>\n            <GridColumn medium={12}>\n               <DynamicTable\n                  head={head}\n                  rows={rows}\n                  rowsPerPage={10}\n                  defaultPage={1}\n                  isFixedSize\n                  isLoading={loading}\n                  defaultSortKey=\"name\"\n                  defaultSortOrder=\"ASC\"\n                  onSort={() => console.log(\"onSort\")}\n                  onSetPage={() => console.log(\"onSetPage\")}\n               />\n            </GridColumn>\n         </Grid>\n         <ModalTransition>\n            {deleteParameterData && (\n               <Modal\n                  actions={[\n                     { text: \"Delete\", onClick: handleDelete, isLoading: isDeleting, appearance: \"danger\" },\n                     { text: \"Cancle\", onClick: close },\n                  ]}\n                  onClose={close}\n                  heading=\"Delete\"\n               >\n                  Are you sure you want to delete <strong>{deleteParameterData.name}</strong> ?\n               </Modal>\n            )}\n         </ModalTransition>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   sampleParameterPermission: state.user.user.role.permission.samples_parameter,\n   parameters: state.parameter.parameters,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ getParameters, deleteParameter }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ParameterPage);\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Form, { Field } from \"@atlaskit/form\";\nimport Button from \"@atlaskit/button\";\nimport Textfield from \"@atlaskit/textfield\";\nimport Select from \"@atlaskit/select\";\n\n// ====================================== File imports ======================================\nimport { AddParameterFormProps } from \"./types\";\n\nconst AddSampleGroup = (props: AddParameterFormProps) => {\n   const { edit, editData } = props;\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Form\n                  onSubmit={async (data: any) => {\n                     try {\n                        await props.onSubmit({ ...data, department: data.department.value });\n                        props.onBack();\n                     } catch (err) {\n                        console.log(err);\n                     }\n                  }}\n               >\n                  {({ formProps, submitting }: any) => (\n                     <form {...formProps}>\n                        <Grid>\n                           <GridColumn medium={8}>\n                              <Field label=\"Name\" isRequired name=\"name\" defaultValue={edit && editData ? editData.name : undefined}>\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field label=\"Unit\" isRequired name=\"unit\" defaultValue={edit && editData ? editData.unit : undefined}>\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n                        <Field label=\"Method\" isRequired name=\"method\" defaultValue={edit && editData ? editData.method : undefined}>\n                           {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                        </Field>\n                        <Field\n                           label=\"Department\"\n                           isRequired\n                           name=\"department\"\n                           defaultValue={\n                              edit &&\n                              editData &&\n                              props.departmentList.find((department) => department.value === editData.department.objectId)\n                           }\n                        >\n                           {({ fieldProps }: any) => (\n                              <Select {...fieldProps} options={props.departmentList} placeholder=\"Select department\" />\n                           )}\n                        </Field>\n\n                        <div style={{ display: \"flex\", justifyContent: \"flex-end\", marginTop: 20 }}>\n                           <Button appearance=\"link\" disabled={submitting} onClick={() => props.onBack()}>\n                              Back\n                           </Button>\n                           <Button type=\"submit\" appearance=\"primary\" isLoading={submitting}>\n                              {edit ? \"Edit parameter\" : \"Add parameter\"}\n                           </Button>\n                        </div>\n                     </form>\n                  )}\n               </Form>\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nexport default AddSampleGroup;\n","// ====================================== Module imports ======================================\nimport React, { useEffect, useState } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport AppState from \"../../../redux/types\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\n// ====================================== File imports ======================================\nimport { Breadcrumb, ScreenLoader } from \"../../../components\";\nimport AddParameterForm from \"./AddParameterForm\";\nimport { getDepartments } from \"../../../redux/actions/DepartmentActions\";\nimport { Departments } from \"../../../redux/types/DepartmentTypes\";\nimport { getParameter, createParameter, updateParameter } from \"../../../redux/actions/ParameterActions\";\nimport { Props } from \"./types\";\n\nconst AddSampleGroup = (props: Props) => {\n   const { parameterId } = props.match.params;\n   const { departments } = props;\n   const [departmentList, setDepartmentList] = useState([]);\n   const [loading, setLoading] = useState(true);\n\n   const focus = async () => {\n      await props.getDepartments();\n      if (parameterId) {\n         await props.getParameter(parameterId);\n      }\n      setLoading(false);\n   };\n\n   useEffect(() => {\n      focus();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   useEffect(() => {\n      if (departments.length > 0) {\n         const list: any = departments.map((department: Departments) => ({ label: department.name, value: department.objectId }));\n         setDepartmentList(list);\n      }\n   }, [departments]);\n\n   const breadcrumbItems = [\n      { path: \"/\", name: \"Organization Settings\" },\n      { path: \"/organizationsettings/parameter\", name: \"Parameters\" },\n      { path: `/organizationsettings/parameter/${parameterId ? `edit/${parameterId}` : \"add\"}`, name: parameterId ? \"Edit\" : \"Add\" },\n   ];\n\n   const onBack = () => {\n      props.history.goBack();\n   };\n\n   const onSubmit = async (data: any) => {\n      if (parameterId) {\n         await props.updateParameter({ ...data, objectId: parameterId });\n      } else {\n         await props.createParameter(data);\n      }\n   };\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb items={breadcrumbItems} screen={parameterId ? \"Edit Parameter\" : \"Add Parameter\"} />\n            </GridColumn>\n            {loading ? (\n               <ScreenLoader />\n            ) : (\n               <GridColumn medium={8}>\n                  <AddParameterForm\n                     departmentList={departmentList}\n                     onBack={onBack}\n                     onSubmit={onSubmit}\n                     edit={parameterId ? true : false}\n                     editData={props.parameter}\n                  />\n               </GridColumn>\n            )}\n         </Grid>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   sampleGroupPermission: state.user.user.role.permission.samples_group,\n   departments: state.department.departments,\n   parameter: state.parameter.parameter,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ getDepartments, getParameter, createParameter, updateParameter }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSampleGroup);\n","import { DispatchType } from \"../types/ActionDispatch\";\nimport { SampleGroup } from \"../types/SampleGroupTypes\";\nimport AlertBox from \"./Alert\";\nimport ActionsTypes from \".\";\n\nimport Parse from \"parse\";\n\nexport function getSampleGroups() {\n   return async (dispatch: DispatchType): Promise<SampleGroup[]> => {\n      try {\n         let res = await Parse.Cloud.run(\"getSampleGroups\");\n         let sampleGroups = res.map((sampleGroup: any) => {\n            let parameters = sampleGroup.parameters.map((parameter: any) => ({\n               ...parameter,\n               parameter: parameter.parameter.toJSON(),\n            }));\n            return { ...sampleGroup, parameters };\n         });\n         dispatch({\n            type: ActionsTypes.GET_SAMPLE_GROUPS,\n            payload: sampleGroups,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function createSampleGroup(data: any) {\n   return async (dispatch: DispatchType): Promise<SampleGroup[]> => {\n      try {\n         let fromData = {\n            name: data.name,\n            parameters: data.parameters,\n         };\n         let res = await Parse.Cloud.run(\"createSampleGroup\", fromData);\n\n         dispatch({\n            type: ActionsTypes.CREATE_SAMPLE_GROUP,\n            payload: res,\n         });\n         AlertBox(dispatch, \"confirmation\", \"Test method created successfully.\");\n         return res;\n      } catch (error) {\n         AlertBox(dispatch, \"error\", \"error\");\n         return error;\n      }\n   };\n}\n\nexport function updateSampleGroup(data: any) {\n   return async (dispatch: DispatchType): Promise<SampleGroup[]> => {\n      try {\n         let fromData = {\n            objectId: data.objectId,\n            name: data.name,\n            parameters: data.parameters,\n         };\n         let res = await Parse.Cloud.run(\"updateSampleGroup\", fromData);\n\n         dispatch({\n            type: ActionsTypes.UPDATE_SAMPLE_GROUP,\n            payload: res,\n         });\n         AlertBox(dispatch, \"confirmation\", \"Test method created successfully.\");\n         return res;\n      } catch (error) {\n         AlertBox(dispatch, \"error\", \"error\");\n         return error;\n      }\n   };\n}\n\nexport function getSampleGroup(objectId: string) {\n   return async (dispatch: DispatchType): Promise<SampleGroup[]> => {\n      try {\n         let res = await Parse.Cloud.run(\"getSampleGroup\", { objectId });\n         let parameters = res.parameters.map((parameter: any) => ({ ...parameter, parameter: parameter.parameter.toJSON() }));\n         let updateRes = { ...res, parameters };\n         dispatch({\n            type: ActionsTypes.GET_SAMPLE_GROUP,\n            payload: updateRes,\n         });\n         return res;\n      } catch (error) {\n         AlertBox(dispatch, \"error\", \"error\");\n         return error;\n      }\n   };\n}\n\nexport function searchSampleGroup(keyword: string) {\n   return async (dispatch: DispatchType): Promise<SampleGroup[]> => {\n      try {\n         let res = await Parse.Cloud.run(\"searchSampleGroup\", { keyword });\n         let sampleGroups = res.map((sampleGroup: any) => {\n            let parameters = sampleGroup.parameters.map((parameter: any) => ({\n               ...parameter,\n               parameter: parameter.parameter.toJSON(),\n            }));\n            return { ...sampleGroup, parameters };\n         });\n         dispatch({\n            type: ActionsTypes.SEARCH_SAMPLE_GROUP,\n            payload: sampleGroups,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function deleteSampleGroup(objectId: string) {\n   return async (dispatch: DispatchType): Promise<SampleGroup[]> => {\n      try {\n         let res = await Parse.Cloud.run(\"deleteSampleGroup\", { objectId });\n         dispatch({\n            type: ActionsTypes.DELETE_SAMPLE_GROUP,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         AlertBox(dispatch, \"error\", \"error\");\n         return error;\n      }\n   };\n}\n","// ====================================== Module imports ======================================\nimport React, { useState, useEffect } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Button from \"@atlaskit/button\";\nimport AddIcon from \"@atlaskit/icon/glyph/add\";\nimport { connect } from \"react-redux\";\nimport DynamicTable from \"@atlaskit/dynamic-table\";\nimport EditIcon from \"@atlaskit/icon/glyph/edit\";\nimport { bindActionCreators } from \"redux\";\nimport Lozenge from \"@atlaskit/lozenge\";\nimport Modal, { ModalTransition } from \"@atlaskit/modal-dialog\";\n\n// ====================================== File imports ======================================\nimport { Breadcrumb, DeleteButton } from \"../../components\";\nimport AppState from \"../../redux/types\";\nimport { Props } from \"./types\";\nimport { getSampleGroups, deleteSampleGroup } from \"../../redux/actions/SampleGroupsActions\";\nimport { SampleGroup } from \"../../redux/types/SampleGroupTypes\";\n\nconst breadcrumbItems = [\n   { path: \"/\", name: \"Organization Settings\" },\n   { path: \"/organizationsettings/testmethod\", name: \"Test Method\" },\n];\n\nconst TestMethod = (props: Props) => {\n   const { testMethodPermission, getSampleGroups, sampleGroups, deleteSampleGroup } = props;\n   const [loading, setLoading] = useState(true);\n   const [rows, setRows] = useState([]);\n   const [deleteSampleGroupData, setDeleteSampleGroupData] = useState<any>(undefined);\n   const [isDeleting, setisDeleting] = useState(false);\n\n   const close = () => setDeleteSampleGroupData(undefined);\n   const handleDelete = async () => {\n      setisDeleting(true);\n      await deleteSampleGroup(deleteSampleGroupData?.objectId);\n      setDeleteSampleGroupData(undefined);\n      setisDeleting(false);\n   };\n\n   const head: any = {\n      cells: [\n         {\n            key: \"name\",\n            content: \"Name\",\n            width: \"20\",\n            isSortable: true,\n            shouldTruncate: true,\n         },\n         {\n            key: \"parameters\",\n            content: \"Parameters\",\n            isSortable: false,\n            shouldTruncate: true,\n         },\n         {\n            key: \"action\",\n            content: \"\",\n            width: testMethodPermission.write ? 17 : 1,\n            isSortable: false,\n            shouldTruncate: false,\n         },\n      ],\n   };\n\n   useEffect(() => {\n      const createRows: any = sampleGroups?.map((testMethod: SampleGroup) => ({\n         key: `row`,\n         cells: [\n            {\n               key: `group-name-${testMethod.name}`,\n               content: <div style={{ height: 34, display: \"flex\", alignItems: \"center\" }}>{testMethod.name}</div>,\n            },\n            {\n               key: `parameters`,\n               content: testMethod.parameters?.map((parameter) => (\n                  <span style={{ marginRight: 3 }}>\n                     <Lozenge appearance=\"default\">{parameter.parameter.name}</Lozenge>\n                  </span>\n               )),\n            },\n            {\n               key: `cell`,\n               content: testMethodPermission.write && (\n                  <div style={{ display: \"flex\" }}>\n                     <Button\n                        iconBefore={<EditIcon label=\"Edit icon\" size=\"small\" />}\n                        appearance=\"link\"\n                        onClick={() => props.history.push(`/organizationsettings/testmethod/edit/${testMethod.objectId}`)}\n                     >\n                        Edit\n                     </Button>\n                     <DeleteButton onClick={() => setDeleteSampleGroupData(testMethod)} />\n                  </div>\n               ),\n            },\n         ],\n      }));\n\n      setRows(createRows);\n   }, [sampleGroups, props.history, testMethodPermission]);\n\n   const focus = async () => {\n      await getSampleGroups();\n      setLoading(false);\n   };\n\n   useEffect(() => {\n      focus();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb\n                  items={breadcrumbItems}\n                  screen=\"Test Methods\"\n                  right={\n                     testMethodPermission.write && (\n                        <Button\n                           iconBefore={<AddIcon label=\"Add icon\" size=\"small\" />}\n                           type=\"submit\"\n                           style={{ height: 38, marginLeft: 10, marginTop: 9 }}\n                           appearance=\"primary\"\n                           onClick={() => props.history.push(\"/organizationsettings/testmethod/add\")}\n                        >\n                           Add test method\n                        </Button>\n                     )\n                  }\n               />\n            </GridColumn>\n            <GridColumn medium={12}>\n               <DynamicTable\n                  head={head}\n                  rows={rows}\n                  rowsPerPage={10}\n                  defaultPage={1}\n                  isFixedSize\n                  isLoading={loading}\n                  defaultSortKey=\"name\"\n                  defaultSortOrder=\"ASC\"\n                  onSort={() => console.log(\"onSort\")}\n                  onSetPage={() => console.log(\"onSetPage\")}\n               />\n            </GridColumn>\n         </Grid>\n         <ModalTransition>\n            {deleteSampleGroupData && (\n               <Modal\n                  actions={[\n                     { text: \"Delete\", onClick: handleDelete, isLoading: isDeleting, appearance: \"danger\" },\n                     { text: \"Cancle\", onClick: close },\n                  ]}\n                  onClose={close}\n                  heading=\"Delete\"\n               >\n                  Are you sure you want to delete <strong>{deleteSampleGroupData.name}</strong> ?\n               </Modal>\n            )}\n         </ModalTransition>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   testMethodPermission: state.user.user.role.permission.samples_method,\n   sampleGroups: state.sampleGroup.sampleGroups,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ getSampleGroups, deleteSampleGroup }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TestMethod);\n","// ====================================== Module imports ======================================\nimport React, { useState, Fragment, useEffect } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Form, { Field, HelperMessage } from \"@atlaskit/form\";\nimport Textfield from \"@atlaskit/textfield\";\nimport Select, { OptionType } from \"@atlaskit/select\";\nimport Button from \"@atlaskit/button\";\nimport { Checkbox } from \"@atlaskit/checkbox\";\n\n// ====================================== File imports ======================================\nimport { AddTestMethodFormProps } from \"./types\";\nimport { Divider } from \"../../../components\";\nimport { Parameter } from \"../../../redux/types/ParameterTypes\";\n\nconst AddTestMethod = (props: AddTestMethodFormProps) => {\n   const { searchedParameters, onSearchParameter, edit, editData } = props;\n   const [dropdownOpen, setDropdownOpen] = useState(false);\n   const [searchKeyword, setSearchKeyword] = useState(\"\");\n   const [parameterOptions, setParameterOptions] = useState<any>([]);\n   const [selectedParameters, setSelectedParameters] = useState<any>([]);\n\n   useEffect(() => {\n      onSearchParameter(searchKeyword);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [searchKeyword]);\n\n   useEffect(() => {\n      if (edit) {\n         const parameters = editData.parameters.map((parameter: any) => ({\n            ...parameter,\n            ...parameter.parameter,\n            label: parameter.parameter.name,\n            value: parameter.objectId,\n         }));\n         setSelectedParameters(parameters);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [edit]);\n\n   useEffect(() => {\n      let parametersOption: any = searchedParameters.map((parameter: Parameter) => ({\n         ...parameter,\n         nabl: false,\n         label: parameter.name,\n         value: parameter.objectId,\n      }));\n      setParameterOptions(parametersOption);\n   }, [searchedParameters]);\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Form\n                  onSubmit={async (data: any) => {\n                     let formData = {\n                        name: data.name,\n                        parameters: selectedParameters.map((parameter: any) => ({\n                           parameter: parameter.objectId,\n                           condition_type: parameter.condition_type,\n                           validation: parameter.validation,\n                           method: parameter.method,\n                           nabl: parameter.nabl,\n                           requirement: parameter.requirement,\n                        })),\n                     };\n\n                     try {\n                        await props.onSubmit(formData);\n                        props.onBack();\n                     } catch (err) {\n                        console.log(err);\n                     }\n                  }}\n               >\n                  {({ formProps, submitting }: any) => (\n                     <form {...formProps}>\n                        <Field label=\"Name\" isRequired name=\"name\" defaultValue={edit && editData ? editData.name : \"\"}>\n                           {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                        </Field>\n\n                        <Field label=\"Parameter\" isRequired name=\"parameter\">\n                           {({ fieldProps }: any) => (\n                              <Select\n                                 isSearchable\n                                 isMulti\n                                 {...fieldProps}\n                                 options={parameterOptions}\n                                 onInputChange={(keyword) => setSearchKeyword(keyword)}\n                                 isLoading={false}\n                                 onChange={(options: OptionType) => {\n                                    setSelectedParameters(options);\n                                 }}\n                                 menuIsOpen={dropdownOpen}\n                                 onMenuOpen={() => setDropdownOpen(true)}\n                                 placeholder=\"Search parameter\"\n                                 onBlur={() => setDropdownOpen(false)}\n                                 value={selectedParameters}\n                              />\n                           )}\n                        </Field>\n\n                        {selectedParameters?.map((item: any, idx: number) => (\n                           <React.Fragment>\n                              <Divider />\n                              <div style={{ display: \"flex\", justifyContent: \"space-between\", marginTop: 10, alignItems: \"center\" }}>\n                                 <h4>{`${idx + 1}. ${item.name}`}</h4>\n                                 <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                                    <span>\n                                       <Checkbox\n                                          label=\"NABL Type\"\n                                          onChange={() => {\n                                             let updateSelectedParameters = selectedParameters.map((parameter: any) =>\n                                                parameter.objectId === item.objectId ? { ...parameter, nabl: !item.nabl } : parameter\n                                             );\n                                             setSelectedParameters(updateSelectedParameters);\n                                          }}\n                                          name={`nabl-type-${item.objectId}`}\n                                          isChecked={item.nabl}\n                                       />\n                                    </span>\n                                 </div>\n                              </div>\n\n                              <Grid>\n                                 <GridColumn medium={item.condition_type ? (item.condition_type === \"complies\" ? 12 : 4) : 12}>\n                                    <Field label=\"Validation type\" isRequired name={`type${idx}`}>\n                                       {({ fieldProps }: any) => (\n                                          <Select\n                                             {...fieldProps}\n                                             options={[\n                                                { label: \"Range\", value: \"range\" },\n                                                { label: \"Valid\", value: \"valid\" },\n                                                { label: \"Options\", value: \"options\" },\n                                                { label: \"Complies\", value: \"complies\" },\n                                             ]}\n                                             onChange={(value: { label: string; value: string }) => {\n                                                let validation: any;\n                                                if (value.value === \"range\") {\n                                                   validation = { min: undefined, max: undefined };\n                                                } else if (value.value === \"valid\") {\n                                                   validation = { validResult: undefined, invalidResult: undefined };\n                                                } else if (value.value === \"options\") {\n                                                   validation = { validOptions: undefined, invalidOptions: undefined };\n                                                } else if (value.value === \"complies\") {\n                                                   validation = {};\n                                                }\n                                                let updateSelectedParameters = selectedParameters.map((parameter: any) =>\n                                                   parameter.objectId === item.objectId\n                                                      ? { ...parameter, condition_type: value.value, validation }\n                                                      : parameter\n                                                );\n                                                setSelectedParameters(updateSelectedParameters);\n                                             }}\n                                             placeholder=\"Search validation type\"\n                                             value={{ value: item.condition_type, label: item.condition_type }}\n                                          />\n                                       )}\n                                    </Field>\n                                 </GridColumn>\n                                 {item.condition_type === \"range\" && (\n                                    <Fragment>\n                                       <GridColumn medium={4}>\n                                          <Field label=\"Minimum value\" isRequired name={`min${idx}`}>\n                                             {({ fieldProps }: any) => (\n                                                <Fragment>\n                                                   <Textfield\n                                                      type=\"number\"\n                                                      {...fieldProps}\n                                                      onChange={(e: any) => {\n                                                         let updateSelectedParameters = selectedParameters.map((parameter: any) =>\n                                                            parameter.objectId === item.objectId\n                                                               ? { ...parameter, validation: { ...item.validation, min: e.target.value } }\n                                                               : parameter\n                                                         );\n                                                         setSelectedParameters(updateSelectedParameters);\n                                                      }}\n                                                      value={item.validation.min}\n                                                   />\n                                                </Fragment>\n                                             )}\n                                          </Field>\n                                       </GridColumn>\n                                       <GridColumn medium={4}>\n                                          <Field label=\"Maximum value\" isRequired name={`max${idx}`}>\n                                             {({ fieldProps }: any) => (\n                                                <Textfield\n                                                   type=\"number\"\n                                                   {...fieldProps}\n                                                   onChange={(e: any) => {\n                                                      let updateSelectedParameters = selectedParameters.map((parameter: any) =>\n                                                         parameter.objectId === item.objectId\n                                                            ? { ...parameter, validation: { ...item.validation, max: e.target.value } }\n                                                            : parameter\n                                                      );\n                                                      setSelectedParameters(updateSelectedParameters);\n                                                   }}\n                                                   value={item.validation.max}\n                                                />\n                                             )}\n                                          </Field>\n                                       </GridColumn>\n                                    </Fragment>\n                                 )}\n                                 {item.condition_type === \"valid\" && (\n                                    <Fragment>\n                                       <GridColumn medium={4}>\n                                          <Field label=\"Valid result\" isRequired name={`validResult${idx}`}>\n                                             {({ fieldProps }: any) => (\n                                                <Textfield\n                                                   {...fieldProps}\n                                                   onChange={(e: any) => {\n                                                      let updateSelectedParameters = selectedParameters.map((parameter: any) =>\n                                                         parameter.objectId === item.objectId\n                                                            ? {\n                                                                 ...parameter,\n                                                                 validation: { ...item.validation, validResult: e.target.value },\n                                                              }\n                                                            : parameter\n                                                      );\n                                                      setSelectedParameters(updateSelectedParameters);\n                                                   }}\n                                                   value={item.validation.validResult}\n                                                />\n                                             )}\n                                          </Field>\n                                       </GridColumn>\n                                       <GridColumn medium={4}>\n                                          <Field label=\"Invalid result\" isRequired name={`invalidResult${idx}`}>\n                                             {({ fieldProps }: any) => (\n                                                <Textfield\n                                                   {...fieldProps}\n                                                   onChange={(e: any) => {\n                                                      let updateSelectedParameters = selectedParameters.map((parameter: any) =>\n                                                         parameter.objectId === item.objectId\n                                                            ? {\n                                                                 ...parameter,\n                                                                 validation: { ...item.validation, invalidResult: e.target.value },\n                                                              }\n                                                            : parameter\n                                                      );\n                                                      setSelectedParameters(updateSelectedParameters);\n                                                   }}\n                                                   value={item.validation.invalidResult}\n                                                />\n                                             )}\n                                          </Field>\n                                       </GridColumn>\n                                    </Fragment>\n                                 )}\n                                 {item.condition_type === \"options\" && (\n                                    <Fragment>\n                                       <Fragment>\n                                          <GridColumn medium={4}>\n                                             <Field label=\"Valid options\" isRequired name={`validOption${idx}`}>\n                                                {({ fieldProps }: any) => (\n                                                   <Textfield\n                                                      {...fieldProps}\n                                                      onChange={(e: any) => {\n                                                         let updateSelectedParameters = selectedParameters.map((parameter: any) =>\n                                                            parameter.objectId === item.objectId\n                                                               ? {\n                                                                    ...parameter,\n                                                                    validation: { ...item.validation, validOptions: e.target.value },\n                                                                 }\n                                                               : parameter\n                                                         );\n                                                         setSelectedParameters(updateSelectedParameters);\n                                                      }}\n                                                      value={item.validation.validOptions}\n                                                   />\n                                                )}\n                                             </Field>\n                                          </GridColumn>\n                                          <GridColumn medium={4}>\n                                             <Field label=\"Invalid options\" isRequired name={`invalidOption${idx}`}>\n                                                {({ fieldProps }: any) => (\n                                                   <Textfield\n                                                      {...fieldProps}\n                                                      onChange={(e: any) => {\n                                                         let updateSelectedParameters = selectedParameters.map((parameter: any) =>\n                                                            parameter.objectId === item.objectId\n                                                               ? {\n                                                                    ...parameter,\n                                                                    validation: { ...item.validation, invalidOptions: e.target.value },\n                                                                 }\n                                                               : parameter\n                                                         );\n                                                         setSelectedParameters(updateSelectedParameters);\n                                                      }}\n                                                      value={item.validation.invalidOptions}\n                                                   />\n                                                )}\n                                             </Field>\n                                          </GridColumn>\n                                          <GridColumn medium={4} />\n                                          <GridColumn medium={4}>\n                                             <HelperMessage>Separate your options by comma (,)</HelperMessage>\n                                          </GridColumn>\n                                       </Fragment>\n                                    </Fragment>\n                                 )}\n                              </Grid>\n\n                              <Grid>\n                                 <GridColumn medium={5}>\n                                    <Field label=\"Method\" isRequired name=\"method\" defaultValue={item.method}>\n                                       {({ fieldProps }: any) => (\n                                          <Textfield\n                                             {...fieldProps}\n                                             onChange={(e: any) => {\n                                                let updateSelectedParameters = selectedParameters.map((parameter: any) =>\n                                                   parameter.objectId === item.objectId\n                                                      ? { ...parameter, method: e.target.value }\n                                                      : parameter\n                                                );\n                                                setSelectedParameters(updateSelectedParameters);\n                                             }}\n                                             value={item.method}\n                                          />\n                                       )}\n                                    </Field>\n                                 </GridColumn>\n                                 <GridColumn medium={7}>\n                                    <Field label=\"Requirement\" isRequired name=\"requirement\">\n                                       {({ fieldProps }: any) => (\n                                          <Textfield\n                                             {...fieldProps}\n                                             onChange={(e: any) => {\n                                                let updateSelectedParameters = selectedParameters.map((parameter: any) =>\n                                                   parameter.objectId === item.objectId\n                                                      ? { ...parameter, requirement: e.target.value }\n                                                      : parameter\n                                                );\n                                                setSelectedParameters(updateSelectedParameters);\n                                             }}\n                                             value={item.requirement}\n                                          />\n                                       )}\n                                    </Field>\n                                 </GridColumn>\n                              </Grid>\n                           </React.Fragment>\n                        ))}\n\n                        <div style={{ display: \"flex\", justifyContent: \"flex-end\", marginTop: 20 }}>\n                           <Button appearance=\"link\" disabled={submitting} onClick={() => props.onBack()}>\n                              Back\n                           </Button>\n                           <Button type=\"submit\" appearance=\"primary\" isLoading={submitting}>\n                              {edit ? \"Edit test method\" : \"Add test method\"}\n                           </Button>\n                        </div>\n                     </form>\n                  )}\n               </Form>\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nexport default AddTestMethod;\n","// ====================================== Module imports ======================================\nimport React, { useEffect, useState } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport AppState from \"../../../redux/types\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\n// ====================================== File imports ======================================\nimport { Breadcrumb, ScreenLoader } from \"../../../components\";\nimport AddTestMethodForm from \"./AddTestMethodForm\";\nimport { Props } from \"./types\";\nimport { searchParameters } from \"../../../redux/actions/ParameterActions\";\nimport { createSampleGroup, getSampleGroup, updateSampleGroup } from \"../../../redux/actions/SampleGroupsActions\";\n\nconst AddSampleGroup = (props: Props) => {\n   const { testMethodId } = props.match.params;\n   const [loading, setLoading] = useState(true);\n\n   const breadcrumbItems = [\n      { path: \"/\", name: \"Organization Settings\" },\n      { path: \"/organizationsettings/testmethod\", name: \"Test Method\" },\n      { path: `/organizationsettings/testmethod/${testMethodId ? `edit/${testMethodId}` : \"add\"}`, name: testMethodId ? \"Edit\" : \"Add\" },\n   ];\n\n   const onBack = () => {\n      props.history.goBack();\n   };\n\n   const focus = async () => {\n      if (testMethodId) {\n         await props.getSampleGroup(testMethodId);\n      }\n      setLoading(false);\n   };\n\n   useEffect(() => {\n      focus();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   const onSearchParameter = async (keyword: string) => {\n      await props.searchParameters(keyword);\n   };\n\n   const onSubmit = async (data: any) => {\n      if (testMethodId) {\n         await props.updateSampleGroup({ ...data, objectId: testMethodId });\n      } else {\n         await props.createSampleGroup(data);\n      }\n   };\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb items={breadcrumbItems} screen={testMethodId ? \"Edit Test Method\" : \"Add Test Method\"} />\n            </GridColumn>\n            <GridColumn medium={8}>\n               {loading ? (\n                  <ScreenLoader />\n               ) : (\n                  <AddTestMethodForm\n                     onBack={onBack}\n                     onSubmit={onSubmit}\n                     onSearchParameter={onSearchParameter}\n                     searchedParameters={props.searchedParameters}\n                     edit={testMethodId ? true : false}\n                     editData={props.sampleGroup}\n                  />\n               )}\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   sampleGroupPermission: state.user.user.role.permission.samples_group,\n   searchedParameters: state.parameter.searchedParameters,\n   sampleGroup: state.sampleGroup.sampleGroup,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ searchParameters, createSampleGroup, getSampleGroup, updateSampleGroup }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSampleGroup);\n","import { DispatchType } from \"../types/ActionDispatch\";\nimport { SampleDetails } from \"../types/SampleDetailsTypes\";\nimport AlertBox from \"./Alert\";\nimport ActionsTypes from \".\";\n\nimport Parse from \"parse\";\n\nexport function getSamplesDetails() {\n   return async (dispatch: DispatchType): Promise<SampleDetails[]> => {\n      try {\n         let res = await Parse.Cloud.run(\"getSampleDetails\");\n         dispatch({\n            type: ActionsTypes.GET_SAMPLES_DETAILS,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function searchSamplesDetails(keyword: string) {\n   return async (dispatch: DispatchType): Promise<SampleDetails[]> => {\n      try {\n         let res = await Parse.Cloud.run(\"searchSampleDetails\", { keyword });\n         dispatch({\n            type: ActionsTypes.SEARCH_SAMPLE_DETAILS,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function createSampleDetails(data: SampleDetails) {\n   return async (dispatch: DispatchType): Promise<SampleDetails[]> => {\n      try {\n         let fromData = {\n            name: data.name,\n            genericName: data.genericName,\n            sampleGroups: data.sampleGroups,\n         };\n         let res = await Parse.Cloud.run(\"createSampleDetail\", fromData);\n\n         dispatch({\n            type: ActionsTypes.CREATE_SAMPLE_DETAILS,\n            payload: res,\n         });\n         AlertBox(dispatch, \"confirmation\", \"Sample details add successfully.\");\n         return res;\n      } catch (error) {\n         AlertBox(dispatch, \"error\", \"error\");\n         return error;\n      }\n   };\n}\n\nexport function updateSampleDetails(data: SampleDetails) {\n   return async (dispatch: DispatchType): Promise<SampleDetails[]> => {\n      try {\n         let fromData = {\n            objectId: data.objectId,\n            name: data.name,\n            genericName: data.genericName,\n            sampleGroups: data.sampleGroups,\n         };\n         let res = await Parse.Cloud.run(\"updateSampleDetail\", fromData);\n\n         dispatch({\n            type: ActionsTypes.UPDATE_SAMPLE_DETAILS,\n            payload: res,\n         });\n         AlertBox(dispatch, \"confirmation\", \"Sample details update successfully.\");\n         return res;\n      } catch (error) {\n         AlertBox(dispatch, \"error\", \"error\");\n         return error;\n      }\n   };\n}\n\nexport function getSampleDetails(objectId: string) {\n   return async (dispatch: DispatchType): Promise<SampleDetails[]> => {\n      try {\n         let res = await Parse.Cloud.run(\"getSampleDetail\", { objectId });\n         dispatch({\n            type: ActionsTypes.GET_SAMPLE_DETAILS,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function deleteSampleDetail(objectId: string) {\n   return async (dispatch: DispatchType): Promise<SampleDetails[]> => {\n      try {\n         let res = await Parse.Cloud.run(\"deleteSampleDetail\", { objectId });\n         dispatch({\n            type: ActionsTypes.DELETE_SAMPLE_DETAILS,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n","// ====================================== Module imports ======================================\nimport React, { useEffect, useState } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Button from \"@atlaskit/button\";\nimport AddIcon from \"@atlaskit/icon/glyph/add\";\nimport { connect } from \"react-redux\";\nimport DynamicTable from \"@atlaskit/dynamic-table\";\nimport EditIcon from \"@atlaskit/icon/glyph/edit\";\nimport { bindActionCreators } from \"redux\";\nimport Lozenge from \"@atlaskit/lozenge\";\nimport Modal, { ModalTransition } from \"@atlaskit/modal-dialog\";\n\n// ====================================== File imports ======================================\nimport { Breadcrumb, DeleteButton } from \"../../components\";\nimport AppState from \"../../redux/types\";\nimport { Props } from \"./types\";\nimport { getSamplesDetails, deleteSampleDetail } from \"../../redux/actions/SamplesDetailsActions\";\nimport { SampleDetails } from \"../../redux/types/SampleDetailsTypes\";\n\nconst breadcrumbItems = [\n   { path: \"/\", name: \"Organization Settings\" },\n   { path: \"/organizationsettings/sampledetail\", name: \"Sample Details\" },\n];\n\nconst SampleDetailScreen = (props: Props) => {\n   const { sampleDetailPermission, getSamplesDetails, samplesDetails, deleteSampleDetail } = props;\n   const [loading, setLoading] = useState(true);\n   const [rows, setRows] = useState<any>([]);\n   const [deleteSample, setDeleteSample] = useState<any>(undefined);\n   const [isDeleting, setisDeleting] = useState(false);\n\n   const focus = async () => {\n      await getSamplesDetails();\n      setLoading(false);\n   };\n\n   const close = () => setDeleteSample(undefined);\n   const handleDelete = async () => {\n      setisDeleting(true);\n      await deleteSampleDetail(deleteSample?.objectId);\n      setDeleteSample(undefined);\n      setisDeleting(false);\n   };\n\n   useEffect(() => {\n      focus();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   const head: any = {\n      cells: [\n         {\n            key: \"name\",\n            content: \"Name\",\n            width: \"20\",\n            isSortable: true,\n            shouldTruncate: true,\n         },\n         {\n            key: \"generic_name\",\n            content: \"Generic name\",\n            width: \"20\",\n            isSortable: false,\n            shouldTruncate: false,\n         },\n         {\n            key: \"test_method\",\n            content: \"Test methods\",\n            isSortable: false,\n            shouldTruncate: true,\n         },\n         {\n            key: \"action\",\n            content: \"\",\n            width: sampleDetailPermission.write ? 17 : 1,\n            isSortable: false,\n            shouldTruncate: false,\n         },\n      ],\n   };\n\n   useEffect(() => {\n      const createRows: any = samplesDetails?.map((sampleDetail: SampleDetails) => ({\n         key: `row`,\n         cells: [\n            {\n               key: `cell-name-${sampleDetail.objectId}`,\n               content: <div>{sampleDetail.name}</div>,\n            },\n            {\n               key: `cell-genericName-${sampleDetail.objectId}`,\n               content: <div style={{ height: 34, display: \"flex\", alignItems: \"center\" }}>{sampleDetail.genericName}</div>,\n            },\n\n            {\n               key: `parameters`,\n               content: sampleDetail.sampleGroups?.map((sampleGroup: any) => (\n                  <span style={{ marginRight: 3 }}>\n                     <Lozenge appearance=\"default\">{sampleGroup.name}</Lozenge>\n                  </span>\n               )),\n            },\n            {\n               key: `cell`,\n               content: sampleDetailPermission.write && (\n                  <div style={{ display: \"flex\" }}>\n                     <Button\n                        iconBefore={<EditIcon label=\"Edit icon\" size=\"small\" />}\n                        appearance=\"link\"\n                        onClick={() => props.history.push(`/organizationsettings/sampledetail/edit/${sampleDetail.objectId}`)}\n                     >\n                        Edit\n                     </Button>\n                     <DeleteButton onClick={() => setDeleteSample(sampleDetail)} />\n                  </div>\n               ),\n            },\n         ],\n      }));\n\n      setRows(createRows);\n   }, [samplesDetails, props.history, sampleDetailPermission]);\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb\n                  items={breadcrumbItems}\n                  screen=\"Sample Details\"\n                  right={\n                     sampleDetailPermission.write && (\n                        <Button\n                           iconBefore={<AddIcon label=\"Add icon\" size=\"small\" />}\n                           type=\"submit\"\n                           style={{ height: 38, marginLeft: 10, marginTop: 9 }}\n                           appearance=\"primary\"\n                           onClick={() => props.history.push(\"/organizationsettings/sampledetail/add\")}\n                        >\n                           Add sample detail\n                        </Button>\n                     )\n                  }\n               />\n            </GridColumn>\n            <GridColumn medium={12}>\n               <DynamicTable\n                  head={head}\n                  rows={rows}\n                  rowsPerPage={10}\n                  defaultPage={1}\n                  isFixedSize\n                  isLoading={loading}\n                  defaultSortKey=\"name\"\n                  defaultSortOrder=\"ASC\"\n                  onSort={() => console.log(\"onSort\")}\n                  onSetPage={() => console.log(\"onSetPage\")}\n               />\n            </GridColumn>\n         </Grid>\n         <ModalTransition>\n            {deleteSample && (\n               <Modal\n                  actions={[\n                     { text: \"Delete\", onClick: handleDelete, isLoading: isDeleting, appearance: \"danger\" },\n                     { text: \"Cancle\", onClick: close },\n                  ]}\n                  onClose={close}\n                  heading=\"Delete\"\n               >\n                  Are you sure you want to delete <strong>{deleteSample.name}</strong> ?\n               </Modal>\n            )}\n         </ModalTransition>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   sampleDetailPermission: state.user.user.role.permission.samples_sample,\n   samplesDetails: state.samplesDetails.samplesDetails,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ getSamplesDetails, deleteSampleDetail }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SampleDetailScreen);\n","// ====================================== Module imports ======================================\nimport React, { useState, useEffect } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport AppState from \"../../../redux/types\";\nimport { connect } from \"react-redux\";\nimport Form, { Field } from \"@atlaskit/form\";\nimport Textfield from \"@atlaskit/textfield\";\nimport Select, { OptionProps } from \"@atlaskit/select\";\nimport Button from \"@atlaskit/button\";\n\n// ====================================== File imports ======================================\nimport { AddSampleDetailFormProps } from \"./types\";\nimport { SampleGroup } from \"../../../redux/types/SampleGroupTypes\";\n\nconst AddSampleGroup = (props: AddSampleDetailFormProps) => {\n   const { onSearchSampleGorup, searchedSampleGroup, edit, editData } = props;\n   const [dropdownOpen, setDropdownOpen] = useState(false);\n   const [searchKeyword, setSearchKeyword] = useState(\"\");\n   const [sampleGroupsOptions, setSampleGroupsOptions] = useState<any>([]);\n   const [optionLoading, setOptionLoading] = useState(false);\n   const [selectedSampleGroups, setSelectedSampleGroups] = useState<any>([]);\n\n   const search = async () => {\n      setOptionLoading(true);\n      await onSearchSampleGorup(searchKeyword);\n      setOptionLoading(false);\n   };\n\n   useEffect(() => {\n      search();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [searchKeyword]);\n\n   useEffect(() => {\n      let sampleGroupsOptions: any = searchedSampleGroup?.map((sampleGroup: SampleGroup) => ({\n         label: sampleGroup.name,\n         value: sampleGroup.objectId,\n      }));\n      setSampleGroupsOptions(sampleGroupsOptions);\n   }, [searchedSampleGroup]);\n\n   useEffect(() => {\n      if (edit) {\n         let selectedSampleGroups = editData?.sampleGroups.map((sampleGroup: SampleGroup) => ({\n            label: sampleGroup.name,\n            value: sampleGroup.objectId,\n         }));\n         setSelectedSampleGroups(selectedSampleGroups);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [edit]);\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Form\n                  onSubmit={async (data: any) => {\n                     let sampleGroups = selectedSampleGroups.map((item: any) => item.value);\n                     try {\n                        await props.onSubmit({ ...data, sampleGroups });\n                        props.onBack();\n                     } catch (err) {\n                        console.log(err);\n                     }\n                  }}\n               >\n                  {({ formProps, submitting }: any) => (\n                     <form {...formProps}>\n                        <Grid>\n                           <GridColumn medium={6}>\n                              <Field label=\"Name\" isRequired name=\"name\" defaultValue={edit && editData ? editData.name : \"\"}>\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n                           </GridColumn>\n\n                           <GridColumn medium={6}>\n                              <Field\n                                 label=\"Generic Name\"\n                                 isRequired\n                                 name=\"genericName\"\n                                 defaultValue={edit && editData ? editData.genericName : \"\"}\n                              >\n                                 {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n\n                        <Field label=\"Sample Group\" isRequired name=\"sampleGroups\">\n                           {({ fieldProps }: any) => (\n                              <Select\n                                 isSearchable\n                                 isMulti\n                                 {...fieldProps}\n                                 options={sampleGroupsOptions}\n                                 onInputChange={(keyword) => {\n                                    setSearchKeyword(keyword);\n                                 }}\n                                 isLoading={optionLoading}\n                                 placeholder=\"Search Sample Group\"\n                                 menuIsOpen={dropdownOpen}\n                                 onMenuOpen={() => setDropdownOpen(true)}\n                                 onBlur={() => setDropdownOpen(false)}\n                                 onChange={(values: OptionProps) => setSelectedSampleGroups(values)}\n                                 value={selectedSampleGroups}\n                              />\n                           )}\n                        </Field>\n\n                        <div style={{ display: \"flex\", justifyContent: \"flex-end\", marginTop: 20 }}>\n                           <Button appearance=\"link\" disabled={submitting} onClick={() => props.onBack()}>\n                              Back\n                           </Button>\n                           <Button type=\"submit\" appearance=\"primary\" isLoading={submitting}>\n                              {edit ? \"Edit sample details\" : \"Add sample details\"}\n                           </Button>\n                        </div>\n                     </form>\n                  )}\n               </Form>\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   sampleGroupPermission: state.user.user.role.permission.samples_group,\n});\n\nexport default connect(mapStateToProps)(AddSampleGroup);\n","// ====================================== Module imports ======================================\nimport React, { useEffect, useState } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport AppState from \"../../../redux/types\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\n// ====================================== File imports ======================================\nimport { Breadcrumb, ScreenLoader } from \"../../../components\";\nimport AddSampleDetailForm from \"./AddSampleDetailForm\";\nimport { Props } from \"./types\";\nimport { searchSampleGroup } from \"../../../redux/actions/SampleGroupsActions\";\nimport { createSampleDetails, getSampleDetails, updateSampleDetails } from \"../../../redux/actions/SamplesDetailsActions\";\n\nconst AddSampleDetail = (props: Props) => {\n   const { searchSampleGroup, searchedSampleGroup, createSampleDetails, getSampleDetails, sampleDetails, updateSampleDetails } = props;\n   const { sampleDetailId } = props.match.params;\n   const [loading, setLoading] = useState(true);\n\n   const breadcrumbItems = [\n      { path: \"/\", name: \"Organization Settings\" },\n      { path: \"/organizationsettings/sampledetail\", name: \"Sample Details\" },\n      {\n         path: `/organizationsettings/sampledetail/${sampleDetailId ? `edit/${sampleDetailId}` : \"add\"}`,\n         name: sampleDetailId ? \"Edit\" : \"Add\",\n      },\n   ];\n\n   const onBack = () => {\n      props.history.goBack();\n   };\n\n   const onSubmit = async (data: any) => {\n      if (sampleDetailId) {\n         await updateSampleDetails({ ...data, objectId: sampleDetailId });\n      } else {\n         await createSampleDetails(data);\n      }\n   };\n\n   const onSearchSampleGorup = async (kayword: string) => {\n      await searchSampleGroup(kayword);\n   };\n\n   const focus = async () => {\n      if (sampleDetailId) {\n         await getSampleDetails(sampleDetailId);\n      }\n      setLoading(false);\n   };\n\n   useEffect(() => {\n      focus();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb items={breadcrumbItems} screen={sampleDetailId ? \"Edit Sample Detail\" : \"Add Sample Detail\"} />\n            </GridColumn>\n            <GridColumn medium={8}>\n               {loading ? (\n                  <ScreenLoader />\n               ) : (\n                  <AddSampleDetailForm\n                     onBack={onBack}\n                     onSubmit={onSubmit}\n                     onSearchSampleGorup={onSearchSampleGorup}\n                     searchedSampleGroup={searchedSampleGroup}\n                     edit={sampleDetailId ? true : false}\n                     editData={sampleDetails}\n                  />\n               )}\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   sampleGroupPermission: state.user.user.role.permission.samples_group,\n   searchedSampleGroup: state.sampleGroup.searchSampleGroup,\n   sampleDetails: state.samplesDetails.sampleDetails,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ searchSampleGroup, createSampleDetails, getSampleDetails, updateSampleDetails }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSampleDetail);\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport { typography, colors } from \"@atlaskit/theme\";\n\n// ====================================== File imports ======================================\nimport { DetailsProps } from \"./types\";\nimport { Heading } from \"../../../components\";\n\nconst Details = (props: DetailsProps) => {\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Heading mixin={typography.h500} style={{ marginTop: 10 }}>\n                  {props.customer.name}\n               </Heading>\n               <Grid>\n                  <GridColumn medium={6}>\n                     <div style={{ color: colors.N200 }}>\n                        <div>{props.customer.contact.name}</div>\n                        <div>{props.customer.contact.phone}</div>\n                        <div>{props.customer.contact.email}</div>\n                     </div>\n                  </GridColumn>\n                  <GridColumn medium={6}>\n                     <div style={{ textAlign: \"right\", color: colors.N200 }}>\n                        <div>{props.customer.address.line1}</div>\n                        <div>{props.customer.address.line2}</div>\n                        <div>{props.customer.address.city}, {props.customer.address.state} - {props.customer.address.zip},</div>\n                     </div>\n                  </GridColumn>\n               </Grid>\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nexport default Details;\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport { typography, colors } from \"@atlaskit/theme\";\nimport Lozenge from \"@atlaskit/lozenge\";\n\n// ====================================== File imports ======================================\nimport { RecordsProps } from \"./types\";\nimport { Heading } from \"../../../components\";\n\nconst styles = {\n   mainCard: {\n      background: colors.N30,\n      borderRadius: 4,\n      padding: 10,\n   },\n   card: {\n      background: colors.N0,\n      marginTop: 10,\n      borderRadius: 3,\n      padding: 5,\n      display: \"flex\",\n      justifyContent: \"space-between\",\n   },\n   text: {\n      fontSize: 13,\n      color: colors.N600,\n   },\n};\n\nconst Details = (props: RecordsProps) => {\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <div style={styles.mainCard}>\n                  <Heading mixin={typography.h300} style={{ marginTop: 0 }}>\n                     SAMPLE RECORDS\n                  </Heading>\n                  {props.records.length > 0 ? (\n                     props.records.map((item: any) => (\n                        <div style={styles.card}>\n                           <div style={{ textAlign: \"left\", maxWidth: \"70%\" }}>\n                              <Heading mixin={typography.h300} style={{ marginTop: 0, fontSize: 14 }}>\n                                 {item.reportId}\n                              </Heading>\n                              <div style={styles.text}>{item.name}</div>\n                              <div style={styles.text}>Test method : {item.testMethod}</div>\n                           </div>\n                           <div style={{ textAlign: \"right\" }}>\n                              <Lozenge\n                                 appearance={\n                                    item.status === \"complete\"\n                                       ? \"success\"\n                                       : item.status === \"panding\"\n                                       ? \"moved\"\n                                       : item.status === \"canceled\"\n                                       ? \"removed\"\n                                       : \"inprogress\"\n                                 }\n                              >\n                                 {item.status}\n                              </Lozenge>\n                           </div>\n                        </div>\n                     ))\n                  ) : (\n                     <div style={{ textAlign: \"center\", color: colors.N100 }}>No records found</div>\n                  )}\n               </div>\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nexport default Details;\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport { connect } from \"react-redux\";\n\n// ====================================== File imports ======================================\nimport { Breadcrumb, Divider } from \"../../../components\";\nimport { Props } from \"./types\";\nimport AppState from \"../../../redux/types\";\nimport { Customer } from \"../../../redux/types/CustomerTypes\";\nimport Details from \"./Details\";\nimport Records from \"./Records\";\n\nconst records: any = [\n   {\n      reportId: \"HTL-PWD-200410001\",\n      name: \"Besleri Mineral Water\",\n      testMethod: \"IOS 20563:2013 water test method\",\n      status: \"complete\",\n   },\n   {\n      reportId: \"HTL-PWD-200410001\",\n      name: \"Besleri Mineral Water\",\n      testMethod: \"IOS 20563:2013 water test method\",\n      status: \"panding\",\n   },\n   {\n      reportId: \"HTL-PWD-200410001\",\n      name: \"Besleri Mineral Water\",\n      testMethod: \"IOS 20563:2013 water test method\",\n      status: \"in process\",\n   },\n   {\n      reportId: \"HTL-PWD-200410001\",\n      name: \"Besleri Mineral Water\",\n      testMethod: \"IOS 20563:2013 water test method\",\n      status: \"canceled\",\n   },\n];\n\nconst CustomerDetails = (props: Props) => {\n   const customer: Customer = props.customer;\n   const { customerId } = props.match.params;\n   const breadcrumbItems = [\n      { path: \"/\", name: \"Dashboard\" },\n      { path: \"/customer\", name: \"Customers\" },\n      { path: `/customer/${customerId ? `details/${customerId}` : \"add\"}`, name: customer.name },\n   ];\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb items={breadcrumbItems} screen=\"Customer Details\" />\n            </GridColumn>\n            <GridColumn medium={8}>\n               <Details customer={customer} />\n               <Divider />\n               <Records records={records} />\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   customerPermission: state.user.user.role.permission.customer,\n   customer: state.customer.customer,\n});\n\nexport default connect(mapStateToProps)(CustomerDetails);\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport { colors, typography } from \"@atlaskit/theme\";\nimport Lozenge from \"@atlaskit/lozenge\";\nimport moment from \"moment\";\n// ====================================== File imports ======================================\nimport { SampleCardProps } from \"./types\";\nimport { Heading } from \"../../components\";\n\nconst styles = {\n   card: {\n      margin: 5,\n      marginBottom: 8,\n      background: colors.N0,\n      padding: 5,\n      borderRadius: 3,\n      cursor: \"pointer\",\n   },\n   item: {\n      display: \"flex\",\n   },\n   label: {\n      alignItems: \"flex-start\",\n   },\n   text: {\n      display: \"flex\",\n      flex: 1,\n      color: colors.N300,\n      paddingRight: 20,\n      marginLeft: 5,\n   },\n   parameterTag: {\n      paddingRight: 5,\n   },\n};\n\nconst SampleCard = (props: SampleCardProps) => {\n   const { sample, prefix } = props;\n   return (\n      <div style={styles.card} onClick={() => props.onClick()}>\n         <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n            <Heading mixin={typography.h400} style={{ marginTop: 0 }}>\n               {`${prefix}-${sample.sampleId}`}\n            </Heading>\n            {sample.status === 0 && (\n               <Lozenge appearance=\"removed\" isBold>\n                  Pending\n               </Lozenge>\n            )}\n            {sample.status === 1 && (\n               <Lozenge appearance=\"inprogress\" isBold>\n                  In progress\n               </Lozenge>\n            )}\n            {sample.status === 2 && (\n               <Lozenge appearance=\"success\" isBold>\n                  Complete\n               </Lozenge>\n            )}\n         </div>\n         <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n            <div>\n               {sample.name} ({sample.generic_name})\n            </div>\n            <div>\n               {sample?.customer?.contact?.email} | {sample?.customer?.contact?.phone}\n            </div>\n         </div>\n         <div style={{ display: \"flex\" }}>\n            <div style={styles.item}>\n               <div style={styles.label}>Due date :</div>\n               <div style={styles.text}>{moment(sample.due_date).format(\"DD/MM/YYYY\")}</div>\n            </div>\n            <div style={styles.item}>\n               <div style={styles.label}>Parameters :</div>\n               <div style={styles.text}>\n                  {sample.sampleResultParameters.map((sampleResultParameters) => (\n                     <div style={styles.parameterTag}>\n                        {sampleResultParameters.status === 0 && <Lozenge appearance=\"removed\">{sampleResultParameters.name}</Lozenge>}\n                        {sampleResultParameters.status === 1 && <Lozenge appearance=\"inprogress\">{sampleResultParameters.name}</Lozenge>}\n                        {sampleResultParameters.status === 2 && <Lozenge appearance=\"success\">{sampleResultParameters.name}</Lozenge>}\n                     </div>\n                  ))}\n               </div>\n            </div>\n         </div>\n      </div>\n   );\n};\n\nexport default SampleCard;\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport { colors } from \"@atlaskit/theme\";\nimport SampleCard from \"./SampleCard\";\nimport { connect } from \"react-redux\";\n\n// ====================================== File imports ======================================\nimport { SampleListProps } from \"./types\";\nimport AppState from \"../../redux/types\";\n\nconst styles = {\n   mainCard: {\n      background: colors.N20,\n      borderRadius: 4,\n      padding: 5,\n   },\n   card: {\n      margin: 5,\n      marginBottom: 8,\n      background: colors.N0,\n      padding: 5,\n      borderRadius: 3,\n   },\n};\n\nconst SampleList = (props: SampleListProps) => {\n   const { samples, prefix } = props;\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <div style={styles.mainCard}>\n                  {samples.length > 0 ? (\n                     samples.map((sample) => (\n                        <SampleCard\n                           sample={sample}\n                           prefix={prefix}\n                           onClick={() => props.navigationHistory.push(`/sample/id/${prefix}-${sample.sampleId}`)}\n                        />\n                     ))\n                  ) : (\n                     <div style={{ display: \"flex\", justifyContent: \"center\" }}>No sample found</div>\n                  )}\n               </div>\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   prefix: state.orgnization.details.prefix,\n});\n\nexport default connect(mapStateToProps)(SampleList);\n","import { DispatchType } from \"../types/ActionDispatch\";\nimport { Sample, SampleResultParameters } from \"../types/SampleTypes\";\nimport AlertBox from \"./Alert\";\nimport ActionsTypes from \".\";\n\nimport Parse from \"parse\";\n\nexport function getSamples() {\n   return async (dispatch: DispatchType): Promise<Sample[]> => {\n      try {\n         let res = await Parse.Cloud.run(\"getSamples\");\n         dispatch({\n            type: ActionsTypes.GET_SAMPLES,\n            payload: res,\n         });\n         return res;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function createSample(sampleDetails: Object) {\n   return async (dispatch: DispatchType): Promise<Sample[]> => {\n      try {\n         let res = await Parse.Cloud.run(\"createSample\", sampleDetails);\n         dispatch({\n            type: ActionsTypes.CREATE_SAMPLE,\n            payload: res,\n         });\n         AlertBox(dispatch, \"confirmation\", \"Sample added successfully.\");\n         return res;\n      } catch (error) {\n         AlertBox(dispatch, \"error\", error.message);\n         throw new Error(error);\n      }\n   };\n}\n\nexport function getSample(sampleId: string) {\n   return async (dispatch: DispatchType): Promise<Sample[]> => {\n      try {\n         let res = await Parse.Cloud.run(\"getSample\", { sampleId });\n         let hod = res?.collection_by?.toJSON();\n         let collection_by = res?.collection_by?.toJSON();\n         let test_group = res?.test_group?.toJSON();\n         let sample = { ...res, hod, collection_by, test_group };\n         dispatch({\n            type: ActionsTypes.GET_SAMPLE,\n            payload: sample,\n         });\n         return sample;\n      } catch (error) {\n         return error;\n      }\n   };\n}\n\nexport function assignSample(data: SampleResultParameters[]) {\n   return async (dispatch: DispatchType): Promise<Sample[]> => {\n      try {\n         let res = await Parse.Cloud.run(\"assignSample\", { parameters: data });\n         dispatch({\n            type: ActionsTypes.SAMPLE_ASSIGN,\n            payload: res,\n         });\n         AlertBox(dispatch, \"confirmation\", \"Sample assign successfully.\");\n         return res;\n      } catch (error) {\n         AlertBox(dispatch, \"error\", error.message);\n         return error;\n      }\n   };\n}\n","// ====================================== Module imports ======================================\nimport React, { useEffect, useState } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Button from \"@atlaskit/button\";\nimport AddIcon from \"@atlaskit/icon/glyph/add\";\nimport SearchIcon from \"@atlaskit/icon/glyph/search\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport TextField from \"@atlaskit/textfield\";\n\n// ====================================== File imports ======================================\nimport { Breadcrumb, ScreenLoader } from \"../../components\";\nimport AppState from \"../../redux/types\";\nimport { Props } from \"./types\";\nimport SampleList from \"./SampleList\";\nimport { getSamples } from \"../../redux/actions/SamplesActions\";\n\nconst breadcrumbItems = [\n   { path: \"/\", name: \"Dashboard\" },\n   { path: \"/sample\", name: \"Samples\" },\n];\n\nconst SampleScreen = (props: Props) => {\n   const { samplePermission, getSamples, samples } = props;\n   const [loading, setLoading] = useState(true);\n\n   const focus = async () => {\n      await getSamples();\n      setLoading(false);\n   };\n\n   useEffect(() => {\n      focus();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb\n                  items={breadcrumbItems}\n                  screen=\"Samples\"\n                  right={\n                     <div style={{ display: \"flex\" }}>\n                        <TextField placeholder=\"Search by sample ID\" isCompact={true} />\n                        <Button\n                           iconBefore={<SearchIcon label=\"Search icon\" size=\"small\" />}\n                           style={{ height: 38, marginLeft: 7 }}\n                           onClick={() => {}}\n                        >\n                           Search\n                        </Button>\n                        {samplePermission.write && (\n                           <Button\n                              iconBefore={<AddIcon label=\"Add icon\" size=\"small\" />}\n                              type=\"submit\"\n                              style={{ height: 38, marginLeft: 7 }}\n                              appearance=\"primary\"\n                              onClick={() => props.history.push(\"/sample/add\")}\n                           >\n                              Add sample\n                           </Button>\n                        )}\n                     </div>\n                  }\n               />\n            </GridColumn>\n            <GridColumn medium={12}>\n               {loading ? <ScreenLoader /> : <SampleList samples={samples} navigationHistory={props.history} />}\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   samplePermission: state.user.user.role.permission.samples_id,\n   samples: state.samples.samples,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ getSamples }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SampleScreen);\n","// ====================================== Module imports ======================================\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Form, { Field, ErrorMessage } from \"@atlaskit/form\";\nimport Select, { CreatableSelect } from \"@atlaskit/select\";\nimport TextField from \"@atlaskit/textfield\";\nimport { DatePicker } from \"@atlaskit/datetime-picker\";\nimport Button from \"@atlaskit/button\";\n\n// ====================================== File imports ======================================\nimport { SampleFormProps } from \"./types\";\nimport { SampleDetails } from \"../../../redux/types/SampleDetailsTypes\";\n\nconst SampleForm = (props: SampleFormProps) => {\n   const { onSearchSamplesDetails, searchedSamplesDetails, userOptions } = props;\n\n   const [sampleDetailsSearchKeyword, setSampleDetailsSearchKeyword] = useState(\"\");\n   const [sampleDetailsSearchLoading, setSampleDetailsSearchLoading] = useState(false);\n   const [sampleDetailsOptions, setSampleDetailsOptions] = useState<any>([]);\n   const [sampleName, setSampleName] = useState<any>({});\n\n   const sampleDetailsSearch = async () => {\n      setSampleDetailsSearchLoading(true);\n      await onSearchSamplesDetails(sampleDetailsSearchKeyword);\n      setSampleDetailsSearchLoading(false);\n   };\n\n   useEffect(() => {\n      sampleDetailsSearch();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [sampleDetailsSearchKeyword]);\n\n   useEffect(() => {\n      let sampleDetailsOptions: any = searchedSamplesDetails?.map((sampleDetails: SampleDetails) => ({\n         ...sampleDetails,\n         label: sampleDetails.name,\n         value: sampleDetails.objectId,\n      }));\n      setSampleDetailsOptions(sampleDetailsOptions);\n   }, [searchedSamplesDetails]);\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Form\n                  onSubmit={async (data: any) => {\n                     props.onSubmit({ ...data, sampleName });\n                  }}\n               >\n                  {({ formProps, submitting, setFieldValue }: any) => (\n                     <form {...formProps} noValidate={true}>\n                        <Field label=\"Sample Name\" isRequired name=\"sampleName\">\n                           {({ fieldProps, error }: any) => (\n                              <Fragment>\n                                 <CreatableSelect\n                                    {...fieldProps}\n                                    validationState={error === \"SAMPLE_NAME_REQUIRED\" && \"error\"}\n                                    options={sampleDetailsOptions}\n                                    placeholder=\"Select sample\"\n                                    isLoading={sampleDetailsSearchLoading}\n                                    onInputChange={(keyword) => setSampleDetailsSearchKeyword(keyword)}\n                                    onChange={(value: any) => {\n                                       let label: string = value.label.replace('Create \"', \"\").replace('\"', \"\");\n                                       setSampleName({ ...value, label });\n                                       setFieldValue(\"genericName\", value.genericName ? value.genericName : \"\");\n                                    }}\n                                    value={sampleName}\n                                 />\n                                 {error === \"SAMPLE_NAME_REQUIRED\" && <ErrorMessage>Sample name is required.</ErrorMessage>}\n                              </Fragment>\n                           )}\n                        </Field>\n                        <Field\n                           label=\"Generic name\"\n                           isRequired\n                           name=\"genericName\"\n                           validate={(value: any) => {\n                              if (!value) {\n                                 return \"GENERIC_NAME_REQUIRED\";\n                              }\n                           }}\n                        >\n                           {({ fieldProps, error }: any) => (\n                              <Fragment>\n                                 <TextField {...fieldProps} />\n                                 {error === \"GENERIC_NAME_REQUIRED\" && <ErrorMessage>Generic name is required.</ErrorMessage>}\n                              </Fragment>\n                           )}\n                        </Field>\n\n                        <Grid>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Collection date\"\n                                 isRequired\n                                 name=\"collectionDate\"\n                                 defaultValue={undefined}\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"COLLECTION_DATE_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps }: any) => <DatePicker {...fieldProps} dateFormat=\"DD/MM/YYYY\" placeholder=\"Select date\" />}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Manufacture date\"\n                                 isRequired\n                                 name=\"mfgDate\"\n                                 defaultValue={undefined}\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"MFG_DATE_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps }: any) => <DatePicker {...fieldProps} dateFormat=\"DD/MM/YYYY\" placeholder=\"Select date\" />}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Expiration date\"\n                                 isRequired\n                                 name=\"expDate\"\n                                 defaultValue={undefined}\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"EXP_DATE_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps }: any) => <DatePicker {...fieldProps} dateFormat=\"DD/MM/YYYY\" placeholder=\"Select date\" />}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n\n                        <Grid>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Sample code\"\n                                 isRequired\n                                 name=\"sampleCode\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"SAMPLE_CODE_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <TextField {...fieldProps} />\n                                       {error === \"SAMPLE_CODE_REQUIRED\" && <ErrorMessage>Sample code is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Brand name\"\n                                 isRequired\n                                 name=\"brandName\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"BRAND_NAME_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <TextField {...fieldProps} />\n                                       {error === \"BRAND_NAME_REQUIRED\" && <ErrorMessage>Brand name is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Manufacture\"\n                                 isRequired\n                                 name=\"manufacture\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"MANUFACTURE_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <TextField {...fieldProps} />\n                                       {error === \"MANUFACTURE_REQUIRED\" && <ErrorMessage>Manufacture is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n\n                        <Grid>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Marking\"\n                                 isRequired\n                                 name=\"marking\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"MARKING_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <TextField {...fieldProps} />\n                                       {error === \"MARKING_REQUIRED\" && <ErrorMessage>Marking is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Supplier / Importer\"\n                                 isRequired\n                                 name=\"supplier\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"SUPPLIER_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <TextField {...fieldProps} />\n                                       {error === \"SUPPLIER_REQUIRED\" && <ErrorMessage>Supplier / Importer is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Batch / Lot No.\"\n                                 isRequired\n                                 name=\"batchNo\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"BATCH_NO_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <TextField {...fieldProps} />\n                                       {error === \"BATCH_NO_REQUIRED\" && <ErrorMessage>Batch / Lot No. is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n\n                        <Grid>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Rec. Qty / Batch Size\"\n                                 isRequired\n                                 name=\"batchSize\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"BATCH_SIZE_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <TextField {...fieldProps} />\n                                       {error === \"BATCH_SIZE_REQUIRED\" && <ErrorMessage>Rec. Qty / Batch Size is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Drug lic. No.\"\n                                 isRequired\n                                 name=\"licNo\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"LIC_NO_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <TextField {...fieldProps} />\n                                       {error === \"LIC_NO_REQUIRED\" && <ErrorMessage>Drug lic. No. is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Type\"\n                                 isRequired\n                                 name=\"type\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"TYPE_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <TextField {...fieldProps} />\n                                       {error === \"TYPE_REQUIRED\" && <ErrorMessage>Type is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n\n                        <Field label=\"Description\" name=\"description\">\n                           {({ fieldProps, error }: any) => (\n                              <Fragment>\n                                 <TextField {...fieldProps} />\n                              </Fragment>\n                           )}\n                        </Field>\n\n                        <Grid>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Sample packing\"\n                                 isRequired\n                                 name=\"samplePacking\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"PACKING_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <TextField {...fieldProps} />\n                                       {error === \"PACKING_REQUIRED\" && <ErrorMessage>Sample packing is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Sample quantity\"\n                                 isRequired\n                                 name=\"sampleQty\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"QTY_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <TextField {...fieldProps} />\n                                       {error === \"QTY_REQUIRED\" && <ErrorMessage>Sample quantity is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Sample Condition\"\n                                 isRequired\n                                 name=\"sampleCondition\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"SAMPLE_CONDITION_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <TextField {...fieldProps} />\n                                       {error === \"SAMPLE_CONDITION_REQUIRED\" && <ErrorMessage>Sample Condition is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n\n                        <Grid>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Serving size\"\n                                 isRequired\n                                 name=\"servingSize\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"SERVING_SIZE_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <TextField {...fieldProps} />\n                                       {error === \"SERVING_SIZE_REQUIRED\" && <ErrorMessage>Serving size is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Env condition\"\n                                 isRequired\n                                 name=\"envCondition\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"ENV_CONDITION_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <TextField {...fieldProps} />\n                                       {error === \"ENV_CONDITION_REQUIRED\" && <ErrorMessage>Env condition is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Collected by\"\n                                 isRequired\n                                 name=\"conllectedBy\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"COLLECTED_BY_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <Select\n                                          {...fieldProps}\n                                          validationState={error === \"SAMPLE_NAME_REQUIRED\" && \"error\"}\n                                          options={userOptions}\n                                          placeholder=\"Select user\"\n                                       />\n                                       {error === \"COLLECTED_BY_REQUIRED\" && <ErrorMessage>Collected by is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n\n                        <div style={{ display: \"flex\", justifyContent: \"flex-end\", marginTop: 20, marginBottom: 100 }}>\n                           <Button appearance=\"link\" onClick={() => props.onBack()}>\n                              Back\n                           </Button>\n                           <Button type=\"submit\" appearance=\"primary\" isLoading={submitting}>\n                              Next\n                           </Button>\n                        </div>\n                     </form>\n                  )}\n               </Form>\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nexport default SampleForm;\n","// ====================================== Module imports ======================================\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Form, { Field, ErrorMessage } from \"@atlaskit/form\";\nimport Select from \"@atlaskit/select\";\nimport { DatePicker } from \"@atlaskit/datetime-picker\";\nimport Button from \"@atlaskit/button\";\nimport moment from \"moment\";\n\n// ====================================== File imports ======================================\nimport { BasicDetailsFormProps } from \"./types\";\nimport { Customer } from \"../../../redux/types/CustomerTypes\";\nimport { TestGroup } from \"../../../redux/types/TestGroupsTypes\";\n\nconst BasicDetailsForm = (props: BasicDetailsFormProps) => {\n   const { onSearchCustomers, searchedCustomers, searchedTestGroups, onSearchTestGroups, edit, editData } = props;\n   const [customerSearchKeyword, setCustomerSearchKeyword] = useState(\"\");\n   const [customerSearchLoading, setCustomerSearchLoading] = useState(false);\n   const [customerOptions, setCustomerOptions] = useState<any>([]);\n   const [testGroupSearchKeyword, setTestGroupSearchKeyword] = useState(\"\");\n   const [testGroupSearchLoading, setTestGroupSearchLoading] = useState(false);\n   const [testGroupOptions, setTestGroupOptions] = useState<any>([]);\n\n   const customerSearch = async () => {\n      setCustomerSearchLoading(true);\n      await onSearchCustomers(customerSearchKeyword);\n      setCustomerSearchLoading(false);\n   };\n\n   const testGroupSearch = async () => {\n      setTestGroupSearchLoading(true);\n      await onSearchTestGroups(customerSearchKeyword);\n      setTestGroupSearchLoading(false);\n   };\n\n   useEffect(() => {\n      customerSearch();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [customerSearchKeyword]);\n\n   useEffect(() => {\n      let customerOptions: any = searchedCustomers?.map((customer: Customer) => ({\n         ...customer,\n         label: customer.name,\n         value: customer.objectId,\n      }));\n      setCustomerOptions(customerOptions);\n   }, [searchedCustomers]);\n\n   useEffect(() => {\n      testGroupSearch();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [testGroupSearchKeyword]);\n\n   useEffect(() => {\n      let testGroupOptions: any = searchedTestGroups?.map((testGroup: TestGroup) => ({\n         label: `${testGroup.name} (${testGroup.code})`,\n         value: testGroup.objectId,\n      }));\n      setTestGroupOptions(testGroupOptions);\n   }, [searchedTestGroups]);\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn>\n               <Form\n                  onSubmit={async (data: any) => {\n                     props.onSubmit(data);\n                  }}\n               >\n                  {({ formProps, submitting }: any) => (\n                     <form {...formProps}>\n                        <Field\n                           isDisabled={edit}\n                           label=\"Customer\"\n                           isRequired\n                           name=\"customer\"\n                           validate={(value: any) => {\n                              if (!value) {\n                                 return \"CUSTOMER_REQUIRED\";\n                              }\n                           }}\n                           defaultValue={edit ? editData?.customer : undefined}\n                        >\n                           {({ fieldProps, error }: any) => (\n                              <Fragment>\n                                 <Select\n                                    {...fieldProps}\n                                    validationState={error === \"CUSTOMER_REQUIRED\" && \"error\"}\n                                    options={customerOptions}\n                                    isLoading={customerSearchLoading}\n                                    placeholder=\"Select customer\"\n                                    onInputChange={(keyword) => setCustomerSearchKeyword(keyword)}\n                                 />\n                                 {error === \"CUSTOMER_REQUIRED\" && <ErrorMessage>Customer is required.</ErrorMessage>}\n                              </Fragment>\n                           )}\n                        </Field>\n                        <Grid>\n                           <GridColumn medium={6}>\n                              <Field\n                                 isDisabled={edit}\n                                 label=\"Test Group\"\n                                 isRequired\n                                 name=\"testGroup\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"GROUP_REQUIRED\";\n                                    }\n                                 }}\n                                 defaultValue={\n                                    edit\n                                       ? { ...editData?.test_group, label: editData?.test_group.name, value: editData?.test_group.objectId }\n                                       : undefined\n                                 }\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <Select\n                                          {...fieldProps}\n                                          validationState={error === \"GROUP_REQUIRED\" && \"error\"}\n                                          options={testGroupOptions}\n                                          isLoading={testGroupSearchLoading}\n                                          placeholder=\"Select Group\"\n                                          onInputChange={(keyword) => setTestGroupSearchKeyword(keyword)}\n                                       />\n                                       {error === \"GROUP_REQUIRED\" && <ErrorMessage>Test group is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={6}>\n                              <Field\n                                 label=\"Date\"\n                                 isRequired\n                                 name=\"date\"\n                                 defaultValue={edit ? moment(editData?.date, \"YYYY-MM-DD\").toDate() : new Date()}\n                              >\n                                 {({ fieldProps }: any) => <DatePicker {...fieldProps} dateFormat=\"DD/MM/YYYY\" isDisabled />}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n                        <Grid>\n                           <GridColumn medium={6}>\n                              <Field\n                                 label=\"Due date\"\n                                 isRequired\n                                 name=\"dueDate\"\n                                 defaultValue={edit ? editData?.due_date : undefined}\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"DATE_REQUIRED\";\n                                    }\n                                    let date = moment(value, \"YYYY-MM-DD\");\n                                    if (date.isBefore(moment().subtract(1, \"day\"))) {\n                                       return \"PAST_DATE\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <DatePicker {...fieldProps} dateFormat=\"DD/MM/YYYY\" placeholder=\"Select date\" />\n                                       {error === \"PAST_DATE\" && <ErrorMessage>Past date is not allow!</ErrorMessage>}\n                                       {error === \"DATE_REQUIRED\" && <ErrorMessage>Lab due date is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={6}>\n                              <Field\n                                 label=\"Lab due date\"\n                                 isRequired\n                                 name=\"labDueDate\"\n                                 defaultValue={edit ? editData?.lab_due_date : undefined}\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"DATE_REQUIRED\";\n                                    }\n                                    let date = moment(value, \"YYYY-MM-DD\");\n                                    if (date.isBefore(moment().subtract(1, \"day\"))) {\n                                       return \"PAST_DATE\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <DatePicker {...fieldProps} dateFormat=\"DD/MM/YYYY\" placeholder=\"Select date\" />\n                                       {error === \"PAST_DATE\" && <ErrorMessage>Past date is not allow!</ErrorMessage>}\n                                       {error === \"DATE_REQUIRED\" && <ErrorMessage>Lab due date is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n                        <div style={{ display: \"flex\", justifyContent: \"flex-end\", marginTop: 20 }}>\n                           <Button type=\"submit\" appearance=\"primary\" isLoading={submitting}>\n                              Next\n                           </Button>\n                        </div>\n                     </form>\n                  )}\n               </Form>\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nexport default BasicDetailsForm;\n","// ====================================== Module imports ======================================\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Form, { Field, ErrorMessage } from \"@atlaskit/form\";\nimport Button from \"@atlaskit/button\";\nimport TextField from \"@atlaskit/textfield\";\nimport Select, { OptionType } from \"@atlaskit/select\";\nimport { Checkbox } from \"@atlaskit/checkbox\";\n\n// ====================================== File imports ======================================\nimport { TestDetailsFormProps } from \"./types\";\nimport { Parameter } from \"../../../redux/types/ParameterTypes\";\nimport { SampleGroup } from \"../../../redux/types/SampleGroupTypes\";\n\nconst TestDetailsForm = (props: TestDetailsFormProps) => {\n   const {\n      hodOptions,\n      searchedParameters,\n      searchedSampleGroup,\n      onSearchParameters,\n      onSearchSampleGroup,\n      sampleDetails,\n      isNewSample,\n   } = props;\n   const [dropdownOpen, setDropdownOpen] = useState(false);\n   const [parameterSearchKeyword, setParameterSearchKeyword] = useState(\"\");\n   const [parameterSearchLoading, setParameterSearchLoading] = useState(false);\n   const [parameterOptions, setParameterOptions] = useState<any>([]);\n   const [sampleGroupSearchKeyword, setSampleGroupSearchKeyword] = useState(\"\");\n   const [sampleGroupSearchLoading, setSampleGroupSearchLoading] = useState(false);\n   const [sampleGroupOptions, setSampleGroupOptions] = useState<any>([]);\n   const [parameterSearchable, setParameterSearchable] = useState(true);\n   const [includeAllParameters, setIncludeAllParameters] = useState<any>(false);\n   const [selectedParameters, setSelectedParameters] = useState<any>([]);\n\n   const sampleGroupSearch = async () => {\n      setSampleGroupSearchLoading(true);\n      await onSearchSampleGroup(sampleGroupSearchKeyword);\n      setSampleGroupSearchLoading(false);\n   };\n\n   const parameterSearch = async () => {\n      setParameterSearchLoading(true);\n      await onSearchParameters(parameterSearchKeyword);\n      setParameterSearchLoading(false);\n   };\n\n   useEffect(() => {\n      if (parameterSearchable) {\n         parameterSearch();\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [parameterSearchKeyword]);\n\n   useEffect(() => {\n      let parameterOptions: any = searchedParameters?.map((parameter: Parameter) => ({\n         ...parameter,\n         label: parameter.name,\n         value: parameter.objectId,\n      }));\n      setParameterOptions(parameterOptions);\n   }, [searchedParameters]);\n\n   useEffect(() => {\n      if (isNewSample === true) {\n         sampleGroupSearch();\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [sampleGroupSearchKeyword]);\n\n   useEffect(() => {\n      let sampleGroupOptions: any = searchedSampleGroup?.map((sampleGroup: SampleGroup) => ({\n         ...sampleGroup,\n         label: sampleGroup.name,\n         value: sampleGroup.objectId,\n      }));\n      setSampleGroupOptions(sampleGroupOptions);\n   }, [searchedSampleGroup]);\n\n   useEffect(() => {\n      if (includeAllParameters) {\n         setSelectedParameters(parameterOptions);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [includeAllParameters]);\n\n   useEffect(() => {\n      if (isNewSample === false) {\n         let sampleGroupOptions = sampleDetails?.sampleGroups?.map((sampleGroup: any) => ({\n            ...sampleGroup,\n            label: sampleGroup.name,\n            parameters: sampleGroup.parameters.map((parameter: any) => ({\n               ...parameter,\n               parameter: parameter?.parameter?.toJSON(),\n            })),\n            value: sampleGroup.objectId,\n         }));\n\n         setSampleGroupOptions(sampleGroupOptions);\n      }\n   }, [isNewSample, sampleDetails]);\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Form\n                  onSubmit={async (data: any) => {\n                     let parameters: any = selectedParameters.map((parameter: any): any => ({\n                        ...parameter,\n                        sampleGroup: parameter?.sampleGroup?.toJSON(),\n                        parameter: parameter?.parameter ? parameter?.parameter?.objectId : parameter?.objectId,\n                        department: parameter?.parameter ? parameter?.parameter?.department?.objectId : parameter?.department?.objectId,\n                     }));\n                     await props.onSubmit({ ...data, parameters });\n                  }}\n               >\n                  {({ formProps, submitting }: any) => (\n                     <form {...formProps} noValidate={true}>\n                        <Grid>\n                           <GridColumn medium={4}>\n                              <Field\n                                 label=\"Sampling method\"\n                                 isRequired\n                                 name=\"samplingMethod\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"SAMPLING_METHOD_REQUIRED\";\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <TextField {...fieldProps} />\n                                       {error === \"SAMPLING_METHOD_REQUIRED\" && <ErrorMessage>Sampling method is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={8}>\n                              <Field\n                                 label=\"Test group\"\n                                 isRequired\n                                 name=\"testGroup\"\n                                 validate={(value: any) => {\n                                    if (!value) {\n                                       return \"TEST_GROUP_REQUIRED\";\n                                    }\n                                    if (value?.value === \"N/A\") {\n                                       setParameterSearchable(true);\n                                    } else {\n                                       setParameterSearchable(false);\n                                       let parameterOptions = value?.parameters.map((parameter: any) => ({\n                                          ...parameter,\n                                          name: parameter?.parameter?.name,\n                                          label: parameter?.parameter?.name,\n                                          value: parameter?.objectId,\n                                       }));\n                                       setParameterOptions(parameterOptions);\n                                    }\n                                 }}\n                              >\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <Select\n                                          {...fieldProps}\n                                          validationState={error === \"SAMPLING_METHOD_REQUIRED\" && \"error\"}\n                                          options={\n                                             sampleGroupOptions?.length > 0\n                                                ? [{ label: \"N/A\", value: \"N/A\" }, ...sampleGroupOptions]\n                                                : [{ label: \"N/A\", value: \"N/A\" }]\n                                          }\n                                          placeholder=\"Select test group\"\n                                          onInputChange={(value) => setSampleGroupSearchKeyword(value)}\n                                          isLoading={sampleGroupSearchLoading}\n                                       />\n                                       {error === \"TEST_GROUP_REQUIRED\" && <ErrorMessage>Test group is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n\n                        <Field label=\"Parameters\" isRequired name=\"parameters\">\n                           {({ fieldProps, error }: any) => (\n                              <Fragment>\n                                 <Select\n                                    isMulti\n                                    {...fieldProps}\n                                    validationState={error === \"PARAMETERS_REQUIRED\" && \"error\"}\n                                    options={parameterOptions}\n                                    placeholder=\"Select test group\"\n                                    menuIsOpen={dropdownOpen}\n                                    onMenuOpen={() => setDropdownOpen(true)}\n                                    onBlur={() => setDropdownOpen(false)}\n                                    isLoading={parameterSearchLoading}\n                                    onInputChange={(value: string) => setParameterSearchKeyword(value)}\n                                    onChange={(selectedOptions: OptionType) => {\n                                       setSelectedParameters(selectedOptions);\n                                    }}\n                                    isDisabled={includeAllParameters}\n                                    value={selectedParameters}\n                                 />\n                                 <Checkbox\n                                    value={includeAllParameters}\n                                    label=\"Add all parameters\"\n                                    onChange={() => {\n                                       setIncludeAllParameters(!includeAllParameters);\n                                    }}\n                                    defaultChecked={false}\n                                    name=\"all-parameters\"\n                                 />\n                                 {error === \"PARAMETERS_REQUIRED\" && <ErrorMessage>Test group is required.</ErrorMessage>}\n                              </Fragment>\n                           )}\n                        </Field>\n\n                        <Grid>\n                           <GridColumn medium={6}>\n                              <Field label=\"Instructions\" name=\"instructions\">\n                                 {({ fieldProps }: any) => <TextField {...fieldProps} />}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={6}>\n                              <Field label=\"HOD\" name=\"hod\">\n                                 {({ fieldProps, error }: any) => (\n                                    <Fragment>\n                                       <Select\n                                          {...fieldProps}\n                                          validationState={error === \"HOD_REQUIRED\" && \"error\"}\n                                          options={hodOptions}\n                                          placeholder=\"Select hod\"\n                                       />\n                                       {error === \"PARAMETERS_REQUIRED\" && <ErrorMessage>HOD is required.</ErrorMessage>}\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n\n                        <div style={{ display: \"flex\", justifyContent: \"flex-end\", marginTop: 20, marginBottom: 100 }}>\n                           <Button appearance=\"link\" onClick={() => props.onBack()}>\n                              Back\n                           </Button>\n                           <Button type=\"submit\" appearance=\"primary\" isLoading={submitting}>\n                              Submit\n                           </Button>\n                        </div>\n                     </form>\n                  )}\n               </Form>\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nexport default TestDetailsForm;\n","// ====================================== Module imports ======================================\nimport React, { useState, useEffect } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport { ProgressTracker, Stages } from \"@atlaskit/progress-tracker\";\nimport { colors, typography } from \"@atlaskit/theme\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport moment from \"moment\";\n\n// ====================================== File imports ======================================\nimport { Breadcrumb, Divider, Heading, ScreenLoader } from \"../../../components\";\nimport { Props } from \"./types\";\nimport SampleForm from \"./SampleForm\";\nimport BasicDetailsForm from \"./BasicDetailsForm\";\nimport TestDetailsForm from \"./TestDetailsForm\";\nimport AppState from \"../../../redux/types\";\nimport { searchCustomers } from \"../../../redux/actions/CustomerActions\";\nimport { searchTestGroups } from \"../../../redux/actions/TestGroupsActions\";\nimport { searchSamplesDetails } from \"../../../redux/actions/SamplesDetailsActions\";\nimport { searchSampleGroup } from \"../../../redux/actions/SampleGroupsActions\";\nimport { searchParameters } from \"../../../redux/actions/ParameterActions\";\nimport { createSample, getSample } from \"../../../redux/actions/SamplesActions\";\nimport { getUsers } from \"../../../redux/actions/UserActions\";\nimport { User } from \"../../../redux/types/UserTypes\";\n\nconst style = {\n   mainCard: {\n      background: colors.N30,\n      borderRadius: 4,\n      padding: 5,\n      marginLeft: 10,\n   },\n   card: {\n      margin: 5,\n      background: colors.N0,\n      padding: 5,\n      borderRadius: 3,\n   },\n   heading: {\n      marginTop: 1,\n   },\n   title: {\n      fontWeight: \"bold\",\n   },\n   subHeading: {\n      marginTop: 1,\n      width: 80,\n      minWidth: 80,\n   },\n};\n\nconst AddSampleGroup = (props: Props) => {\n   const {\n      searchCustomers,\n      searchedCustomers,\n      searchTestGroups,\n      searchedTestGroups,\n      searchSamplesDetails,\n      searchedSamplesDetails,\n      getUsers,\n      users,\n      searchSampleGroup,\n      searchedSampleGroup,\n      searchParameters,\n      searchedParameters,\n      createSample,\n      getSample,\n      prefix,\n      sample,\n   } = props;\n   const { sampleId } = props.match.params;\n\n   const [step, setStep] = useState(0);\n   const [loading, setLoading] = useState(true);\n   const [basicDetails, setBasicDetails] = useState<any>({});\n   const [sampleDetails, setSampleDetails] = useState<any>({});\n   const [userOptions, setUserOptions] = useState<any>([]);\n   const [hodOptions, setHodOptions] = useState<any>([]);\n\n   const focus = async () => {\n      if (sampleId) {\n         await getSample(`${sampleId.replace(`${prefix}-`, \"\")}`);\n      }\n      await getUsers();\n      setLoading(false);\n   };\n\n   useEffect(() => {\n      focus();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   useEffect(() => {\n      if (users) {\n         let hodUserOptions: any[] = [];\n         let usersOptions: any[] = [];\n         users?.map((user: User) => {\n            if (user.role.name === \"hod\") {\n               hodUserOptions.push({ label: user.name, value: user.objectId });\n            } else {\n               console.log(\"user \", user)\n               usersOptions.push({ label: user.name, value: user.objectId });\n            }\n         });\n         setUserOptions(usersOptions);\n         setHodOptions(hodUserOptions);\n      }\n   }, [users]);\n\n   const breadcrumbItems = [\n      { path: \"/\", name: \"Dashboard\" },\n      { path: \"/sample\", name: \"Samples\" },\n      { path: `/sample/${sampleId ? `edit/${sampleId}` : \"add\"}`, name: sampleId ? \"Edit\" : \"Add\" },\n   ];\n\n   const onBack = () => {\n      props.history.goBack();\n   };\n\n   const onSubmit = async (testingData: any) => {\n      let formData: any = {};\n      formData[\"name\"] = sampleDetails.sampleName.label;\n      formData[\"test_group\"] = basicDetails.testGroup.value;\n      formData[\"generic_name\"] = sampleDetails.genericName;\n      formData[\"customer\"] = basicDetails.customer;\n      formData[\"date\"] = moment(basicDetails.date).toDate();\n      formData[\"lab_due_date\"] = moment(basicDetails.labDueDate).toDate();\n      formData[\"due_date\"] = moment(basicDetails.dueDate).toDate();\n      formData[\"mfg_date\"] = moment(sampleDetails.mfgDate, \"YYYY-MM-DD\").toDate();\n      formData[\"exp_date\"] = moment(sampleDetails.expDate, \"YYYY-MM-DD\").toDate();\n      formData[\"collection_date\"] = moment(sampleDetails.collectionDate, \"YYYY-MM-DD\").toDate();\n      formData[\"sample_code\"] = sampleDetails.sampleCode;\n      formData[\"brand_name\"] = sampleDetails.brandName;\n      formData[\"manufacture\"] = sampleDetails.manufacture;\n      formData[\"marking\"] = sampleDetails.marking;\n      formData[\"supplier\"] = sampleDetails.supplier;\n      formData[\"batch_no\"] = sampleDetails.batchNo;\n      formData[\"batch_size\"] = sampleDetails.batchSize;\n      formData[\"drug_lic_no\"] = sampleDetails.licNo;\n      formData[\"type\"] = sampleDetails.type;\n      formData[\"description\"] = sampleDetails.description;\n      formData[\"sample_packing\"] = sampleDetails.samplePacking;\n      formData[\"sample_qty\"] = sampleDetails.sampleQty;\n      formData[\"sample_condition\"] = sampleDetails.sampleCondition;\n      formData[\"serving_size\"] = sampleDetails.servingSize;\n      formData[\"env_condition\"] = sampleDetails.envCondition;\n      formData[\"collection_by\"] = sampleDetails.conllectedBy.value;\n      formData[\"sampling_method\"] = testingData.samplingMethod;\n      formData[\"test_method_group\"] = {\n         name: testingData.testGroup.name,\n         objectId: testingData.testGroup.objectId,\n      };\n      formData[\"instruction\"] = testingData.instruction;\n      formData[\"hod\"] = testingData.hod.value;\n      formData[\"parameters\"] = testingData.parameters;\n\n      try {\n         await createSample(formData);\n         onBack();\n      } catch (error) {\n         console.log(error);\n      }\n   };\n\n   const items: Stages = [\n      {\n         id: \"0\",\n         label: \"Basic Details\",\n         percentageComplete: 0,\n         status: \"current\",\n         noLink: false,\n         onClick: () => setStep(0),\n      },\n      {\n         id: \"1\",\n         label: \"Sample Details\",\n         percentageComplete: 0,\n         status: \"unvisited\",\n         noLink: false,\n         onClick: () => setStep(1),\n      },\n      {\n         id: \"2\",\n         label: \"Testing Details\",\n         percentageComplete: 0,\n         status: \"unvisited\",\n         noLink: false,\n         onClick: () => setStep(2),\n      },\n   ];\n\n   const stepItems: Stages = items.map((item) => {\n      if (parseInt(item.id) === step) {\n         return {\n            ...item,\n            percentageComplete: 0,\n            status: \"current\",\n         };\n      } else if (step < 4 && parseInt(item.id) < step) {\n         return {\n            ...item,\n            percentageComplete: 100,\n            status: \"visited\",\n         };\n      } else {\n         return item;\n      }\n   });\n\n   return loading ? (\n      <ScreenLoader />\n   ) : (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb items={breadcrumbItems} screen={sampleId ? \"Edit Sample\" : \"Add Sample\"} marginBottom={1} />\n            </GridColumn>\n            <GridColumn medium={12}>\n               <Grid>\n                  <GridColumn medium={2} />\n                  <GridColumn medium={8}>\n                     <ProgressTracker items={stepItems} animated={true} spacing=\"cosy\" />\n                  </GridColumn>\n                  <GridColumn medium={2} />\n               </Grid>\n            </GridColumn>\n\n            <Divider />\n\n            <GridColumn medium={8}>\n               <div style={{ display: step === 0 ? \"block\" : \"none\" }}>\n                  <BasicDetailsForm\n                     edit={sampleId ? true : false}\n                     editData={sample}\n                     onBack={onBack}\n                     onSearchCustomers={searchCustomers}\n                     searchedCustomers={searchedCustomers}\n                     onSearchTestGroups={searchTestGroups}\n                     searchedTestGroups={searchedTestGroups}\n                     onSubmit={(data) => {\n                        setBasicDetails(data);\n                        setStep(step + 1);\n                     }}\n                  />\n               </div>\n               <div style={{ display: step === 1 ? \"block\" : \"none\" }}>\n                  <SampleForm\n                     edit={sampleId ? true : false}\n                     editData={sample}\n                     searchedSamplesDetails={searchedSamplesDetails}\n                     onSearchSamplesDetails={searchSamplesDetails}\n                     userOptions={userOptions}\n                     onBack={() => setStep(0)}\n                     onSubmit={(data) => {\n                        setSampleDetails(data);\n                        setStep(step + 1);\n                     }}\n                  />\n               </div>\n               <div style={{ display: step === 2 ? \"block\" : \"none\" }}>\n                  <TestDetailsForm\n                     edit={sampleId ? true : false}\n                     editData={sample}\n                     onSearchSampleGroup={searchSampleGroup}\n                     searchedSampleGroup={searchedSampleGroup}\n                     searchedParameters={searchedParameters}\n                     onSearchParameters={searchParameters}\n                     isNewSample={sampleDetails?.sampleName?.__isNew__ ? true : false}\n                     sampleDetails={sampleDetails?.sampleName}\n                     hodOptions={hodOptions}\n                     onBack={() => setStep(1)}\n                     onSubmit={(data) => onSubmit(data)}\n                  />\n               </div>\n            </GridColumn>\n\n            <GridColumn medium={4}>\n               <div style={{ marginTop: 30 }}>\n                  <div style={style.mainCard}>\n                     {basicDetails.customer ? (\n                        <div style={style.card}>\n                           <div>\n                              <Heading mixin={typography.h200} style={style.heading}>\n                                 Customer\n                              </Heading>\n                              <Heading mixin={typography.h500} style={style.heading}>\n                                 {basicDetails.customer.name}\n                              </Heading>\n                           </div>\n                           <Divider />\n                           <div style={{ display: \"flex\" }}>\n                              <Heading mixin={typography.h400} style={style.subHeading}>\n                                 Phone\n                              </Heading>\n                              <span style={{ color: colors.N300 }}>{basicDetails.customer.contact.phone}</span>\n                           </div>\n                           <div style={{ display: \"flex\" }}>\n                              <Heading mixin={typography.h400} style={style.subHeading}>\n                                 Email\n                              </Heading>\n                              <span style={{ color: colors.N300 }}>{basicDetails.customer.contact.email}</span>\n                           </div>\n                           <div style={{ display: \"flex\" }}>\n                              <Heading mixin={typography.h400} style={style.subHeading}>\n                                 Address\n                              </Heading>\n                              <span style={{ color: colors.N300 }}>\n                                 {`${basicDetails.customer.address.line1}, ${basicDetails.customer.address.line2}, ${basicDetails.customer.address.city}, ${basicDetails.customer.address.state}-${basicDetails.customer.address.zip}`}\n                              </span>\n                           </div>\n                        </div>\n                     ) : (\n                        <div style={{ display: \"flex\", justifyContent: \"center\" }}>Customer is not selected</div>\n                     )}\n                  </div>\n               </div>\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   samples: state.samples.samples,\n   searchedCustomers: state.customer.searchedCustomers,\n   searchedTestGroups: state.testGroup.searchedTestGroups,\n   searchedSamplesDetails: state.samplesDetails.searchedSamplesDetails,\n   searchedSampleGroup: state.sampleGroup.searchSampleGroup,\n   searchedParameters: state.parameter.searchedParameters,\n   users: state.user.users,\n   prefix: state.orgnization.details.prefix,\n   sample: state.samples.sample,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators(\n         {\n            searchCustomers,\n            searchTestGroups,\n            searchSamplesDetails,\n            getUsers,\n            searchSampleGroup,\n            searchParameters,\n            createSample,\n            getSample,\n         },\n         dispatch\n      ),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSampleGroup);\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport { typography, colors } from \"@atlaskit/theme\";\n\n// ====================================== File imports ======================================\nimport { CustomerDetailsProps } from \"./types\";\nimport { Heading } from \"../../../components\";\n\nconst CustomerDetails = (props: CustomerDetailsProps) => {\n   const { customer } = props;\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Heading mixin={typography.h400} style={{ marginTop: 10 }}>\n                  SenseLab Inc.\n               </Heading>\n               <Grid layout=\"fluid\">\n                  <GridColumn medium={6}>\n                     <div style={{ color: colors.N300 }}>\n                        <div>{customer?.contact?.name}</div>\n                        <div>{customer?.contact?.phone}</div>\n                        <div>{customer?.contact?.email}</div>\n                     </div>\n                  </GridColumn>\n                  <GridColumn medium={6}>\n                     <div style={{ textAlign: \"right\", color: colors.N300 }}>\n                        <div>{customer?.address?.line1}</div>\n                        <div>{customer?.address?.line2}</div>\n                        <div>\n                           {customer?.address?.city} {customer?.address?.state} - {customer?.address?.zip}\n                        </div>\n                     </div>\n                  </GridColumn>\n               </Grid>\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nexport default CustomerDetails;\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport { colors } from \"@atlaskit/theme\";\nimport moment from \"moment\";\n\n// ====================================== File imports ======================================\nimport { SampleDetailsProps } from \"./types\";\n\nconst styles = {\n   item: {\n      display: \"flex\",\n      marginTop: 3,\n   },\n   label: {\n      width: 120,\n      alignItems: \"flex-start\",\n   },\n   text: {\n      display: \"flex\",\n      flex: 1,\n      color: colors.N300,\n      paddingRight: 10,\n   },\n};\n\nconst SampleDetails = (props: SampleDetailsProps) => {\n   const { sampleDetails } = props;\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={4}>\n               <div style={styles.item}>\n                  <div style={styles.label}>Test group</div>\n                  <div style={styles.text}>\n                     {sampleDetails?.test_group.name} ({sampleDetails?.test_group.code})\n                  </div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Collection date</div>\n                  <div style={styles.text}>{moment(sampleDetails?.collection_date).format(\"DD/MM/YYYY\")}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Sample code</div>\n                  <div style={styles.text}>{sampleDetails?.sample_code}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Marking</div>\n                  <div style={styles.text}>{sampleDetails?.marking}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Batch size</div>\n                  <div style={styles.text}>{sampleDetails?.batch_size}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Sample packing</div>\n                  <div style={styles.text}>{sampleDetails?.sample_packing}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Serving size</div>\n                  <div style={styles.text}>{sampleDetails?.serving_size}</div>\n               </div>\n            </GridColumn>\n\n            <GridColumn medium={4}>\n               <div style={styles.item}>\n                  <div style={styles.label}>Due date</div>\n                  <div style={styles.text}>{moment(sampleDetails?.due_date).format(\"DD/MM/YYYY\")}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Mfg. date</div>\n                  <div style={styles.text}>{moment(sampleDetails?.mfg_date).format(\"DD/MM/YYYY\")}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Brand name</div>\n                  <div style={styles.text}>{sampleDetails?.brand_name}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Supplier/Importer</div>\n                  <div style={styles.text}>{sampleDetails?.supplier}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Drug lic. no.</div>\n                  <div style={styles.text}>{sampleDetails?.drug_lic_no}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Sample quantity</div>\n                  <div style={styles.text}>{sampleDetails?.sample_qty}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Env condition</div>\n                  <div style={styles.text}>{sampleDetails?.env_condition}</div>\n               </div>\n            </GridColumn>\n\n            <GridColumn medium={4}>\n               <div style={styles.item}>\n                  <div style={styles.label}>Lab due date</div>\n                  <div style={styles.text}>{moment(sampleDetails?.lab_due_date).format(\"DD/MM/YYYY\")}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Exp. date</div>\n                  <div style={styles.text}>{moment(sampleDetails?.exp_date).format(\"DD/MM/YYYY\")}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Manufacture</div>\n                  <div style={styles.text}>{sampleDetails?.manufacture}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Batch / Lot No</div>\n                  <div style={styles.text}>{sampleDetails?.batch_no}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Type</div>\n                  <div style={styles.text}>{sampleDetails?.type}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Sample condition</div>\n                  <div style={styles.text}>{sampleDetails?.sample_condition}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Collected by</div>\n                  <div style={styles.text}>{sampleDetails?.collection_by.name}</div>\n               </div>\n            </GridColumn>\n            {sampleDetails?.description ? (\n               <GridColumn medium={12}>\n                  <div style={styles.item}>\n                     <div style={styles.label}>Description</div>\n                     <div style={styles.text}>{sampleDetails?.description}</div>\n                  </div>\n               </GridColumn>\n            ) : null}\n         </Grid>\n      </Page>\n   );\n};\n\nexport default SampleDetails;\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport { colors } from \"@atlaskit/theme\";\n\n// ====================================== File imports ======================================\nimport { TestDetailsProps } from \"./types\";\n\nconst styles = {\n   item: {\n      display: \"flex\",\n      marginTop: 3,\n   },\n   label: {\n      width: 120,\n      alignItems: \"flex-start\",\n   },\n   text: {\n      display: \"flex\",\n      flex: 1,\n      color: colors.N300,\n      paddingRight: 10,\n   },\n};\n\nconst TestDetails = (props: TestDetailsProps) => {\n   const { sampleDetails } = props;\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <div style={styles.item}>\n                  <div style={styles.label}>Sampling method</div>\n                  <div style={styles.text}>{sampleDetails?.sampling_method}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Test method</div>\n                  <div style={styles.text}>{sampleDetails?.test_method_group.name}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Parameters</div>\n                  <div style={styles.text}>\n                     {sampleDetails?.sampleResultParameters.map((sampleResultParameter, idx) => (\n                        <span>\n                           {sampleResultParameter.name}\n                           {sampleDetails?.sampleResultParameters.length - 1 !== idx && \", \"}\n                        </span>\n                     ))}\n                  </div>\n               </div>\n               {sampleDetails?.instruction ? (\n                  <div style={styles.item}>\n                     <div style={styles.label}>Instrustuons</div>\n                     <div style={styles.text}>{sampleDetails?.instruction}</div>\n                  </div>\n               ) : null}\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nexport default TestDetails;\n","// ====================================== Module imports ======================================\nimport React, { useState } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Select from \"@atlaskit/select\";\nimport { DatePicker } from \"@atlaskit/datetime-picker\";\nimport Button from \"@atlaskit/button\";\nimport moment from \"moment\";\n\n// ====================================== File imports ========================================\nimport { ParameterDetailsProps } from \"./types\";\nimport { Divider } from \"./../../../components\";\n\nconst ParameterDetails = (props: ParameterDetailsProps) => {\n   const { usersOptions, parameters, assignSample } = props;\n   const [assignedParameters, setAssignedParameters] = useState(parameters);\n   const [isSubmitting, setIsSubmitting] = useState(false);\n\n   const handleAssignSubmit = async () => {\n      let formData: any[] = [];\n      assignedParameters?.map((parameter) => {\n         if (parameter.assign_to && parameter.assign_date && parameter.due_date) {\n            formData.push({\n               objectId: parameter.objectId,\n               assign_to: parameter.assign_to,\n               assign_date: parameter.assign_date,\n               due_date: parameter.due_date,\n            });\n         }\n      });\n      setIsSubmitting(true);\n      await assignSample(formData);\n      setIsSubmitting(false);\n   };\n\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <div style={{ paddingLeft: 20, paddingRight: 20 }}>\n                  <Grid layout=\"fluid\">\n                     <GridColumn medium={3}>Parameter</GridColumn>\n                     <GridColumn medium={2}>Department</GridColumn>\n                     <GridColumn medium={3}>Assign to</GridColumn>\n                     <GridColumn medium={2}>Allotment date</GridColumn>\n                     <GridColumn medium={2}>Due date</GridColumn>\n                  </Grid>\n                  <Divider />\n\n                  {assignedParameters?.map((parameter, idx) => (\n                     <Grid layout=\"fluid\">\n                        <div style={{ display: \"flex\", flex: 1, alignItems: \"center\", marginTop: 5 }}>\n                           <GridColumn medium={3}>{parameter?.name}</GridColumn>\n                           <GridColumn medium={2}>{parameter?.department?.get(\"name\")}</GridColumn>\n                           <GridColumn medium={3}>\n                              <Select\n                                 options={usersOptions}\n                                 placeholder=\"Select user\"\n                                 onChange={(value) => {\n                                    let updateAssignedParameters = assignedParameters.map((item, index) =>\n                                       index === idx ? { ...item, assign_to: value } : item\n                                    );\n                                    setAssignedParameters(updateAssignedParameters);\n                                 }}\n                                 value={parameter.assign_to}\n                              />\n                           </GridColumn>\n                           <GridColumn medium={2}>\n                              <DatePicker\n                                 dateFormat=\"DD/MM/YYYY\"\n                                 placeholder=\"Select date\"\n                                 defaultValue={undefined}\n                                 onChange={(assign_date: string) => {\n                                    let date = moment(assign_date, \"YYYY-MM-DD\").toDate();\n                                    let updateAssignedParameters = assignedParameters.map((item, index) =>\n                                       index === idx ? { ...item, assign_date: date } : item\n                                    );\n                                    setAssignedParameters(updateAssignedParameters);\n                                 }}\n                                 value={parameter?.assign_date?.toString()}\n                              />\n                           </GridColumn>\n                           <GridColumn medium={2}>\n                              <DatePicker\n                                 dateFormat=\"DD/MM/YYYY\"\n                                 placeholder=\"Select date\"\n                                 onChange={(due_date: string) => {\n                                    let date = moment(due_date, \"YYYY-MM-DD\").toDate();\n                                    let updateAssignedParameters = assignedParameters.map((item, index) =>\n                                       index === idx ? { ...item, due_date: date } : item\n                                    );\n                                    setAssignedParameters(updateAssignedParameters);\n                                 }}\n                                 value={parameter?.due_date?.toString()}\n                              />\n                           </GridColumn>\n                        </div>\n                     </Grid>\n                  ))}\n\n                  <Divider />\n                  <div style={{ display: \"flex\", flex: 1, justifyContent: \"flex-end\" }}>\n                     <Button appearance=\"primary\" onClick={() => handleAssignSubmit()} isLoading={isSubmitting}>\n                        Assign\n                     </Button>\n                  </div>\n               </div>\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nexport default ParameterDetails;\n","import React from \"react\";\nimport { useBarcode } from \"react-barcodes\";\n\ninterface Props {\n   value: string;\n}\n\nexport default function Barcode(props: Props) {\n   const { inputRef } = useBarcode({\n      value: props.value,\n      options: {\n         background: \"rgba(0,0,0,0)\",\n         height: 25,\n         width: 1,\n         displayValue: false,\n         textMargin: 0,\n         marginBottom: 0,\n      },\n   });\n   return (\n      <div style={{ textAlign: \"center\" }}>\n         <svg ref={inputRef} />\n         <div style={{ marginTop: -5, fontSize: 10, zIndex: 10 }}>{props.value}</div>\n      </div>\n   );\n}\n","import { CSSProperties } from \"react\";\n\nconst page: CSSProperties = {\n   width: \"297mm\",\n   display: \"flex\",\n   flexDirection: \"column\",\n   color: \"black\",\n   fontSize: 18,\n};\n\nconst document: CSSProperties = {\n   margin: \"10mm\",\n};\n\nconst header: CSSProperties = {\n   padding: \"2mm\",\n   borderWidth: 1,\n   borderStyle: \"solid\",\n   borderColor: \"black\",\n   display: \"flex\",\n   justifyContent: \"space-between\",\n};\n\nconst orgName: CSSProperties = {\n   fontSize: 16,\n   fontWeight: \"bold\",\n};\n\nconst normalText: CSSProperties = {\n   fontSize: 14,\n   lineHeight: 1.5,\n};\n\nconst orgLogo: CSSProperties = {\n   height: 120,\n};\n\nconst documentBody: CSSProperties = {\n   padding: \"2mm\",\n   borderWidth: 1,\n   borderStyle: \"solid\",\n   borderColor: \"black\",\n   display: \"flex\",\n   flexDirection: \"column\",\n   borderTop: 0,\n};\n\nconst documentTitle: CSSProperties = {\n   display: \"flex\",\n   justifyContent: \"center\",\n   textAlign: \"center\",\n   fontWeight: \"bolder\",\n};\n\nconst detialsListContainer: CSSProperties = {\n   display: \"flex\",\n};\n\nconst detialsListTitle = (width: string): CSSProperties => {\n   return {\n      fontWeight: \"bold\",\n      width: width,\n   };\n};\n\nconst tableRow: CSSProperties = {\n   display: \"flex\",\n   borderBottomWidth: 1,\n   borderBottomStyle: \"solid\",\n   borderBottomColor: \"black\",\n};\n\nconst tableRowAllBorder: CSSProperties = {\n   display: \"flex\",\n   borderWidth: 1,\n   borderStyle: \"solid\",\n   borderColor: \"black\",\n   borderTopWidth: 0,\n};\n\nconst tableHeaderCol = (width: string): CSSProperties => {\n   return {\n      fontWeight: \"bold\",\n      borderLeftWidth: 1,\n      borderLeftColor: \"black\",\n      borderLeftStyle: \"solid\",\n      padding: \"2mm\",\n      textAlign: \"center\",\n      width: width,\n   };\n};\n\nconst tableHeaderColNoBorder = (width: string): CSSProperties => {\n   return {\n      ...tableHeaderCol(width),\n      borderWidth: 0,\n   };\n};\n\nconst tableHeaderLastCol = (width: string): CSSProperties => {\n   return {\n      ...tableHeaderCol(width),\n      borderRightWidth: 1,\n      borderRightColor: \"black\",\n      borderRightStyle: \"solid\",\n   };\n};\n\nconst tableCol = (width: string): CSSProperties => {\n   return {\n      borderLeftWidth: 1,\n      borderLeftColor: \"black\",\n      borderLeftStyle: \"solid\",\n      paddingLeft: \"2mm\",\n      paddingRight: \"2mm\",\n      width: width,\n   };\n};\n\nconst tableColNoBorder = (width: string): CSSProperties => {\n   return {\n      ...tableCol(width),\n      borderWidth: 0,\n   };\n};\n\nconst tableColCenterText = (width: string): CSSProperties => {\n   return {\n      ...tableCol(width),\n      textAlign: \"center\",\n   };\n};\n\nconst tableLastCol = (width: string): CSSProperties => {\n   return {\n      borderLeftWidth: 1,\n      borderLeftColor: \"black\",\n      borderLeftStyle: \"solid\",\n      paddingLeft: \"2mm\",\n      paddingRight: \"2mm\",\n      borderRightWidth: 1,\n      borderRightColor: \"black\",\n      borderRightStyle: \"solid\",\n      width: width,\n   };\n};\n\nexport default {\n   page,\n   document,\n   header,\n   orgName,\n   normalText,\n   orgLogo,\n   documentBody,\n   documentTitle,\n   detialsListContainer,\n   detialsListTitle,\n   tableRow,\n   tableHeaderCol,\n   tableHeaderLastCol,\n   tableCol,\n   tableLastCol,\n   tableColCenterText,\n   tableRowAllBorder,\n   tableHeaderColNoBorder,\n   tableColNoBorder,\n};\n","// ====================================== Module imports ======================================\nimport React, { useEffect, useState } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Button from \"@atlaskit/button\";\nimport EditIcon from \"@atlaskit/icon/glyph/edit\";\nimport FileIcon from \"@atlaskit/icon/glyph/file\";\nimport { typography } from \"@atlaskit/theme\";\nimport { connect } from \"react-redux\";\nimport Lozenge from \"@atlaskit/lozenge\";\nimport ReactToPrint, { PrintContextConsumer } from \"react-to-print\";\nimport { bindActionCreators } from \"redux\";\n\n// ====================================== File imports ======================================\nimport { Breadcrumb, Heading, Divider, ScreenLoader } from \"../../../components\";\nimport AppState from \"../../../redux/types\";\nimport { Props } from \"./types\";\nimport CustomerDetails from \"./CustomerDetails\";\nimport SampleDetailsComponent from \"./SampleDetails\";\nimport TestDetails from \"./TestDetails\";\nimport ParametersDetails from \"./ParametersDetails\";\nimport { getSample, assignSample } from \"../../../redux/actions/SamplesActions\";\nimport { getUsers } from \"../../../redux/actions/UserActions\";\n\n// ====================================== Print Page imports ======================================\nimport JobAllotmentPrint from \"../../../PrintPages/JobAllotment\";\nimport TestRequest from \"../../../PrintPages/TestRequest\";\nimport JobSheet from \"../../../PrintPages/JobSheet\";\n\nlet JobAllotementRef: any;\nlet TestRequestRef: any;\nlet JobSheetRef: any;\n\nconst SampleDetails = (props: Props) => {\n   const { samplePermission, getSample, prefix, sample, getUsers, users, assignSample } = props;\n   const { sampleId } = props.match.params;\n   const [loading, setLoading] = useState(true);\n   const [usersOptions, setusersOptions] = useState<any>([]);\n   const sampleIdWithoutPrefix: string = sampleId.replace(`${prefix}-`, \"\");\n\n   const PrinterIcon = require(\"../../../assets/images/printer.svg\");\n\n   const focus = async () => {\n      await getSample(sampleIdWithoutPrefix);\n      await getUsers();\n      setLoading(false);\n   };\n\n   const handleAssignSample = async (data: any) => {\n      try {\n         await assignSample(data);\n         setLoading(true);\n         await getSample(sampleIdWithoutPrefix);\n         setLoading(false);\n      } catch (error) {\n         console.log(error);\n      }\n   };\n\n   useEffect(() => {\n      focus();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   useEffect(() => {\n      if (users) {\n         let usersOptions = users.map((user) => ({\n            ...user,\n            label: user.name,\n            value: user.objectId,\n         }));\n         setusersOptions(usersOptions);\n      }\n   }, [users]);\n\n   const breadcrumbItems = [\n      { path: \"/\", name: \"Dashboard\" },\n      { path: \"/sample\", name: \"Sample\" },\n      { path: `/sample/id/${sampleId}`, name: `${sampleId}` },\n   ];\n\n   return loading ? (\n      <ScreenLoader />\n   ) : (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb\n                  items={breadcrumbItems}\n                  screen={sampleId}\n                  right={\n                     <div>\n                        <ReactToPrint content={() => JobAllotementRef}>\n                           <PrintContextConsumer>\n                              {({ handlePrint }) => (\n                                 <Button style={{ height: 38, marginLeft: 10, marginTop: 9 }} appearance=\"link\" onClick={handlePrint}>\n                                    <span>\n                                       <img src={PrinterIcon} alt=\"printer\" width={12} style={{ marginRight: 5 }} />\n                                    </span>{\" \"}\n                                    Job Allotment\n                                 </Button>\n                              )}\n                           </PrintContextConsumer>\n                        </ReactToPrint>\n\n                        <ReactToPrint content={() => TestRequestRef}>\n                           <PrintContextConsumer>\n                              {({ handlePrint }) => (\n                                 <Button style={{ height: 38, marginLeft: 10, marginTop: 9 }} appearance=\"link\" onClick={handlePrint}>\n                                    <span>\n                                       <img src={PrinterIcon} alt=\"printer\" width={12} style={{ marginRight: 5 }} />\n                                    </span>{\" \"}\n                                    Test Request\n                                 </Button>\n                              )}\n                           </PrintContextConsumer>\n                        </ReactToPrint>\n\n                        <ReactToPrint content={() => JobSheetRef}>\n                           <PrintContextConsumer>\n                              {({ handlePrint }) => (\n                                 <Button style={{ height: 38, marginLeft: 10, marginTop: 9 }} appearance=\"link\" onClick={handlePrint}>\n                                    <span>\n                                       <img src={PrinterIcon} alt=\"printer\" width={12} style={{ marginRight: 5 }} />\n                                    </span>{\" \"}\n                                    Job Sheet\n                                 </Button>\n                              )}\n                           </PrintContextConsumer>\n                        </ReactToPrint>\n\n                        {samplePermission.write && (\n                           <Button\n                              iconBefore={<FileIcon label=\"File icon\" size=\"small\" />}\n                              type=\"submit\"\n                              style={{ height: 38, marginLeft: 10, marginTop: 9 }}\n                              appearance=\"link\"\n                              onClick={() => props.history.push(`/sample/id/${sampleId}/result`)}\n                           >\n                              Result\n                           </Button>\n                        )}\n                        {samplePermission.write && (\n                           <Button\n                              iconBefore={<EditIcon label=\"Add icon\" size=\"small\" />}\n                              type=\"submit\"\n                              style={{ height: 38, marginLeft: 10, marginTop: 9 }}\n                              appearance=\"link\"\n                              onClick={() => props.history.push(`/sample/edit/${sampleId}`)}\n                           >\n                              Edit\n                           </Button>\n                        )}\n                     </div>\n                  }\n               />\n            </GridColumn>\n            <GridColumn medium={12}>\n               <div style={{ display: \"none\" }}>\n                  <JobAllotmentPrint sample={sample} details={props.organization} ref={(el) => (JobAllotementRef = el)} />\n               </div>\n\n               <div style={{ display: \"none\" }}>\n                  <TestRequest sample={sample} details={props.organization} ref={(el) => (TestRequestRef = el)} />\n               </div>\n\n               <div style={{ display: \"none\" }}>\n                  <JobSheet sample={sample} details={props.organization} ref={(el) => (JobSheetRef = el)} />\n               </div>\n\n               <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\" }}>\n                  <div style={{ paddingRight: 50 }}>\n                     <Heading mixin={typography.h300} style={{ marginTop: 1 }}>\n                        {sample?.name}\n                     </Heading>\n                     <Heading mixin={typography.h200} style={{ marginTop: 1 }}>\n                        {sample?.generic_name}\n                     </Heading>\n                  </div>\n                  <div>\n                     {sample?.status === 0 && (\n                        <Lozenge appearance=\"removed\" isBold>\n                           Pending\n                        </Lozenge>\n                     )}\n                     {sample?.status === 1 && (\n                        <Lozenge appearance=\"inprogress\" isBold>\n                           In progress\n                        </Lozenge>\n                     )}\n                     {sample?.status === 2 && (\n                        <Lozenge appearance=\"success\" isBold>\n                           Complete\n                        </Lozenge>\n                     )}\n                  </div>\n               </div>\n\n               <Divider />\n\n               <div>\n                  <Heading mixin={typography.h200} style={{ marginTop: 1, textTransform: \"uppercase\" }}>\n                     Customer\n                  </Heading>\n                  <CustomerDetails customer={sample?.customer} />\n               </div>\n\n               <Divider />\n\n               <div>\n                  <Heading mixin={typography.h200} style={{ marginTop: 1, marginBottom: 8, textTransform: \"uppercase\" }}>\n                     Sample details\n                  </Heading>\n                  <SampleDetailsComponent sampleDetails={sample} />\n               </div>\n\n               <Divider />\n\n               <div>\n                  <Heading mixin={typography.h200} style={{ marginTop: 1, marginBottom: 8, textTransform: \"uppercase\" }}>\n                     Test details\n                  </Heading>\n                  <TestDetails sampleDetails={sample} />\n               </div>\n\n               <Divider />\n\n               <div>\n                  <Heading mixin={typography.h200} style={{ marginTop: 1, marginBottom: 8, textTransform: \"uppercase\" }}>\n                     Parameters\n                  </Heading>\n                  <ParametersDetails\n                     assignSample={handleAssignSample}\n                     usersOptions={usersOptions}\n                     parameters={sample?.sampleResultParameters.map((parameter) => ({\n                        ...parameter,\n                        assign_to: parameter.assign_to && {\n                           ...parameter.assign_to.toJSON(),\n                           label: parameter.assign_to.toJSON().name,\n                           value: parameter.assign_to.toJSON().objectId,\n                        },\n                     }))}\n                  />\n               </div>\n\n               <Divider />\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   samplePermission: state.user.user.role.permission.samples_id,\n   organization: state.orgnization.details,\n   prefix: state.orgnization.details.prefix,\n   sample: state.samples.sample,\n   users: state.user.users,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ getSample, getUsers, assignSample }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SampleDetails);\n","import React, { Component } from \"react\";\nimport { JobAllotementProps } from \"./Types\";\nimport Barcode from \"./Barcode\";\nimport PageStyles from \"./PageStyles\";\n\nexport default class JobAllotment extends Component<JobAllotementProps, any> {\n   render() {\n      const { details, sample } = this.props;\n\n      return (\n         <div className=\"print-container\" style={{ margin: \"0\", padding: \"0\" }}>\n            <div style={PageStyles.header}>\n               <div style={{ width: \"80%\" }}>\n                  <div style={PageStyles.orgName}>{details.name}</div>\n                  <div style={PageStyles.normalText}>{details.address.line1}</div>\n                  <div style={PageStyles.normalText}>{details.address.line2}</div>\n                  <div style={PageStyles.normalText}>{`${details.address.city}, ${details.address.state}-${details.address.zip}`}</div>\n                  <div style={PageStyles.normalText}>{`M: ${details.contact.phone} Email: ${details.contact.email}`}</div>\n               </div>\n               <img src={details.logo.toJSON().url} alt=\"logo\" style={PageStyles.orgLogo} />\n            </div>\n            <div style={PageStyles.documentBody}>\n               <div style={PageStyles.documentTitle}>JOB SHEET ALLOCATION RECORD</div>\n               <div style={PageStyles.detialsListContainer}>\n                  <div style={{ flex: 0.5 }}>\n                     <div style={{ display: \"flex\" }}>\n                        <div style={PageStyles.detialsListTitle(\"80px\")}>Lab Code</div>\n                        <div>: {`${details.prefix}-${sample?.sampleId}`}</div>\n                     </div>\n                     <div style={{ display: \"flex\" }}>\n                        <div style={PageStyles.detialsListTitle(\"80px\")}>Commodity</div>\n                        <div>: {sample?.name}</div>\n                     </div>\n                  </div>\n                  <div style={{ flex: 0.5, alignItems: \"center\", textAlign: \"center\" }}>\n                     <Barcode value={`${details.prefix}-${sample?.sampleId}`} />\n                  </div>\n               </div>\n            </div>\n\n            <div style={PageStyles.tableRow}>\n               <div style={PageStyles.tableHeaderCol(\"6%\")}>Sr No.</div>\n               <div style={PageStyles.tableHeaderCol(\"23%\")}>Section</div>\n               <div style={PageStyles.tableHeaderCol(\"31%\")}>Allotted Test Perameters</div>\n               <div style={PageStyles.tableHeaderLastCol(\"40%\")}>Allotted to Chemist/ Microbiologist/ Analyst</div>\n            </div>\n            {sample?.sampleResultParameters.map((parameter, idx) => (\n               <div style={PageStyles.tableRow}>\n                  <div style={PageStyles.tableColCenterText(\"6%\")}>{idx + 1}.</div>\n                  <div style={PageStyles.tableCol(\"23%\")}>{parameter?.department?.get(\"name\")}</div>\n                  <div style={PageStyles.tableCol(\"31%\")}>{parameter?.name}</div>\n                  <div style={PageStyles.tableLastCol(\"40%\")}>{parameter.assign_to ? parameter?.assign_to?.get(\"name\") : \"N/A\"}</div>\n               </div>\n            ))}\n         </div>\n      );\n   }\n}\n","import React, { Component } from \"react\";\nimport { TestRequestProps } from \"./Types\";\nimport Barcode from \"./Barcode\";\nimport PageStyles from \"./PageStyles\";\nimport moment from \"moment\";\n\nexport default class JobAllotment extends Component<TestRequestProps, any> {\n   render() {\n      const { details, sample } = this.props;\n\n      return (\n         <div className=\"print-container\" style={{ margin: \"0\", padding: \"0\" }}>\n            <div style={PageStyles.header}>\n               <div>\n                  <div style={PageStyles.orgName}>{details.name}</div>\n                  <div style={PageStyles.normalText}>{details.address.line1}</div>\n                  <div style={PageStyles.normalText}>{details.address.line2}</div>\n                  <div style={PageStyles.normalText}>{`${details.address.city}, ${details.address.state}-${details.address.zip}`}</div>\n                  <div style={PageStyles.normalText}>{`M: ${details.contact.phone} Email: ${details.contact.email}`}</div>\n               </div>\n               <img src={details.logo.toJSON().url} alt=\"logo\" style={PageStyles.orgLogo} />\n            </div>\n            <div style={PageStyles.documentBody}>\n               <div style={PageStyles.documentTitle}>TEST REQUEST</div>\n               <div style={PageStyles.detialsListContainer}>\n                  <div style={{ flex: 0.5 }}>\n                     <div style={{ display: \"flex\" }}>\n                        <div style={PageStyles.detialsListTitle(\"90px\")}>Lab Code</div>\n                        <div>: {`${details.prefix}-${sample?.sampleId}`}</div>\n                     </div>\n                     <div style={{ display: \"flex\" }}>\n                        <div style={PageStyles.detialsListTitle(\"90px\")}>Commodity</div>\n                        <div>: {sample?.name}</div>\n                     </div>\n                     <div style={{ display: \"flex\" }}>\n                        <div style={PageStyles.detialsListTitle(\"90px\")}>Sample Code</div>\n                        <div>: {sample?.sample_code}</div>\n                     </div>\n                     <div style={{ display: \"flex\" }}>\n                        <div style={PageStyles.detialsListTitle(\"90px\")}>Brand</div>\n                        <div>: {sample?.brand_name}</div>\n                     </div>\n                     <div style={{ display: \"flex\" }}>\n                        <div style={PageStyles.detialsListTitle(\"90px\")}>Party Name</div>\n                        <div>: {sample?.customer.name}</div>\n                     </div>\n                     <div style={{ display: \"flex\" }}>\n                        <div style={PageStyles.detialsListTitle(\"90px\")}>Address</div>\n                        <div>:</div>\n                        <div style={{ marginLeft: 4, marginTop: 5 }}>\n                           <div style={{ lineHeight: 1 }}>{sample?.customer.address.line1}</div>\n                           <div style={{ lineHeight: 1 }}>{sample?.customer.address.line2}</div>\n                           <div style={{ lineHeight: 1 }}>\n                              {`${sample?.customer.address.city}, ${sample?.customer.address.state}-${sample?.customer.address.zip}`}\n                           </div>\n                        </div>\n                     </div>\n                  </div>\n                  <div style={{ flex: 0.5 }}>\n                     <div style={{ display: \"flex\" }}>\n                        <div style={PageStyles.detialsListTitle(\"100px\")}>Date of Receipt</div>\n                        <div>: {moment(sample?.date, \"YYYY-MM-DD\").format(\"DD/MM/YYYY\")}</div>\n                     </div>\n                     <div style={{ display: \"flex\" }}>\n                        <div style={PageStyles.detialsListTitle(\"100px\")}>Batch no.</div>\n                        <div>: {sample?.batch_no}</div>\n                     </div>\n                     <div style={{ display: \"flex\" }}>\n                        <div style={PageStyles.detialsListTitle(\"100px\")}>DOM</div>\n                        <div>: {moment(sample?.mfg_date).format(\"DD/MM/YYYY\")}</div>\n                     </div>\n                     <div style={{ display: \"flex\" }}>\n                        <div style={PageStyles.detialsListTitle(\"100px\")}>Qty</div>\n                        <div>: {sample?.sample_qty}</div>\n                     </div>\n                     <div style={{ alignItems: \"center\", textAlign: \"center\" }}>\n                        <Barcode value={`${details.prefix}-${sample?.sampleId}`} />\n                     </div>\n                  </div>\n               </div>\n            </div>\n\n            {/* <div className=\"page-break\" /> */}\n\n            <div style={PageStyles.tableRowAllBorder}>\n               <div style={{ ...PageStyles.tableColNoBorder(\"6%\"), fontWeight: \"bold\" }}>Sr No.</div>\n               <div style={{ ...PageStyles.tableColNoBorder(\"96%\"), fontWeight: \"bold\" }}>Section</div>\n            </div>\n            <div style={{ ...PageStyles.tableRowAllBorder, flexDirection: \"column\" }}>\n               {sample?.sampleResultParameters.map((parameter, idx) => (\n                  <div style={{ display: \"flex\" }}>\n                     <div style={PageStyles.tableColNoBorder(\"6%\")}>{idx + 1}.</div>\n                     <div style={PageStyles.tableColNoBorder(\"96%\")}>{parameter?.name}</div>\n                  </div>\n               ))}\n            </div>\n            <div style={{ ...PageStyles.tableRowAllBorder, height: \"30mm\", alignItems: \"flex-end\" }}>\n               <div style={{ display: \"flex\", flex: 0.5, justifyContent: \"center\" }}>\n                  <span\n                     style={{\n                        borderTopWidth: 1,\n                        borderTopStyle: \"dotted\",\n                        borderTopColor: \"black\",\n                        paddingLeft: 5,\n                        paddingRight: 5,\n                        marginBottom: 5,\n                     }}\n                  >\n                     Sign (Customer Representa..ve), if any\n                  </span>\n               </div>\n               <div style={{ display: \"flex\", flex: 0.5, justifyContent: \"center\" }}>\n                  <span\n                     style={{\n                        borderTopWidth: 1,\n                        borderTopStyle: \"dotted\",\n                        borderTopColor: \"black\",\n                        paddingLeft: 5,\n                        paddingRight: 5,\n                        marginBottom: 5,\n                     }}\n                  >\n                     Sign (Leb Representa..ve)\n                  </span>\n               </div>\n            </div>\n            <div style={PageStyles.tableRow}>\n               <div style={PageStyles.tableColCenterText(\"25%\")}>REVIEWD BY</div>\n               <div\n                  style={{\n                     ...PageStyles.tableColCenterText(\"75%\"),\n                     borderRightColor: \"black\",\n                     borderRightWidth: 1,\n                     borderRightStyle: \"solid\",\n                  }}\n               >\n                  SAMPLE ALLOTTED TO\n               </div>\n            </div>\n            <div style={PageStyles.tableRow}>\n               <div style={{ ...PageStyles.tableCol(\"25%\"), display: \"flex\", justifyContent: \"center\", alignItems: \"flex-end\" }}>\n                  <div style={{ textAlign: \"center\" }}>AUTHO. SIGNATORY</div>\n               </div>\n               <div style={PageStyles.tableLastCol(\"75%\")}>\n                  <div style={{ display: \"flex\" }}>\n                     <div style={{ width: 70 }}>CHEM.</div>\n                     <div style={{ width: 70 }}>{\"1)\"}</div>\n                     <div style={{ width: 70 }}>{\"2)\"}</div>\n                     <div style={{ width: 70 }}>{\"3)\"}</div>\n                     <div style={{ width: 70 }}>{\"4)\"}</div>\n                     <div style={{ width: 70 }}>{\"5)\"}</div>\n                  </div>\n                  <div style={{ display: \"flex\" }}>\n                     <div style={{ width: 70 }}>BIO.</div>\n                     <div style={{ width: 70 }}>{\"1)\"}</div>\n                     <div style={{ width: 70 }}>{\"2)\"}</div>\n                     <div style={{ width: 70 }}>{\"3)\"}</div>\n                  </div>\n                  <div style={{ display: \"flex\" }}>\n                     <div style={{ width: 70 }}>MEC.</div>\n                     <div style={{ width: 70 }}>{\"1)\"}</div>\n                     <div style={{ width: 70 }}>{\"2)\"}</div>\n                     <div style={{ width: 70 }}>{\"3)\"}</div>\n                  </div>\n               </div>\n            </div>\n         </div>\n      );\n   }\n}\n","import React, { Component } from \"react\";\nimport { JobAllotementProps } from \"./Types\";\nimport Barcode from \"./Barcode\";\nimport PageStyles from \"./PageStyles\";\nimport moment from \"moment\";\n\nexport default class JobAllotment extends Component<JobAllotementProps, any> {\n   render() {\n      const { details, sample } = this.props;\n\n      return (\n         <div className=\"print-container\" style={{ margin: \"0\", padding: \"0\" }}>\n            <div style={PageStyles.header}>\n               <div>\n                  <div style={PageStyles.orgName}>{details?.name}</div>\n                  <div style={PageStyles.normalText}>{details?.address?.line1}</div>\n                  <div style={PageStyles.normalText}>{details?.address?.line2}</div>\n                  <div style={PageStyles.normalText}>{`${details?.address?.city}, ${details?.address?.state}-${details?.address?.zip}`}</div>\n                  <div style={PageStyles.normalText}>{`M: ${details?.contact?.phone} Email: ${details?.contact?.email}`}</div>\n               </div>\n               <img src={details.logo.toJSON().url} alt=\"logo\" style={PageStyles.orgLogo} />\n            </div>\n            <div style={PageStyles.documentBody}>\n               <div style={PageStyles.documentTitle}>JOB SHEET</div>\n               <div style={PageStyles.detialsListContainer}>\n                  <div style={{ flex: 0.5 }}>\n                     <div style={{ display: \"flex\" }}>\n                        <div style={PageStyles.detialsListTitle(\"120px\")}>Lab Code</div>\n                        <div>: {`${details.prefix}-${sample?.sampleId}`}</div>\n                     </div>\n                     <div style={{ display: \"flex\" }}>\n                        <div style={PageStyles.detialsListTitle(\"120px\")}>Commodity</div>\n                        <div>: {sample?.name}</div>\n                     </div>\n                     <div style={{ display: \"flex\" }}>\n                        <div style={PageStyles.detialsListTitle(\"120px\")}>Date of Receipt</div>\n                        <div>: {moment(sample?.date, \"YYYY-MM-DD\").format(\"DD/MM/YYYY\")}</div>\n                     </div>\n                     <div style={{ display: \"flex\" }}>\n                        <div style={PageStyles.detialsListTitle(\"120px\")}>Date of Completion</div>\n                        <div>: </div>\n                     </div>\n                  </div>\n                  <div style={{ flex: 0.5, alignItems: \"center\", textAlign: \"center\" }}>\n                     <Barcode value={`${details.prefix}-${sample?.sampleId}`} />\n                  </div>\n               </div>\n            </div>\n\n            <div style={PageStyles.tableRow}>\n               <div style={PageStyles.tableHeaderCol(\"6%\")}>Sr No.</div>\n               <div style={PageStyles.tableHeaderCol(\"25%\")}>Section</div>\n               <div style={PageStyles.tableHeaderCol(\"34%\")}>Allotted Test Perameters</div>\n               <div style={PageStyles.tableHeaderLastCol(\"35%\")}>Result</div>\n            </div>\n            {sample?.sampleResultParameters.map((parameter, idx) => (\n               <div style={PageStyles.tableRow}>\n                  <div style={PageStyles.tableColCenterText(\"6%\")}>{idx + 1}.</div>\n                  <div style={PageStyles.tableCol(\"25%\")}>{parameter?.department?.get(\"name\")}</div>\n                  <div style={PageStyles.tableCol(\"34%\")}>{parameter?.name}</div>\n                  <div style={PageStyles.tableLastCol(\"35%\")}></div>\n               </div>\n            ))}\n         </div>\n      );\n   }\n}\n","// ====================================== Module imports ======================================\nimport React, { Fragment, useState, useCallback } from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport Form, { Field } from \"@atlaskit/form\";\nimport TextField from \"@atlaskit/textfield\";\nimport Button from \"@atlaskit/button\";\nimport { DatePicker } from \"@atlaskit/datetime-picker\";\nimport { Checkbox } from \"@atlaskit/checkbox\";\nimport { typography, colors } from \"@atlaskit/theme\";\nimport Select from \"@atlaskit/select\";\nimport { useDropzone } from \"react-dropzone\";\nimport Folder48Icon from \"@atlaskit/icon-file-type/glyph/folder/48\";\nimport Image24Icon from \"@atlaskit/icon-file-type/glyph/image/24\";\nimport Document24Icon from \"@atlaskit/icon-file-type/glyph/document/24\";\nimport Video24Icon from \"@atlaskit/icon-file-type/glyph/video/24\";\nimport PdfDocument24Icon from \"@atlaskit/icon-file-type/glyph/pdf-document/24\";\nimport Generic24Icon from \"@atlaskit/icon-file-type/glyph/generic/24\";\nimport AddIcon from \"@atlaskit/icon/glyph/add\";\n\n// ====================================== File imports ======================================\nimport { Divider, Heading } from \"../../components\";\nimport { ReportDetailProps } from \"./types\";\nimport { SampleResultParameters } from \"../../redux/types/SampleTypes\";\n\nconst TestDetailsForm = (props: ReportDetailProps) => {\n   const { parameters } = props;\n   const [resultsParameter, setResultsParameter] = useState<SampleResultParameters[] | undefined>(parameters);\n   const [files, setFiles] = useState<File[]>([]);\n\n   const onDrop = useCallback(\n      (acceptedFiles: File[]) => {\n         const updateFiles = [...files, ...acceptedFiles];\n         setFiles(updateFiles);\n         // eslint-disable-next-line react-hooks/exhaustive-deps\n      },\n      [files]\n   );\n\n   const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n   const formatFileSize = (bytes: any, decimalPoint: any): any => {\n      if (bytes === 0) return \"0 Bytes\";\n      var k = 1000,\n         dm = decimalPoint || 2,\n         sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"],\n         i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\n   };\n\n   const handleDeleteFile = (index: number): void => {\n      let updateFiles = files.filter((item, idx) => index !== idx);\n      setFiles(updateFiles);\n   };\n\n   return (\n      <Page>\n         <Grid spacing=\"cosy\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Form\n                  onSubmit={async (data: any) => {\n                     props.onSubmit(data);\n                  }}\n               >\n                  {({ formProps, submitting }: any) => (\n                     <form {...formProps} noValidate={true}>\n                        <Grid spacing=\"cosy\" layout=\"fluid\">\n                           <GridColumn medium={3}>\n                              <Field label=\"Analysis date\" isRequired name=\"analysisDate\">\n                                 {({ fieldProps }: any) => <DatePicker {...fieldProps} dateFormat=\"DD/MM/YYYY\" placeholder=\"select date\" />}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={3}>\n                              <Field label=\"Complete date\" isRequired name=\"completeDate\">\n                                 {({ fieldProps }: any) => <DatePicker {...fieldProps} dateFormat=\"DD/MM/YYYY\" placeholder=\"select date\" />}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={3}>\n                              <Field label=\"Report date\" isRequired name=\"reportDate\">\n                                 {({ fieldProps }: any) => <DatePicker {...fieldProps} dateFormat=\"DD/MM/YYYY\" placeholder=\"select date\" />}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={3}>\n                              <Field label=\"URL\" name=\"url\">\n                                 {({ fieldProps }: any) => (\n                                    <Fragment>\n                                       <TextField {...fieldProps} />\n                                       <Checkbox\n                                          value=\"Generate URL number\"\n                                          label=\"Generate URL number\"\n                                          onChange={() => {}}\n                                          name=\"all-parameters\"\n                                       />\n                                    </Fragment>\n                                 )}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n                        <Divider />\n                        <Grid spacing=\"cosy\" layout=\"fluid\">\n                           <GridColumn medium={12}>\n                              <div className=\"scroll-view\" style={{ overflowX: \"scroll\", overflowY: \"scroll\" }}>\n                                 <div style={{ display: \"flex\" }}>\n                                    <Heading\n                                       mixin={typography.h200}\n                                       style={{\n                                          margin: 0,\n                                          minWidth: 25,\n                                          borderBottomWidth: 1,\n                                          borderBottomColor: colors.N40,\n                                          borderBottomStyle: \"solid\",\n                                          paddingBottom: 10,\n                                          marginBottom: 5,\n                                       }}\n                                    >\n                                       No.\n                                    </Heading>\n                                    <Heading\n                                       mixin={typography.h200}\n                                       style={{\n                                          margin: 0,\n                                          minWidth: 150,\n                                          borderBottomWidth: 1,\n                                          borderBottomColor: colors.N40,\n                                          borderBottomStyle: \"solid\",\n                                          paddingBottom: 10,\n                                          marginBottom: 5,\n                                       }}\n                                    >\n                                       Parameter\n                                    </Heading>\n                                    <Heading\n                                       mixin={typography.h200}\n                                       style={{\n                                          margin: 0,\n                                          paddingLeft: 4,\n                                          minWidth: 120,\n                                          borderBottomWidth: 1,\n                                          borderBottomColor: colors.N40,\n                                          borderBottomStyle: \"solid\",\n                                          paddingBottom: 10,\n                                          marginBottom: 5,\n                                       }}\n                                    >\n                                       Division\n                                    </Heading>\n                                    {/* <Heading\n                                       mixin={typography.h200}\n                                       style={{\n                                          margin: 0,\n                                          paddingLeft: 4,\n                                          minWidth: 120,\n                                          borderBottomWidth: 1,\n                                          borderBottomColor: colors.N40,\n                                          borderBottomStyle: \"solid\",\n                                          paddingBottom: 10,\n                                          marginBottom: 5,\n                                       }}\n                                    >\n                                       HOD Name\n                                    </Heading> */}\n                                    <Heading\n                                       mixin={typography.h200}\n                                       style={{\n                                          margin: 0,\n                                          paddingLeft: 4,\n                                          minWidth: 150,\n                                          borderBottomWidth: 1,\n                                          borderBottomColor: colors.N40,\n                                          borderBottomStyle: \"solid\",\n                                          paddingBottom: 10,\n                                          marginBottom: 5,\n                                       }}\n                                    >\n                                       Chemist\n                                    </Heading>\n                                    <Heading\n                                       mixin={typography.h200}\n                                       style={{\n                                          margin: 0,\n                                          paddingLeft: 4,\n                                          minWidth: 170,\n                                          borderBottomWidth: 1,\n                                          borderBottomColor: colors.N40,\n                                          borderBottomStyle: \"solid\",\n                                          paddingBottom: 10,\n                                          marginBottom: 5,\n                                       }}\n                                    >\n                                       Result\n                                    </Heading>\n                                    <Heading\n                                       mixin={typography.h200}\n                                       style={{\n                                          margin: 0,\n                                          paddingLeft: 4,\n                                          minWidth: 90,\n                                          borderBottomWidth: 1,\n                                          borderBottomColor: colors.N40,\n                                          borderBottomStyle: \"solid\",\n                                          paddingBottom: 10,\n                                          marginBottom: 5,\n                                       }}\n                                    >\n                                       Unit\n                                    </Heading>\n                                    <Heading\n                                       mixin={typography.h200}\n                                       style={{\n                                          margin: 0,\n                                          paddingLeft: 4,\n                                          minWidth: 170,\n                                          borderBottomWidth: 1,\n                                          borderBottomColor: colors.N40,\n                                          borderBottomStyle: \"solid\",\n                                          paddingBottom: 10,\n                                          marginBottom: 5,\n                                       }}\n                                    >\n                                       Requirement\n                                    </Heading>\n                                    <Heading\n                                       mixin={typography.h200}\n                                       style={{\n                                          margin: 0,\n                                          paddingLeft: 4,\n                                          minWidth: 50,\n                                          borderBottomWidth: 1,\n                                          borderBottomColor: colors.N40,\n                                          borderBottomStyle: \"solid\",\n                                          paddingBottom: 10,\n                                          marginBottom: 5,\n                                       }}\n                                    >\n                                       NABL\n                                    </Heading>\n                                    <Heading\n                                       mixin={typography.h200}\n                                       style={{\n                                          margin: 0,\n                                          paddingLeft: 4,\n                                          minWidth: 60,\n                                          borderBottomWidth: 1,\n                                          borderBottomColor: colors.N40,\n                                          borderBottomStyle: \"solid\",\n                                          paddingBottom: 10,\n                                          marginBottom: 5,\n                                       }}\n                                    >\n                                       Nagative\n                                    </Heading>\n                                 </div>\n                                 {resultsParameter?.map((parameter, idx) => {\n                                    let validOptions;\n                                    let invalidOptions: any;\n                                    let options;\n                                    if (parameter.condition_type === \"options\") {\n                                       validOptions = parameter.validation.validOptions.split(\",\");\n                                       invalidOptions = parameter.validation.invalidOptions.split(\",\");\n                                       options = validOptions\n                                          .concat(invalidOptions)\n                                          .map((option: any) => ({ label: option, value: option }));\n                                    }\n\n                                    return (\n                                       <div style={{ display: \"flex\", alignItems: \"center\", marginBottom: 5 }}>\n                                          <div style={{ margin: 0, minWidth: 25, maxWidth: 25 }}>{idx + 1}.</div>\n                                          <div style={{ margin: 0, minWidth: 150, maxWidth: 150 }}>{parameter.name}</div>\n                                          <div style={{ margin: 0, paddingLeft: 4, minWidth: 120, maxWidth: 120 }}>\n                                             {parameter?.department?.get(\"name\")}\n                                          </div>\n                                          <div style={{ margin: 0, paddingLeft: 4, minWidth: 150, maxWidth: 150 }}>\n                                             {parameter.assign_to ? parameter.assign_to.name : \"N/A\"}\n                                          </div>\n                                          <div style={{ margin: 0, paddingLeft: 4, minWidth: 170, maxWidth: 170 }}>\n                                             {parameter.condition_type === \"range\" ? (\n                                                <TextField\n                                                   type=\"number\"\n                                                   style={{ maxWidth: 170 }}\n                                                   onChange={(event: any) => {\n                                                      let result = event.target.value;\n                                                      let resultInt = parseFloat(result);\n                                                      let nagative = !(\n                                                         resultInt >= parameter.validation.min && resultInt <= parameter.validation.max\n                                                      );\n                                                      let updateParameters: any = resultsParameter.map((data, index) =>\n                                                         index === idx ? { ...data, result, nagative } : data\n                                                      );\n                                                      setResultsParameter(updateParameters);\n                                                   }}\n                                                   value={parameter.result}\n                                                />\n                                             ) : null}\n                                             {parameter.condition_type === \"options\" ? (\n                                                <Select\n                                                   options={options}\n                                                   placeholder=\"Select option\"\n                                                   onChange={(result: any) => {\n                                                      let nagative =\n                                                         invalidOptions.find((item: any) => item === result.value) !== undefined;\n                                                      let updateParameters: any = resultsParameter.map((data, index) =>\n                                                         index === idx ? { ...data, result, nagative } : data\n                                                      );\n                                                      setResultsParameter(updateParameters);\n                                                   }}\n                                                />\n                                             ) : null}\n                                             {parameter.condition_type === \"valid\" ? (\n                                                <Select\n                                                   options={parameter.validation.validResult\n                                                      ?.split(\",\")\n                                                      ?.concat(parameter.validation.invalidResult.split(\",\"))\n                                                      ?.map((option: any) => ({ label: option, value: option }))}\n                                                   placeholder=\"Select option\"\n                                                   onChange={(result: any) => {\n                                                      let invalidResult = parameter.validation.invalidResult.split(\",\");\n                                                      let nagative = invalidResult.find((item: any) => item === result.value) !== undefined;\n                                                      let updateParameters: any = resultsParameter.map((data, index) =>\n                                                         index === idx ? { ...data, result, nagative } : data\n                                                      );\n                                                      setResultsParameter(updateParameters);\n                                                   }}\n                                                   value={parameter.result}\n                                                />\n                                             ) : null}\n                                             {parameter.condition_type === \"complies\" ? (\n                                                <TextField\n                                                   style={{ maxWidth: 170 }}\n                                                   onChange={(event: any) => {\n                                                      let result = event.target.value;\n                                                      let nagative = false;\n                                                      let updateParameters: any = resultsParameter.map((data, index) =>\n                                                         index === idx ? { ...data, result, nagative } : data\n                                                      );\n                                                      setResultsParameter(updateParameters);\n                                                   }}\n                                                   value={parameter.result}\n                                                />\n                                             ) : null}\n                                             {!parameter.condition_type ? (\n                                                <TextField\n                                                   style={{ maxWidth: 170 }}\n                                                   onChange={(event: any) => {\n                                                      let result = event.target.value;\n                                                      let nagative = false;\n                                                      let updateParameters: any = resultsParameter.map((data, index) =>\n                                                         index === idx ? { ...data, result, nagative } : data\n                                                      );\n                                                      setResultsParameter(updateParameters);\n                                                   }}\n                                                   value={parameter.result}\n                                                />\n                                             ) : null}\n                                          </div>\n                                          <div style={{ margin: 0, paddingLeft: 4, minWidth: 90, maxWidth: 90 }}>\n                                             <TextField style={{ maxWidth: 90 }} value={parameter.parameter.unit} />\n                                          </div>\n                                          <div style={{ margin: 0, paddingLeft: 4, minWidth: 170, maxWidth: 170 }}>\n                                             <TextField value={parameter.requirement} />\n                                          </div>\n                                          <div style={{ margin: 0, paddingLeft: 4, minWidth: 50, maxWidth: 50 }}>\n                                             <Checkbox\n                                                value=\"Generate URL number\"\n                                                label=\"\"\n                                                isDisabled={!parameter.condition_type ? false : true}\n                                                isChecked={parameter.nabl}\n                                                onChange={() => {\n                                                   if (!parameter.condition_type) {\n                                                      let updateParameters: any = resultsParameter.map((data, index) =>\n                                                         index === idx ? { ...data, nabl: !parameter.nabl } : data\n                                                      );\n                                                      setResultsParameter(updateParameters);\n                                                   }\n                                                }}\n                                                name=\"all-parameters\"\n                                             />\n                                          </div>\n                                          <div\n                                             style={{\n                                                margin: 0,\n                                                paddingLeft: 4,\n                                                minWidth: 60,\n                                                maxWidth: 60,\n                                                cursor:\n                                                   (parameter.result && parameter.condition_type === \"complies\") ||\n                                                   !parameter.condition_type\n                                                      ? \"pointer\"\n                                                      : \"not-allowed\",\n                                             }}\n                                             onClick={() => {\n                                                if (\n                                                   (parameter.result && parameter.condition_type === \"complies\") ||\n                                                   !parameter.condition_type\n                                                ) {\n                                                   let updateParameters: any = resultsParameter.map((data, index) =>\n                                                      index === idx ? { ...data, nagative: !parameter.nagative } : data\n                                                   );\n                                                   setResultsParameter(updateParameters);\n                                                }\n                                             }}\n                                          >\n                                             {parameter.result ? (\n                                                parameter.nagative ? (\n                                                   <span style={{ fontWeight: \"bolder\" }}>Yes</span>\n                                                ) : (\n                                                   <span>No</span>\n                                                )\n                                             ) : (\n                                                <span>-</span>\n                                             )}\n                                          </div>\n                                       </div>\n                                    );\n                                 })}\n                              </div>\n                           </GridColumn>\n                        </Grid>\n\n                        <Divider />\n\n                        <Grid spacing=\"cosy\" layout=\"fluid\">\n                           <GridColumn medium={12}>\n                              <div\n                                 style={{\n                                    backgroundColor: colors.N10A,\n                                    display: \"flex\",\n                                    flexDirection: \"column\",\n                                    borderRadius: 10,\n                                    padding: 10,\n                                 }}\n                              >\n                                 {files.map((file, idx) => (\n                                    <div style={{ display: \"flex\", margin: 2, flexDirection: \"column\" }}>\n                                       <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\" }}>\n                                          <div style={{ display: \"flex\" }}>\n                                             {file.type.split(\"/\")[0] === \"image\" ? (\n                                                <Image24Icon label=\"image\" />\n                                             ) : file.type.split(\"/\")[0] === \"text\" ? (\n                                                <Document24Icon label=\"text\" />\n                                             ) : file.type.split(\"/\")[0] === \"video\" ? (\n                                                <Video24Icon label=\"video\" />\n                                             ) : file.type.split(\"/\")[1] === \"pdf\" ? (\n                                                <PdfDocument24Icon label=\"pdf\" />\n                                             ) : (\n                                                <Generic24Icon label=\"file\" />\n                                             )}{\" \"}\n                                             <div style={{ width: 350, overflow: \"hidden\", marginLeft: 20 }}>{file.name}</div>\n                                          </div>\n                                          <div style={{ width: 150, textAlign: \"center\" }}>{formatFileSize(file.size, 2)}</div>\n                                          <div>\n                                             <Button appearance=\"link\" size={15} onClick={() => handleDeleteFile(idx)}>\n                                                Remove\n                                             </Button>\n                                          </div>\n                                       </div>\n                                       <Divider />\n                                    </div>\n                                 ))}\n                                 <div\n                                    {...getRootProps()}\n                                    style={{\n                                       display: \"flex\",\n                                       flexDirection: \"column\",\n                                       justifyContent: \"center\",\n                                       alignItems: \"center\",\n                                       outline: \"none\",\n                                    }}\n                                 >\n                                    {files.length === 0 ? <Folder48Icon label=\"file\" size=\"medium\" /> : null}\n                                    <p style={{ color: colors.N500, margin: 20, marginTop: files.length === 0 ? 0 : 10 }}>\n                                       {isDragActive\n                                          ? \"Drop file here\"\n                                          : \"Drag 'n' drop some files here, or click on \\\"Add file\\\" button to select files\"}\n                                    </p>\n\n                                    <div>\n                                       <input {...getInputProps()} style={{ outline: \"none\", display: \"none\" }} />\n                                       <Button appearance=\"primary\" iconBefore={<AddIcon label=\"Add icon\" size=\"small\" />}>\n                                          Add files\n                                       </Button>\n                                    </div>\n                                 </div>\n                              </div>\n                           </GridColumn>\n                        </Grid>\n\n                        <Grid spacing=\"cosy\" layout=\"fluid\">\n                           <GridColumn medium={8}>\n                              <Field label=\"Remarks\" name=\"remarks\">\n                                 {({ fieldProps }: any) => <TextField {...fieldProps} />}\n                              </Field>\n                           </GridColumn>\n                           <GridColumn medium={4}>\n                              <Field label=\"Authorized Signature\" name=\"remarks\">\n                                 {({ fieldProps }: any) => <TextField {...fieldProps} />}\n                              </Field>\n                           </GridColumn>\n                        </Grid>\n\n                        <div style={{ display: \"flex\", justifyContent: \"flex-end\", marginTop: 20, marginBottom: 100 }}>\n                           <Button appearance=\"link\" onClick={() => {}}>\n                              Back\n                           </Button>\n                           <Button type=\"submit\" appearance=\"primary\" isLoading={submitting}>\n                              Submit\n                           </Button>\n                        </div>\n                     </form>\n                  )}\n               </Form>\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nexport default TestDetailsForm;\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport { colors } from \"@atlaskit/theme\";\nimport { typography } from \"@atlaskit/theme\";\nimport moment from \"moment\";\n\n// ====================================== File imports ======================================\nimport { Heading, Divider } from \"../../components\";\nimport { SampleDetailsProps } from \"./types\";\n\nconst styles = {\n   item: {\n      display: \"flex\",\n      marginTop: 3,\n   },\n   label: {\n      width: 88,\n      alignItems: \"flex-start\",\n   },\n   text: {\n      display: \"flex\",\n      flex: 1,\n      color: colors.N300,\n      paddingRight: 10,\n   },\n};\n\nconst SampleDetails = (props: SampleDetailsProps) => {\n   const { sampleDetails, sampleId } = props;\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Heading mixin={typography.h300} style={{ marginTop: 1 }}>\n                  {sampleDetails?.name}\n               </Heading>\n               <Heading mixin={typography.h200} style={{ marginTop: 1 }}>\n                  {sampleId}\n               </Heading>\n            </GridColumn>\n         </Grid>\n         <Divider />\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={4}>\n               <div style={styles.item}>\n                  <div style={styles.label}>Method</div>\n                  <div style={styles.text}>{sampleDetails?.test_method_group.name}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Batch no</div>\n                  <div style={styles.text}>{sampleDetails?.batch_no}</div>\n               </div>\n            </GridColumn>\n\n            <GridColumn medium={4}>\n               <div style={styles.item}>\n                  <div style={styles.label}>Sample date</div>\n                  <div style={styles.text}>{moment(sampleDetails?.date, \"YYYY-MM-DD\").format(\"DD/MM/YYYY\")}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Marking</div>\n                  <div style={styles.text}>{sampleDetails?.marking}</div>\n               </div>\n            </GridColumn>\n\n            <GridColumn medium={4}>\n               <div style={styles.item}>\n                  <div style={styles.label}>Due date</div>\n                  <div style={styles.text}>{moment(sampleDetails?.due_date).format(\"DD/MM/YYYY\")}</div>\n               </div>\n               <div style={styles.item}>\n                  <div style={styles.label}>Sample Qty</div>\n                  <div style={styles.text}>{sampleDetails?.sample_qty}</div>\n               </div>\n            </GridColumn>\n         </Grid>\n         <Divider />\n      </Page>\n   );\n};\n\nexport default SampleDetails;\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport Page, { Grid, GridColumn } from \"@atlaskit/page\";\nimport { connect } from \"react-redux\";\nimport ReportDetails from \"./ReportDetail\";\n\n// ====================================== File imports ======================================\nimport { Breadcrumb } from \"../../components\";\nimport AppState from \"../../redux/types\";\nimport { Props } from \"./types\";\nimport SampleDetails from \"./SampleDetails\";\n\nconst SampleResult = (props: Props) => {\n   const { sampleId } = props.match.params;\n   const { sample } = props;\n   const breadcrumbItems = [\n      { path: \"/\", name: \"Dashboard\" },\n      { path: \"/sample\", name: \"Sample\" },\n      { path: `/sample/id/${sampleId}`, name: sampleId },\n      { path: `/sample/id/${sampleId}/result`, name: \"Result\" },\n   ];\n   return (\n      <Page>\n         <Grid spacing=\"compact\" layout=\"fluid\">\n            <GridColumn medium={12}>\n               <Breadcrumb items={breadcrumbItems} screen=\"Result\" />\n            </GridColumn>\n            <GridColumn medium={12}>\n               <SampleDetails sampleDetails={sample} sampleId={sampleId} />\n               <ReportDetails\n                  parameters={sample?.sampleResultParameters.map((parameter) => ({\n                     ...parameter,\n                     assign_to: parameter.assign_to && {\n                        ...parameter.assign_to.toJSON(),\n                        label: parameter.assign_to.toJSON().name,\n                        value: parameter.assign_to.toJSON().objectId,\n                     },\n                     parameter: parameter.parameter.toJSON(),\n                  }))}\n                  onSubmit={() => {}}\n               />\n            </GridColumn>\n         </Grid>\n      </Page>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   sampleResultPermission: state.user.user.role.permission.samples_id_result,\n   sample: state.samples.sample,\n});\n\nexport default connect(mapStateToProps)(SampleResult);\n","// ====================================== Module imports ======================================\nimport React, { useState, useEffect } from \"react\";\nimport { HashRouter, Route, Switch, HashRouterProps } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\n// ====================================== File import ======================================\nimport { getStatus } from \"../redux/actions/AuthActions\";\nimport { logout } from \"../redux/actions/UserActions\";\nimport { getOrganization } from \"../redux/actions/OrganizationActions\";\nimport { getProfile } from \"../redux/actions/UserActions\";\nimport AppState from \"../redux/types\";\nimport Loading from \"../pages/Loading\";\nimport Organization from \"../pages/Organization\";\nimport { SideBar, Box, AlertBox } from \"../components\";\n\n// ====================================== Page import ======================================\nimport Dashboard from \"../pages/Dashboard\";\nimport Role from \"../pages/Role\";\nimport Department from \"../pages/Department\";\nimport PageNotFound from \"../pages/Errors/PageNotFound\";\nimport User from \"../pages/User\";\nimport AddUser from \"../pages/User/AddUser\";\nimport Customer from \"../pages/Customer\";\nimport AddCustomer from \"../pages/Customer/AddCustomer\";\nimport TestGroup from \"../pages/TestGroup\";\nimport AddTestGroup from \"../pages/TestGroup/AddTestGroup\";\nimport Parameter from \"../pages/Parameter\";\nimport AddParameter from \"../pages/Parameter/AddParameter\";\nimport TestMethod from \"../pages/TestMethod\";\nimport AddTestMethod from \"../pages/TestMethod/AddTestMethod\";\nimport SampleDetails from \"../pages/SampleDetails\";\nimport AddSampleDetails from \"../pages/SampleDetails/AddSampleDetails\";\nimport CustomerDetails from \"../pages/Customer/CustomerDetails\";\nimport Sample from \"../pages/Samples\";\nimport AddSample from \"../pages/Samples/AddSample\";\nimport SampleInfoDetails from \"../pages/Samples/Details\";\nimport SampleResult from \"../pages/Result\";\n\ninterface Props extends HashRouterProps {\n   status: number;\n   getStatus: () => any;\n   getOrganization: () => any;\n   logout: () => any;\n   getProfile: () => any;\n   orgnizationDetails: object;\n   user: any;\n}\n\nconst AuthenticatedRoute = (props: Props) => {\n   const [loading, setLoading] = useState(true);\n   const { status, getStatus, getOrganization, logout, getProfile } = props;\n   const { permission } = props.user.role;\n\n   useEffect(() => {\n      const api = async () => {\n         setLoading(true);\n         try {\n            await getStatus();\n            await getOrganization();\n            await getProfile();\n         } catch (error) {\n            if (error.code === 209) {\n               await logout();\n            }\n            if (error.code === 100) {\n               alert(\"Internet is not connected \");\n            }\n         } finally {\n            setLoading(false);\n         }\n      };\n      api();\n   }, [status, getStatus, getOrganization, logout, getProfile]);\n\n   interface Permission {\n      read: boolean;\n      write: boolean;\n   }\n\n   const checkPermission = (permission: Permission): boolean => {\n      if (permission.read || permission.write) {\n         return true;\n      } else {\n         return false;\n      }\n   };\n\n   return loading ? (\n      <Loading />\n   ) : (\n      <div style={{ display: \"flex\", flex: 1, flexDirection: \"column\", height: \"100%\" }}>\n         <AlertBox />\n         <HashRouter>\n            <div className=\"mainBox\" style={{ display: \"flex\", flexDirection: \"row\", flex: 1, height: \"100%\" }}>\n               {status === 2 && (\n                  <div style={{ minWidth: 290, maxWidth: 290 }}>\n                     <SideBar />\n                  </div>\n               )}\n               <Box\n                  elevation=\"e300\"\n                  style={{\n                     display: \"flex\",\n                     flex: 1,\n                     paddingTop: 20,\n                     paddingLeft: 50,\n                     paddingRight: 50,\n                     margin: 0,\n                     borderRadius: 0,\n                     textAlign: \"left\",\n                     overflow: \"scroll\",\n                  }}\n               >\n                  <Switch>\n                     <Route exact path=\"/\" component={status === 2 ? Dashboard : Organization} />\n                     {checkPermission(permission.customer) && <Route exact path=\"/customer\" component={Customer} />}\n                     {checkPermission(permission.customer) && <Route exact path=\"/customer/details/:customerId\" component={CustomerDetails} />}\n                     {permission.customer.write && <Route exact path=\"/customer/add\" component={AddCustomer} />}\n                     {permission.customer.write && <Route exact path=\"/customer/edit/:customerId\" component={AddCustomer} />}\n                     {checkPermission(permission.role) && <Route exact path=\"/organizationsettings/role\" component={Role} />}\n                     {checkPermission(permission.department) && ( <Route exact path=\"/organizationsettings/department\" component={Department} />)}\n                     {checkPermission(permission.user) && <Route exact path=\"/organizationsettings/user\" component={User} />}\n                     {permission.user.write && <Route exact path=\"/organizationsettings/user/add\" component={AddUser} />}\n                     {permission.user.write && <Route exact path=\"/organizationsettings/user/edit/:userId\" component={AddUser} />}\n                     \n                     {checkPermission(permission.samples_group) && <Route exact path=\"/organizationsettings/testgroup\" component={TestGroup} />}\n                     {permission.samples_group.write && <Route exact path=\"/organizationsettings/testgroup/add\" component={AddTestGroup} />}\n                     {permission.samples_group.write && <Route exact path=\"/organizationsettings/testgroup/edit/:groupId\" component={AddTestGroup} />}\n\n                     {checkPermission(permission.samples_group) && <Route exact path=\"/organizationsettings/parameter\" component={Parameter} />}\n                     {permission.samples_group.write && <Route exact path=\"/organizationsettings/parameter/add\" component={AddParameter} />}\n                     {permission.samples_group.write && <Route exact path=\"/organizationsettings/parameter/edit/:parameterId\" component={AddParameter} />}\n\n                     {checkPermission(permission.samples_method) && <Route exact path=\"/organizationsettings/testmethod\" component={TestMethod} />}\n                     {permission.samples_method.write && <Route exact path=\"/organizationsettings/testmethod/add\" component={AddTestMethod} />}\n                     {permission.samples_method.write && <Route exact path=\"/organizationsettings/testmethod/edit/:testMethodId\" component={AddTestMethod} />}\n\n                     {checkPermission(permission.samples_sample) && <Route exact path=\"/organizationsettings/sampledetail\" component={SampleDetails} />}\n                     {permission.samples_sample.write && <Route exact path=\"/organizationsettings/sampledetail/add\" component={AddSampleDetails} />}\n                     {permission.samples_sample.write && <Route exact path=\"/organizationsettings/sampledetail/edit/:sampleDetailId\" component={AddSampleDetails} />}\n\n                     {checkPermission(permission.samples_id) && <Route exact path=\"/sample\" component={Sample} />}\n                     {checkPermission(permission.samples_id) && <Route exact path=\"/sample/id/:sampleId\" component={SampleInfoDetails} />}\n                     {permission.samples_id.write && <Route exact path=\"/sample/add\" component={AddSample} />}\n                     {permission.samples_id.write && <Route exact path=\"/sample/edit/:sampleId\" component={AddSample} />}\n\n                     {checkPermission(permission.samples_id_result) && <Route exact path=\"/sample/id/:sampleId/result\" component={SampleResult} />}\n\n                     <Route component={PageNotFound} />\n                  </Switch>\n               </Box>\n            </div>\n         </HashRouter>\n      </div>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   status: state.auth.status,\n   orgnizationDetails: state.orgnization.details,\n   user: state.user.user,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ getStatus, getOrganization, getProfile, logout }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthenticatedRoute);\n","// ====================================== Module imports ======================================\nimport React, { Fragment, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport Textfield from \"@atlaskit/textfield\";\nimport Form, { Field } from \"@atlaskit/form\";\nimport Button from \"@atlaskit/button\";\nimport { colors, typography, fontFamily } from \"@atlaskit/theme\";\n\n// ====================================== File imports ======================================\nimport { login } from \"../../redux/actions/UserActions\";\nimport { Box, Heading } from \"../../components\";\nimport { Props, LoginForm } from \"./types\";\nimport AppState from \"../../redux/types\";\nimport \"./login.css\";\n\n// ====================================== Component Render ======================================\nconst LoginComponent = (props: Props) => {\n   const [error, setError] = useState(\"\");\n   const exactt_logo = require(\"../../assets/images/exactt_logo.png\");\n   return (\n      <div className=\"container\" style={{ background: colors.N10 }}>\n         <div>\n            <img src={exactt_logo} className=\"login-logo\" alt=\"exactt-logo\" />\n         </div>\n\n         <div\n            style={{\n               fontFamily: fontFamily(),\n               color: colors.N900,\n               marginTop: 20,\n            }}\n         >\n            Your laboratory management tool\n         </div>\n\n         <Box elevation=\"e300\" style={{ textAlign: \"left\" }}>\n            <Heading mixin={typography.h500} style={{ marginTop: 10 }}>\n               Login to your account\n            </Heading>\n            <div>\n               <Form\n                  onSubmit={async (formState: LoginForm) => {\n                     let res = await props.login(formState.username, formState.password);\n                     setError(res.error.message);\n                  }}\n               >\n                  {({ formProps, submitting }: any) => (\n                     <form {...formProps}>\n                        <Field label=\"Username\" isRequired name=\"username\" defaultValue=\"\">\n                           {({ fieldProps }: any) => (\n                              <Fragment>\n                                 <Textfield {...fieldProps} />\n                              </Fragment>\n                           )}\n                        </Field>\n                        <Field label=\"Password\" isRequired name=\"password\" defaultValue=\"\">\n                           {({ fieldProps }: any) => (\n                              <Fragment>\n                                 <Textfield type=\"password\" {...fieldProps} />\n                              </Fragment>\n                           )}\n                        </Field>\n                        {error && <div style={{ color: colors.R400, fontSize: 12, marginTop: 10 }}>Error: {error}</div>}\n                        <div className=\"bottom-section\">\n                           <Button appearance=\"link\">Forgot Password ?</Button>\n                           <Button type=\"submit\" appearance=\"primary\" isLoading={submitting}>\n                              Login\n                           </Button>\n                        </div>\n                     </form>\n                  )}\n               </Form>\n            </div>\n         </Box>\n      </div>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   user: state.user.user,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ login }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginComponent);\n","// ====================================== Module imports ======================================\nimport React, { Fragment } from \"react\";\nimport Textfield from \"@atlaskit/textfield\";\nimport { fontFamily } from \"@atlaskit/theme\";\nimport Form, { Field, ErrorMessage } from \"@atlaskit/form\";\nimport Button from \"@atlaskit/button\";\nimport { colors, typography } from \"@atlaskit/theme\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\n// ====================================== File imports ======================================\nimport { signup } from \"../../redux/actions/UserActions\";\nimport { Box, Heading } from \"../../components\";\nimport { Props, SignupForm } from \"./types\";\nimport AppState from \"../../redux/types\";\nimport \"./signup.css\";\n\nconst SignupComponent = (props: Props) => {\n   const exactt_logo = require(\"../../assets/images/exactt_logo.png\");\n   return (\n      <div className=\"container\" style={{ background: colors.N10 }}>\n         <div>\n            <img src={exactt_logo} className=\"logo\" alt=\"exactt-logo\" />\n         </div>\n\n         <div\n            style={{\n               fontFamily: fontFamily(),\n               color: colors.N900,\n               marginTop: 20,\n            }}\n         >\n            Your laboratory management tool\n         </div>\n\n         <Box elevation=\"e300\" style={{ textAlign: \"left\", width: 500 }}>\n            <Heading mixin={typography.h500} style={{ marginTop: 10 }}>\n               Signup for admin account\n            </Heading>\n            <div>\n               <Form\n                  onSubmit={async (formState: SignupForm) => {\n                     await props.signup(formState);\n                  }}\n               >\n                  {({ formProps, getValues, submitting }: any) => (\n                     <form {...formProps}>\n                        <Field label=\"Name\" isRequired name=\"name\">\n                           {({ fieldProps }: any) => (\n                              <Fragment>\n                                 <Textfield {...fieldProps} />\n                              </Fragment>\n                           )}\n                        </Field>\n                        <Field label=\"Email\" isRequired name=\"email\">\n                           {({ fieldProps }: any) => (\n                              <Fragment>\n                                 <Textfield {...fieldProps} />\n                              </Fragment>\n                           )}\n                        </Field>\n                        <Field label=\"Phone\" isRequired name=\"phone\">\n                           {({ fieldProps }: any) => (\n                              <Fragment>\n                                 <Textfield {...fieldProps} />\n                              </Fragment>\n                           )}\n                        </Field>\n                        <Field label=\"Username\" isRequired name=\"username\">\n                           {({ fieldProps }: any) => (\n                              <Fragment>\n                                 <Textfield {...fieldProps} />\n                              </Fragment>\n                           )}\n                        </Field>\n                        <Field\n                           label=\"Password\"\n                           isRequired\n                           name=\"password\"\n                           validate={(value?: string) => {\n                              if (!value) {\n                                 return;\n                              }\n\n                              if (value.length < 9) {\n                                 return \"TOO_SHORT\";\n                              }\n                           }}\n                        >\n                           {({ fieldProps, error }: any) => (\n                              <Fragment>\n                                 <Textfield type=\"password\" {...fieldProps} />\n                                 {error && <ErrorMessage>{error === \"TOO_SHORT\" && \"Password must be 8 character long!\"}</ErrorMessage>}\n                              </Fragment>\n                           )}\n                        </Field>\n                        <Field\n                           label=\"Confirm Password\"\n                           isRequired\n                           name=\"confirmPassword\"\n                           validate={(value?: string) => {\n                              if (!value) {\n                                 return;\n                              }\n\n                              if (getValues().password !== value) {\n                                 return \"NOT_MATCH\";\n                              }\n                           }}\n                        >\n                           {({ fieldProps, error }: any) => (\n                              <Fragment>\n                                 <Textfield type=\"password\" {...fieldProps} />\n                                 {error && <ErrorMessage>{error === \"NOT_MATCH\" && \"Password is not match!\"}</ErrorMessage>}\n                              </Fragment>\n                           )}\n                        </Field>\n                        <div className=\"bottom-section\">\n                           <div />\n                           <Button type=\"submit\" appearance=\"primary\" isLoading={submitting}>\n                              Submit\n                           </Button>\n                        </div>\n                     </form>\n                  )}\n               </Form>\n            </div>\n         </Box>\n      </div>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   user: state.user.user,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ signup }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupComponent);\n","// ====================================== Module imports ======================================\nimport React, { useEffect, useState } from \"react\";\nimport { HashRouter, Route, Switch, HashRouterProps } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\n// ====================================== File import ======================================\nimport { getStatus } from \"../redux/actions/AuthActions\";\nimport { logout } from \"../redux/actions/UserActions\";\nimport AppState from \"../redux/types\";\nimport Login from \"../pages/Login\";\nimport Signup from \"../pages/Signup\";\nimport Loading from \"../pages/Loading\";\nimport PageNotFound from \"../pages/Errors/PageNotFound\";\n\ninterface Props extends HashRouterProps {\n   status: number;\n   getStatus: () => any;\n   logout: () => any;\n}\n\nconst UnauthenticatedRoute = (props: Props) => {\n   const [loading, setLoading] = useState(true);\n   const { status, getStatus, logout } = props;\n\n   useEffect(() => {\n      const api = async () => {\n         setLoading(true);\n         try {\n            await getStatus();\n         } catch (error) {\n            if (error.code === 209) {\n               await logout();\n            }\n            if (error.code === 100) {\n               alert(\"Internet is not connected \");\n            }\n         }\n         setLoading(false);\n      };\n      api();\n   }, [status, getStatus, logout]);\n\n   return loading ? (\n      <Loading />\n   ) : (\n      <HashRouter>\n         <Switch>\n            <Route exact path=\"/\" component={status === 0 ? Signup : Login} />\n            <Route component={PageNotFound} />\n         </Switch>\n      </HashRouter>\n   );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   status: state.auth.status,\n});\n\nfunction mapDispatchToProps(dispatch: any) {\n   return {\n      ...bindActionCreators({ getStatus, logout }, dispatch),\n   };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UnauthenticatedRoute);\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport Textfield from \"@atlaskit/textfield\";\nimport Form, { Field } from \"@atlaskit/form\";\nimport Button from \"@atlaskit/button\";\nimport { colors, typography, fontFamily } from \"@atlaskit/theme\";\n\n// ====================================== File imports ======================================\nimport { Box, Heading } from \"../../components\";\n\n// ====================================== Component Render ======================================\nconst Connection = () => {\n   const exactt_logo = require(\"../../assets/images/exactt_logo.png\");\n\n   const setLocalStorage = async (data: any) => {\n      localStorage.setItem(\"organizationId\", data.organizationId);\n      localStorage.setItem(\"key\", data.key);\n      localStorage.setItem(\"url\", data.url);\n      window.location.reload(false);\n   };\n\n   return (\n      <div className=\"container\" style={{ background: colors.N10 }}>\n         <div>\n            <img src={exactt_logo} className=\"logo\" alt=\"exactt-logo\" />\n         </div>\n\n         <div\n            style={{\n               fontFamily: fontFamily(),\n               color: colors.N900,\n               marginTop: 20,\n            }}\n         >\n            Your laboratory management tool\n         </div>\n\n         <Box elevation=\"e300\" style={{ textAlign: \"left\" }}>\n            <Heading mixin={typography.h500} style={{ marginTop: 10 }}>\n               Connect to your organization server\n            </Heading>\n            <div>\n               <Form\n                  onSubmit={async (formState: any) => {\n                     await setLocalStorage(formState);\n                  }}\n               >\n                  {({ formProps, submitting }: any) => (\n                     <form {...formProps}>\n                        <Field label=\"Organization Id\" isRequired name=\"organizationId\" defaultValue=\"exactt-backend\">\n                           {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                        </Field>\n                        <Field label=\"Serial key\" isRequired name=\"key\" defaultValue=\"vMvvybc1z4*Q$!J*k4P4NNx\">\n                           {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                        </Field>\n                        <Field label=\"URL\" isRequired name=\"url\" defaultValue=\"https://exactt-dev.herokuapp.com/api\">\n                           {({ fieldProps }: any) => <Textfield {...fieldProps} />}\n                        </Field>\n                        <div style={{ display: \"flex\", justifyContent: \"flex-end\", marginTop: 10 }}>\n                           <Button type=\"submit\" appearance=\"primary\" isLoading={submitting}>\n                              Submit\n                           </Button>\n                        </div>\n                     </form>\n                  )}\n               </Form>\n            </div>\n         </Box>\n      </div>\n   );\n};\n\nexport default Connection;\n","// ====================================== Module imports ======================================\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport Parse from \"parse\";\n\n// ====================================== File imports ======================================\nimport AuthenticatedRoute from \"./AuthenticatedRoute\";\nimport UnauthenticatedRoute from \"./UnauthenticatedRoute\";\nimport Connection from \"../pages/Connection\";\nimport AppState from \"../redux/types\";\n\ninterface Props {\n   user: any;\n}\n\nconst organizationId: any = localStorage.getItem(\"organizationId\");\nconst key: any = localStorage.getItem(\"key\");\nconst url: any = localStorage.getItem(\"url\");\n\nconst softwareOnboarding = organizationId && key && url;\n\nif (softwareOnboarding) {\n   Parse.initialize(organizationId, key, key);\n   Parse.serverURL = url;\n}\n\nconst Navigation = (props: Props) => {\n   const { user } = props;\n   return softwareOnboarding ? user && !user.error ? <AuthenticatedRoute /> : <UnauthenticatedRoute /> : <Connection />;\n};\n\nconst mapStateToProps = (state: AppState) => ({\n   user: state.user.user,\n});\n\nexport default connect(mapStateToProps)(Navigation);\n","// ====================================== Module imports ======================================\n\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { Store, Persistor } from \"./redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport \"@atlaskit/css-reset\";\n\n// ====================================== File import ======================================\nimport Navigation from \"./config/Navigation\";\nimport \"./App.css\";\n\nfunction App() {\n   return (\n      <Provider store={Store}>\n         <PersistGate loading={null} persistor={Persistor}>\n            <Navigation />\n         </PersistGate>\n      </Provider>\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/exactt_logo.033de952.png\";","module.exports = __webpack_public_path__ + \"static/media/exactt_w.b6516914.png\";","module.exports = __webpack_public_path__ + \"static/media/image.2a86ebd4.png\";"],"sourceRoot":""}